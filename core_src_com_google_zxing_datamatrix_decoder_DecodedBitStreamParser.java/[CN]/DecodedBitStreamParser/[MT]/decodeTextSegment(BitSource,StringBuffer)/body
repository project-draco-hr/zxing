{
  int shift=0;
  boolean upperShift=false;
  do {
    if (bits.available() == 8) {
      return ASCII_ENCODE;
    }
    int firstByte=bits.readBits(8);
    if (firstByte == 254) {
      return ASCII_ENCODE;
    }
    int fullBitValue=(firstByte << 8) + bits.readBits(8) - 1;
    int[] cValues=new int[3];
    cValues[0]=fullBitValue / 1600;
    fullBitValue-=cValues[0] * 1600;
    cValues[1]=fullBitValue / 40;
    fullBitValue-=cValues[1] * 40;
    cValues[2]=fullBitValue;
    for (int i=0; i < 3; i++) {
      int cValue=cValues[i];
      if (shift == 0) {
        if (cValue == 0) {
          shift=1;
          continue;
        }
 else         if (cValue == 1) {
          shift=2;
          continue;
        }
 else         if (cValue == 2) {
          shift=3;
          continue;
        }
        if (upperShift) {
          result.append((char)(TEXT_BASIC_SET_CHARS[cValue] + 128));
          upperShift=false;
        }
 else {
          result.append(TEXT_BASIC_SET_CHARS[cValue]);
        }
      }
 else       if (shift == 1) {
        if (upperShift) {
          result.append((char)(cValue + 128));
          upperShift=false;
        }
 else {
          result.append(cValue);
        }
        shift=0;
      }
 else       if (shift == 2) {
        if (cValue < 27) {
          if (upperShift) {
            result.append((char)(C40_SHIFT2_SET_CHARS[cValue] + 128));
            upperShift=false;
          }
 else {
            result.append(C40_SHIFT2_SET_CHARS[cValue]);
          }
        }
 else         if (cValue == 27) {
          throw new ReaderException("Currently not supporting FNC1");
        }
 else         if (cValue == 30) {
          upperShift=true;
        }
 else {
          throw new ReaderException(Integer.toString(cValue) + " is not valid in the C40 Shift 2 set");
        }
        shift=0;
      }
 else       if (shift == 3) {
        if (upperShift) {
          result.append((char)(TEXT_SHIFT3_SET_CHARS[cValue] + 128));
          upperShift=false;
        }
 else {
          result.append(TEXT_SHIFT3_SET_CHARS[cValue]);
        }
        shift=0;
      }
 else {
        throw new ReaderException("Invalid shift value");
      }
    }
  }
 while (bits.available() > 0);
  return ASCII_ENCODE;
}
