{
  BitSource bits=new BitSource(bytes);
  StringBuffer result=new StringBuffer();
  CharacterSetECI currentCharacterSetECI=null;
  Mode mode;
  do {
    if (bits.available() == 0) {
      mode=Mode.TERMINATOR;
    }
 else {
      mode=Mode.forBits(bits.readBits(4));
    }
    if (!mode.equals(Mode.TERMINATOR)) {
      if (mode.equals(Mode.ECI)) {
        int value=ECI.parseECI(bits);
        try {
          currentCharacterSetECI=CharacterSetECI.getCharacterSetECIByValue(value);
        }
 catch (        IllegalArgumentException iae) {
        }
      }
 else {
        int count=bits.readBits(mode.getCharacterCountBits(version));
        if (mode.equals(Mode.NUMERIC)) {
          decodeNumericSegment(bits,result,count);
        }
 else         if (mode.equals(Mode.ALPHANUMERIC)) {
          decodeAlphanumericSegment(bits,result,count);
        }
 else         if (mode.equals(Mode.BYTE)) {
          decodeByteSegment(bits,result,count,currentCharacterSetECI);
        }
 else         if (mode.equals(Mode.KANJI)) {
          decodeKanjiSegment(bits,result,count);
        }
 else {
          throw new ReaderException("Unsupported mode indicator");
        }
      }
    }
  }
 while (!mode.equals(Mode.TERMINATOR));
  return result.toString();
}
