{
  if (a.getDegree() < b.getDegree()) {
    GF256Poly temp=a;
    a=b;
    b=temp;
  }
  GF256Poly rLast=a;
  GF256Poly r=b;
  GF256Poly sLast=GF256Poly.ONE;
  GF256Poly s=GF256Poly.ZERO;
  GF256Poly tLast=GF256Poly.ZERO;
  GF256Poly t=GF256Poly.ONE;
  while (r.getDegree() >= R / 2) {
    GF256Poly rLastLast=rLast;
    GF256Poly sLastLast=sLast;
    GF256Poly tLastLast=tLast;
    rLast=r;
    sLast=s;
    tLast=t;
    if (rLast.isZero()) {
      throw new ReedSolomonException("r_{i-1} was zero");
    }
    r=rLastLast;
    GF256Poly q=GF256Poly.ZERO;
    int denominatorLeadingTerm=rLast.getCoefficient(rLast.getDegree());
    int dltInverse=GF256.inverse(denominatorLeadingTerm);
    while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {
      int degreeDiff=r.getDegree() - rLast.getDegree();
      int scale=GF256.multiply(r.getCoefficient(r.getDegree()),dltInverse);
      q=q.addOrSubtract(GF256Poly.buildMonomial(degreeDiff,scale));
      r=r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff,scale));
    }
    s=q.multiply(sLast).addOrSubtract(sLastLast);
    t=q.multiply(tLast).addOrSubtract(tLastLast);
  }
  int sigmaTildeAtZero=t.getCoefficient(0);
  if (sigmaTildeAtZero == 0) {
    throw new ReedSolomonException("sigmaTilde(0) was zero");
  }
  int inverse=GF256.inverse(sigmaTildeAtZero);
  GF256Poly sigma=t.multiply(inverse);
  GF256Poly omega=r.multiply(inverse);
  return new GF256Poly[]{sigma,omega};
}
