{
  int[] start=findAsteriskPattern(row);
  int nextStart=row.getNextSet(start[1]);
  int end=row.getSize();
  int[] theCounters=counters;
  Arrays.fill(theCounters,0);
  StringBuilder result=decodeRowResult;
  result.setLength(0);
  char decodedChar;
  int lastStart;
  do {
    recordPattern(row,nextStart,theCounters);
    int pattern=toPattern(theCounters);
    if (pattern < 0) {
      throw NotFoundException.getNotFoundInstance();
    }
    decodedChar=patternToChar(pattern);
    result.append(decodedChar);
    lastStart=nextStart;
    for (    int counter : theCounters) {
      nextStart+=counter;
    }
    nextStart=row.getNextSet(nextStart);
  }
 while (decodedChar != '*');
  result.deleteCharAt(result.length() - 1);
  int lastPatternSize=0;
  for (  int counter : theCounters) {
    lastPatternSize+=counter;
  }
  if (nextStart == end || !row.get(nextStart)) {
    throw NotFoundException.getNotFoundInstance();
  }
  if (result.length() < 2) {
    throw NotFoundException.getNotFoundInstance();
  }
  checkChecksums(result);
  result.setLength(result.length() - 2);
  String resultString=decodeExtended(result);
  float left=(float)(start[1] + start[0]) / 2.0f;
  float right=lastStart + lastPatternSize / 2.0f;
  return new Result(resultString,null,new ResultPoint[]{new ResultPoint(left,(float)rowNumber),new ResultPoint(right,(float)rowNumber)},BarcodeFormat.CODE_93);
}
