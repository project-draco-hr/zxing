{
  int length=contents.length();
  if (length < 1 || length > 80) {
    throw new IllegalArgumentException("Contents length should be between 1 and 80 characters, but got " + length);
  }
  for (int i=0; i < length; i++) {
    char c=contents.charAt(i);
    if (c < ' ' || c > '~') {
switch (c) {
case ESCAPE_FNC_1:
case ESCAPE_FNC_2:
case ESCAPE_FNC_3:
case ESCAPE_FNC_4:
        break;
default :
      throw new IllegalArgumentException("Bad character in input: " + c);
  }
}
}
Collection<int[]> patterns=new ArrayList<>();
int checkSum=0;
int checkWeight=1;
int codeSet=0;
int position=0;
while (position < length) {
int requiredDigitCount=codeSet == CODE_CODE_C ? 2 : 4;
int newCodeSet;
if (isDigits(contents,position,requiredDigitCount)) {
  newCodeSet=CODE_CODE_C;
}
 else {
  newCodeSet=CODE_CODE_B;
}
int patternIndex;
if (newCodeSet == codeSet) {
switch (contents.charAt(position)) {
case ESCAPE_FNC_1:
    patternIndex=CODE_FNC_1;
  break;
case ESCAPE_FNC_2:
patternIndex=CODE_FNC_2;
break;
case ESCAPE_FNC_3:
patternIndex=CODE_FNC_3;
break;
case ESCAPE_FNC_4:
patternIndex=CODE_FNC_4_B;
break;
default :
if (codeSet == CODE_CODE_B) {
patternIndex=contents.charAt(position) - ' ';
}
 else {
patternIndex=Integer.parseInt(contents.substring(position,position + 2));
position++;
}
}
position++;
}
 else {
if (codeSet == 0) {
if (newCodeSet == CODE_CODE_B) {
patternIndex=CODE_START_B;
}
 else {
patternIndex=CODE_START_C;
}
}
 else {
patternIndex=newCodeSet;
}
codeSet=newCodeSet;
}
patterns.add(Code128Reader.CODE_PATTERNS[patternIndex]);
checkSum+=patternIndex * checkWeight;
if (position != 0) {
checkWeight++;
}
}
checkSum%=103;
patterns.add(Code128Reader.CODE_PATTERNS[checkSum]);
patterns.add(Code128Reader.CODE_PATTERNS[CODE_STOP]);
int codeWidth=0;
for (int[] pattern : patterns) {
for (int width : pattern) {
codeWidth+=width;
}
}
boolean[] result=new boolean[codeWidth];
int pos=0;
for (int[] pattern : patterns) {
pos+=appendPattern(result,pos,pattern,true);
}
return result;
}
