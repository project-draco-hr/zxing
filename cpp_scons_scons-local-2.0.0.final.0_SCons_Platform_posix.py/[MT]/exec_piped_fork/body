def exec_piped_fork(l, env, stdout, stderr):
    if (stdout != stderr):
        (rFdOut, wFdOut) = os.pipe()
        (rFdErr, wFdErr) = os.pipe()
    else:
        (rFdOut, wFdOut) = os.pipe()
        rFdErr = rFdOut
        wFdErr = wFdOut
    pid = os.fork()
    if (not pid):
        os.close(rFdOut)
        if (rFdOut != rFdErr):
            os.close(rFdErr)
        os.dup2(wFdOut, 1)
        os.dup2(wFdErr, 2)
        os.close(wFdOut)
        if (stdout != stderr):
            os.close(wFdErr)
        exitval = 127
        try:
            os.execvpe(l[0], l, env)
        except OSError as e:
            exitval = exitvalmap.get(e[0], e[0])
            stderr.write(('scons: %s: %s\n' % (l[0], e[1])))
        os._exit(exitval)
    else:
        (pid, stat) = os.waitpid(pid, 0)
        os.close(wFdOut)
        if (stdout != stderr):
            os.close(wFdErr)
        childOut = os.fdopen(rFdOut)
        if (stdout != stderr):
            childErr = os.fdopen(rFdErr)
        else:
            childErr = childOut
        process_cmd_output(childOut, childErr, stdout, stderr)
        os.close(rFdOut)
        if (stdout != stderr):
            os.close(rFdErr)
        if (stat & 255):
            return (stat | 128)
        return (stat >> 8)
