{
  if (args.length == 0) {
    printUsage();
    return;
  }
  Config config=new Config();
  Queue<String> inputs=new ConcurrentLinkedQueue<String>();
  for (  String arg : args) {
    if ("--try_harder".equals(arg)) {
      config.setTryHarder(true);
    }
 else     if ("--pure_barcode".equals(arg)) {
      config.setPureBarcode(true);
    }
 else     if ("--products_only".equals(arg)) {
      config.setProductsOnly(true);
    }
 else     if ("--dump_results".equals(arg)) {
      config.setDumpResults(true);
    }
 else     if ("--dump_black_point".equals(arg)) {
      config.setDumpBlackPoint(true);
    }
 else     if ("--multi".equals(arg)) {
      config.setMulti(true);
    }
 else     if ("--brief".equals(arg)) {
      config.setBrief(true);
    }
 else     if ("--recursive".equals(arg)) {
      config.setRecursive(true);
    }
 else     if (arg.startsWith("--crop")) {
      int[] crop=new int[4];
      String[] tokens=arg.substring(7).split(",");
      for (int i=0; i < crop.length; i++) {
        crop[i]=Integer.parseInt(tokens[i]);
      }
      config.setCrop(crop);
    }
 else     if (arg.startsWith("-")) {
      System.err.println("Unknown command line option " + arg);
      printUsage();
      return;
    }
  }
  config.setHints(buildHints(config));
  for (  String arg : args) {
    if (!arg.startsWith("--")) {
      addArgumentToInputs(arg,config,inputs);
    }
  }
  int numThreads=Runtime.getRuntime().availableProcessors();
  ExecutorService executor=Executors.newFixedThreadPool(numThreads);
  List<Future<Integer>> futures=new ArrayList<Future<Integer>>(numThreads);
  for (int x=0; x < numThreads; x++) {
    futures.add(executor.submit(new DecodeWorker(config,inputs)));
  }
  executor.shutdown();
  int successful=0;
  for (  Future<Integer> future : futures) {
    successful+=future.get();
  }
  int total=inputs.size();
  if (total > 1) {
    System.out.println("\nDecoded " + successful + " files out of "+ total+ " successfully ("+ (successful * 100 / total)+ "%)\n");
  }
}
