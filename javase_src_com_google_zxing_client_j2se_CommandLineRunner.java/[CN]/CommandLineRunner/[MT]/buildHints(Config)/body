{
  Collection<BarcodeFormat> possibleFormats=new ArrayList<BarcodeFormat>();
  String[] possibleFormatsNames=config.getPossibleFormats();
  if (possibleFormatsNames != null && possibleFormatsNames.length > 0) {
    for (    String format : possibleFormatsNames) {
      possibleFormats.add(BarcodeFormat.valueOf(format));
    }
  }
 else {
    possibleFormats.add(BarcodeFormat.UPC_A);
    possibleFormats.add(BarcodeFormat.UPC_E);
    possibleFormats.add(BarcodeFormat.EAN_13);
    possibleFormats.add(BarcodeFormat.EAN_8);
    possibleFormats.add(BarcodeFormat.RSS_14);
    possibleFormats.add(BarcodeFormat.RSS_EXPANDED);
    if (!config.isProductsOnly()) {
      possibleFormats.add(BarcodeFormat.CODE_39);
      possibleFormats.add(BarcodeFormat.CODE_93);
      possibleFormats.add(BarcodeFormat.CODE_128);
      possibleFormats.add(BarcodeFormat.ITF);
      possibleFormats.add(BarcodeFormat.QR_CODE);
      possibleFormats.add(BarcodeFormat.DATA_MATRIX);
      possibleFormats.add(BarcodeFormat.AZTEC);
      possibleFormats.add(BarcodeFormat.PDF_417);
      possibleFormats.add(BarcodeFormat.CODABAR);
      possibleFormats.add(BarcodeFormat.MAXICODE);
    }
  }
  Map<DecodeHintType,Object> hints=new EnumMap<DecodeHintType,Object>(DecodeHintType.class);
  hints.put(DecodeHintType.POSSIBLE_FORMATS,possibleFormats);
  if (config.isTryHarder()) {
    hints.put(DecodeHintType.TRY_HARDER,Boolean.TRUE);
  }
  if (config.isPureBarcode()) {
    hints.put(DecodeHintType.PURE_BARCODE,Boolean.TRUE);
  }
  return hints;
}
