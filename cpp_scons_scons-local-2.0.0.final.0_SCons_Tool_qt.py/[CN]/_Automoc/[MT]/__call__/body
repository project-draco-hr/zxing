def __call__(self, target, source, env):
    '\n        Smart autoscan function. Gets the list of objects for the Program\n        or Lib. Adds objects and builders for the special qt files.\n        '
    try:
        if (int(env.subst('$QT_AUTOSCAN')) == 0):
            return (target, source)
    except ValueError:
        pass
    try:
        debug = int(env.subst('$QT_DEBUG'))
    except ValueError:
        debug = 0
    splitext = SCons.Util.splitext
    objBuilder = getattr(env, self.objBuilderName)
    q_object_search = re.compile('[^A-Za-z0-9]Q_OBJECT[^A-Za-z0-9]')
    objBuilderEnv = objBuilder.env
    objBuilder.env = env
    mocBuilderEnv = env.Moc.env
    env.Moc.env = env
    out_sources = source[:]
    for obj in source:
        if (not obj.has_builder()):
            if debug:
                print ("scons: qt: '%s' seems to be a binary. Discarded." % str(obj))
            continue
        cpp = obj.sources[0]
        if (not (splitext(str(cpp))[1] in cxx_suffixes)):
            if debug:
                print ("scons: qt: '%s' is no cxx file. Discarded." % str(cpp))
            continue
        cpp_contents = cpp.get_text_contents()
        h = None
        for h_ext in header_extensions:
            hname = (splitext(cpp.name)[0] + h_ext)
            h = find_file(hname, (cpp.get_dir(),), env.File)
            if h:
                if debug:
                    print ("scons: qt: Scanning '%s' (header of '%s')" % (str(h), str(cpp)))
                h_contents = h.get_text_contents()
                break
        if ((not h) and debug):
            print ("scons: qt: no header for '%s'." % str(cpp))
        if (h and q_object_search.search(h_contents)):
            moc_cpp = env.Moc(h)
            moc_o = objBuilder(moc_cpp)
            out_sources.append(moc_o)
            if debug:
                print ("scons: qt: found Q_OBJECT macro in '%s', moc'ing to '%s'" % (str(h), str(moc_cpp)))
        if (cpp and q_object_search.search(cpp_contents)):
            moc = env.Moc(cpp)
            env.Ignore(moc, moc)
            if debug:
                print ("scons: qt: found Q_OBJECT macro in '%s', moc'ing to '%s'" % (str(cpp), str(moc)))
    objBuilder.env = objBuilderEnv
    env.Moc.env = mocBuilderEnv
    return (target, out_sources)
