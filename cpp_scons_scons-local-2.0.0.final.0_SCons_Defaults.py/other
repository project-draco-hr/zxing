"SCons.Defaults\n\nBuilders and other things for the local site.  Here's where we'll\nduplicate the functionality of autoconf until we move it into the\ninstallation procedure or use something like qmconf.\n\nThe code that reads the registry to find MSVC components was borrowed\nfrom distutils.msvccompiler.\n\n"
from __future__ import division
__revision__ = 'src/engine/SCons/Defaults.py 5023 2010/06/14 22:05:46 scons'
import os
import errno
import shutil
import stat
import time
import sys
import SCons.Action
import SCons.Builder
import SCons.CacheDir
import SCons.Environment
import SCons.PathList
import SCons.Subst
import SCons.Tool
_default_env = None
SharedCheck = SCons.Action.Action(SharedFlagChecker, None)
CScan = SCons.Tool.CScanner
DScan = SCons.Tool.DScanner
LaTeXScan = SCons.Tool.LaTeXScanner
ObjSourceScan = SCons.Tool.SourceFileScanner
ProgScan = SCons.Tool.ProgramScanner
import SCons.Scanner.Dir
DirScanner = SCons.Scanner.Dir.DirScanner()
DirEntryScanner = SCons.Scanner.Dir.DirEntryScanner()
CAction = SCons.Action.Action('$CCCOM', '$CCCOMSTR')
ShCAction = SCons.Action.Action('$SHCCCOM', '$SHCCCOMSTR')
CXXAction = SCons.Action.Action('$CXXCOM', '$CXXCOMSTR')
ShCXXAction = SCons.Action.Action('$SHCXXCOM', '$SHCXXCOMSTR')
ASAction = SCons.Action.Action('$ASCOM', '$ASCOMSTR')
ASPPAction = SCons.Action.Action('$ASPPCOM', '$ASPPCOMSTR')
LinkAction = SCons.Action.Action('$LINKCOM', '$LINKCOMSTR')
ShLinkAction = SCons.Action.Action('$SHLINKCOM', '$SHLINKCOMSTR')
LdModuleLinkAction = SCons.Action.Action('$LDMODULECOM', '$LDMODULECOMSTR')
ActionFactory = SCons.Action.ActionFactory
Chmod = ActionFactory(chmod_func, chmod_strfunc)
Copy = ActionFactory(copy_func, (lambda dest, src: ('Copy("%s", "%s")' % (dest, src))), convert=str)
Delete = ActionFactory(delete_func, delete_strfunc)
Mkdir = ActionFactory(mkdir_func, (lambda dir: ('Mkdir(%s)' % get_paths_str(dir))))
Move = ActionFactory(move_func, (lambda dest, src: ('Move("%s", "%s")' % (dest, src))), convert=str)
Touch = ActionFactory(touch_func, (lambda file: ('Touch(%s)' % get_paths_str(file))))
ConstructionEnvironment = {'BUILDERS': {}, 'SCANNERS': [], 'CONFIGUREDIR': '#/.sconf_temp', 'CONFIGURELOG': '#/config.log', 'CPPSUFFIXES': SCons.Tool.CSuffixes, 'DSUFFIXES': SCons.Tool.DSuffixes, 'ENV': {}, 'IDLSUFFIXES': SCons.Tool.IDLSuffixes, '_concat': _concat, '_defines': _defines, '_stripixes': _stripixes, '_LIBFLAGS': '${_concat(LIBLINKPREFIX, LIBS, LIBLINKSUFFIX, __env__)}', '_LIBDIRFLAGS': '$( ${_concat(LIBDIRPREFIX, LIBPATH, LIBDIRSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)', '_CPPINCFLAGS': '$( ${_concat(INCPREFIX, CPPPATH, INCSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)', '_CPPDEFFLAGS': '${_defines(CPPDEFPREFIX, CPPDEFINES, CPPDEFSUFFIX, __env__)}', 'TEMPFILE': NullCmdGenerator, 'Dir': Variable_Method_Caller('TARGET', 'Dir'), 'Dirs': Variable_Method_Caller('TARGET', 'Dirs'), 'File': Variable_Method_Caller('TARGET', 'File'), 'RDirs': Variable_Method_Caller('TARGET', 'RDirs'), }
