{
  float v0x=vertices[0].getX();
  float v0y=vertices[0].getY();
  float v2x=vertices[2].getX();
  float v2y=vertices[2].getY();
  float v4x=vertices[4].getX();
  float v4y=vertices[4].getY();
  float v6x=vertices[6].getX();
  float v6y=vertices[6].getY();
  float skew=v4y - v6y;
  if (upsideDown) {
    skew=-skew;
  }
  if (skew > SKEW_THRESHOLD) {
    float deltax=v6x - v0x;
    float deltay=v6y - v0y;
    float delta2=deltax * deltax + deltay * deltay;
    float correction=(v4x - v0x) * deltax / delta2;
    vertices[4]=new ResultPoint(v0x + correction * deltax,v0y + correction * deltay);
  }
 else   if (-skew > SKEW_THRESHOLD) {
    float deltax=v2x - v4x;
    float deltay=v2y - v4y;
    float delta2=deltax * deltax + deltay * deltay;
    float correction=(v2x - v6x) * deltax / delta2;
    vertices[6]=new ResultPoint(v2x - correction * deltax,v2y - correction * deltay);
  }
  float v1x=vertices[1].getX();
  float v1y=vertices[1].getY();
  float v3x=vertices[3].getX();
  float v3y=vertices[3].getY();
  float v5x=vertices[5].getX();
  float v5y=vertices[5].getY();
  float v7x=vertices[7].getX();
  float v7y=vertices[7].getY();
  skew=v7y - v5y;
  if (upsideDown) {
    skew=-skew;
  }
  if (skew > SKEW_THRESHOLD) {
    float deltax=v7x - v1x;
    float deltay=v7y - v1y;
    float delta2=deltax * deltax + deltay * deltay;
    float correction=(v5x - v1x) * deltax / delta2;
    vertices[5]=new ResultPoint(v1x + correction * deltax,v1y + correction * deltay);
  }
 else   if (-skew > SKEW_THRESHOLD) {
    float deltax=v3x - v5x;
    float deltay=v3y - v5y;
    float delta2=deltax * deltax + deltay * deltay;
    float correction=(v3x - v7x) * deltax / delta2;
    vertices[7]=new ResultPoint(v3x - correction * deltax,v3y - correction * deltay);
  }
}
