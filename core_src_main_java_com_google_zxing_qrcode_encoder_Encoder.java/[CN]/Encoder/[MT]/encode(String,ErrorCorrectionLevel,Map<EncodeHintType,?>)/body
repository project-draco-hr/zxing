{
  String encoding=DEFAULT_BYTE_MODE_ENCODING;
  if (hints != null && hints.containsKey(EncodeHintType.CHARACTER_SET)) {
    encoding=hints.get(EncodeHintType.CHARACTER_SET).toString();
  }
  Mode mode=chooseMode(content,encoding);
  BitArray headerBits=new BitArray();
  if (mode == Mode.BYTE && !DEFAULT_BYTE_MODE_ENCODING.equals(encoding)) {
    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding);
    if (eci != null) {
      appendECI(eci,headerBits);
    }
  }
  appendModeInfo(mode,headerBits);
  BitArray dataBits=new BitArray();
  appendBytes(content,mode,dataBits,encoding);
  Version version;
  if (hints != null && hints.containsKey(EncodeHintType.QR_VERSION)) {
    int versionNumber=Integer.parseInt(hints.get(EncodeHintType.QR_VERSION).toString());
    version=Version.getVersionForNumber(versionNumber);
    int bitsNeeded=calculateBitsNeeded(mode,headerBits,dataBits,version);
    if (!willFit(bitsNeeded,version,ecLevel)) {
      throw new WriterException("Data too big for requested version");
    }
  }
 else {
    version=recommendVersion(ecLevel,mode,headerBits,dataBits);
  }
  BitArray headerAndDataBits=new BitArray();
  headerAndDataBits.appendBitArray(headerBits);
  int numLetters=mode == Mode.BYTE ? dataBits.getSizeInBytes() : content.length();
  appendLengthInfo(numLetters,version,mode,headerAndDataBits);
  headerAndDataBits.appendBitArray(dataBits);
  Version.ECBlocks ecBlocks=version.getECBlocksForLevel(ecLevel);
  int numDataBytes=version.getTotalCodewords() - ecBlocks.getTotalECCodewords();
  terminateBits(numDataBytes,headerAndDataBits);
  BitArray finalBits=interleaveWithECBytes(headerAndDataBits,version.getTotalCodewords(),numDataBytes,ecBlocks.getNumBlocks());
  QRCode qrCode=new QRCode();
  qrCode.setECLevel(ecLevel);
  qrCode.setMode(mode);
  qrCode.setVersion(version);
  int dimension=version.getDimensionForVersion();
  ByteMatrix matrix=new ByteMatrix(dimension,dimension);
  int maskPattern=chooseMaskPattern(finalBits,ecLevel,version,matrix);
  qrCode.setMaskPattern(maskPattern);
  MatrixUtil.buildMatrix(finalBits,ecLevel,version,maskPattern,matrix);
  qrCode.setMatrix(matrix);
  return qrCode;
}
