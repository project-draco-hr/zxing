def generate(env, version=None, abi=None, topdir=None, verbose=0):
    'Add Builders and construction variables for Intel C/C++ compiler\n    to an Environment.\n    args:\n      version: (string) compiler version to use, like "80"\n      abi:     (string) \'win32\' or whatever Itanium version wants\n      topdir:  (string) compiler top dir, like\n                         "c:\\Program Files\\Intel\\Compiler70"\n                        If topdir is used, version and abi are ignored.\n      verbose: (int)    if >0, prints compiler version used.\n    '
    if (not (is_mac or is_linux or is_windows)):
        return
    if is_windows:
        SCons.Tool.msvc.generate(env)
    elif is_linux:
        SCons.Tool.gcc.generate(env)
    elif is_mac:
        SCons.Tool.gcc.generate(env)
    vlist = get_all_compiler_versions()
    if (not version):
        if vlist:
            version = vlist[0]
    else:
        v = get_version_from_list(version, vlist)
        if (not v):
            raise SCons.Errors.UserError((('Invalid Intel compiler version %s: ' % version) + ('installed versions are %s' % ', '.join(vlist))))
        version = v
    abi = check_abi(abi)
    if (abi is None):
        if (is_mac or is_linux):
            uname_m = os.uname()[4]
            if (uname_m == 'x86_64'):
                abi = 'x86_64'
            else:
                abi = 'ia32'
        elif is_win64:
            abi = 'em64t'
        else:
            abi = 'ia32'
    if (version and (not topdir)):
        try:
            topdir = get_intel_compiler_top(version, abi)
        except (SCons.Util.RegError, IntelCError):
            topdir = None
    if (not topdir):


        class ICLTopDirWarning(SCons.Warnings.Warning):
            pass
        if (((is_mac or is_linux) and (not env.Detect('icc'))) or (is_windows and (not env.Detect('icl')))):
            SCons.Warnings.enableWarningClass(ICLTopDirWarning)
            SCons.Warnings.warn(ICLTopDirWarning, ("Failed to find Intel compiler for version='%s', abi='%s'" % (str(version), str(abi))))
        else:
            SCons.Warnings.enableWarningClass(ICLTopDirWarning)
            SCons.Warnings.warn(ICLTopDirWarning, ("Can't find Intel compiler top dir for version='%s', abi='%s'" % (str(version), str(abi))))
    if topdir:
        if verbose:
            print ("Intel C compiler: using version %s (%g), abi %s, in '%s'" % (repr(version), linux_ver_normalize(version), abi, topdir))
            if is_linux:
                os.system(('%s/bin/icc --version' % topdir))
            if is_mac:
                os.system(('%s/bin/icc --version' % topdir))
        env['INTEL_C_COMPILER_TOP'] = topdir
        if is_linux:
            paths = {'INCLUDE': 'include', 'LIB': 'lib', 'PATH': 'bin', 'LD_LIBRARY_PATH': 'lib', }
            for p in paths.keys():
                env.PrependENVPath(p, os.path.join(topdir, paths[p]))
        if is_mac:
            paths = {'INCLUDE': 'include', 'LIB': 'lib', 'PATH': 'bin', 'LD_LIBRARY_PATH': 'lib', }
            for p in paths.keys():
                env.PrependENVPath(p, os.path.join(topdir, paths[p]))
        if is_windows:
            paths = (('INCLUDE', 'IncludeDir', 'Include'), ('LIB', 'LibDir', 'Lib'), ('PATH', 'BinDir', 'Bin'))
            if (version is None):
                version = ''
            for p in paths:
                try:
                    path = get_intel_registry_value(p[1], version, abi)
                    path = path.replace('$(ICInstallDir)', (topdir + os.sep))
                except IntelCError:
                    env.PrependENVPath(p[0], os.path.join(topdir, p[2]))
                else:
                    env.PrependENVPath(p[0], path.split(os.pathsep))
    if is_windows:
        env['CC'] = 'icl'
        env['CXX'] = 'icl'
        env['LINK'] = 'xilink'
    else:
        env['CC'] = 'icc'
        env['CXX'] = 'icpc'
        env['AR'] = 'xiar'
        env['LD'] = 'xild'
    if version:
        env['INTEL_C_COMPILER_VERSION'] = linux_ver_normalize(version)
    if is_windows:
        envlicdir = os.environ.get('INTEL_LICENSE_FILE', '')
        K = 'SOFTWARE\\Intel\\Licenses'
        try:
            k = SCons.Util.RegOpenKeyEx(SCons.Util.HKEY_LOCAL_MACHINE, K)
            reglicdir = SCons.Util.RegQueryValueEx(k, 'w_cpp')[0]
        except (AttributeError, SCons.Util.RegError):
            reglicdir = ''
        defaultlicdir = 'C:\\Program Files\\Common Files\\Intel\\Licenses'
        licdir = None
        for ld in [envlicdir, reglicdir]:
            if (ld and ((ld.find('@') != (-1)) or os.path.exists(ld))):
                licdir = ld
                break
        if (not licdir):
            licdir = defaultlicdir
            if (not os.path.exists(licdir)):


                class ICLLicenseDirWarning(SCons.Warnings.Warning):
                    pass
                SCons.Warnings.enableWarningClass(ICLLicenseDirWarning)
                SCons.Warnings.warn(ICLLicenseDirWarning, ('Intel license dir was not found.  Tried using the INTEL_LICENSE_FILE environment variable (%s), the registry (%s) and the default path (%s).  Using the default path as a last resort.' % (envlicdir, reglicdir, defaultlicdir)))
        env['ENV']['INTEL_LICENSE_FILE'] = licdir
