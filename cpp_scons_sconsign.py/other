__revision__ = 'src/script/sconsign.py 5023 2010/06/14 22:05:46 scons'
__version__ = '2.0.0.final.0'
__build__ = 'r5023'
__buildsys__ = 'scons-dev'
__date__ = '2010/06/14 22:05:46'
__developer__ = 'scons'
import os
import sys
import time
script_dir = sys.path[0]
if (script_dir in sys.path):
    sys.path.remove(script_dir)
libs = []
if ('SCONS_LIB_DIR' in os.environ):
    libs.append(os.environ['SCONS_LIB_DIR'])
local_version = ('scons-local-' + __version__)
local = 'scons-local'
if script_dir:
    local_version = os.path.join(script_dir, local_version)
    local = os.path.join(script_dir, local)
libs.append(os.path.abspath(local_version))
libs.append(os.path.abspath(local))
scons_version = ('scons-%s' % __version__)
prefs = []
if (sys.platform == 'win32'):
    prefs.append(sys.prefix)
    prefs.append(os.path.join(sys.prefix, 'Lib', 'site-packages'))
else:
    if (script_dir == 'bin'):
        prefs.append(os.getcwd())
    else:
        if ((script_dir == '.') or (script_dir == '')):
            script_dir = os.getcwd()
        (head, tail) = os.path.split(script_dir)
        if (tail == 'bin'):
            prefs.append(head)
    (head, tail) = os.path.split(sys.prefix)
    if (tail == 'usr'):
        prefs.append(sys.prefix)
        prefs.append(os.path.join(sys.prefix, 'local'))
    elif (tail == 'local'):
        (h, t) = os.path.split(head)
        if (t == 'usr'):
            prefs.append(sys.prefix)
            prefs.append(head)
        else:
            prefs.append(sys.prefix)
    else:
        prefs.append(sys.prefix)
    temp = [os.path.join(x, 'lib') for x in prefs]
    temp.extend([os.path.join(x, 'lib', ('python' + sys.version[:3]), 'site-packages') for x in prefs])
    prefs = temp
    try:
        libpath = os.__file__
    except AttributeError:
        pass
    else:
        (libpath, tail) = os.path.split(libpath)
        (libpath, tail) = os.path.split(libpath)
        prefs.append(libpath)
    try:
        import pkg_resources
    except ImportError:
        pass
    else:
        try:
            d = pkg_resources.get_distribution('scons')
        except pkg_resources.DistributionNotFound:
            pass
        else:
            prefs.append(d.location)
libs.extend([os.path.join(x, scons_version) for x in prefs])
libs.extend([os.path.join(x, 'scons') for x in prefs])
sys.path = (libs + sys.path)
import SCons.compat
import whichdb
import pickle
import imp
import SCons.SConsign
_orig_whichdb = whichdb.whichdb
whichdb.whichdb = my_whichdb
Do_Call = None
Print_Directories = []
Print_Entries = []
Print_Flags = Flagger()
Verbose = 0
Readable = 0
map_field = {'action': map_action, 'timestamp': map_timestamp, 'bkids': map_bkids, }
map_name = {'implicit': 'bkids', }
nodeinfo_string = nodeinfo_cooked
import getopt
helpstr = 'Usage: sconsign [OPTIONS] FILE [...]\nOptions:\n  -a, --act, --action         Print build action information.\n  -c, --csig                  Print content signature information.\n  -d DIR, --dir=DIR           Print only info about DIR.\n  -e ENTRY, --entry=ENTRY     Print only info about ENTRY.\n  -f FORMAT, --format=FORMAT  FILE is in the specified FORMAT.\n  -h, --help                  Print this message and exit.\n  -i, --implicit              Print implicit dependency information.\n  -r, --readable              Print timestamps in human-readable form.\n  --raw                       Print raw Python object representations.\n  -s, --size                  Print file sizes.\n  -t, --timestamp             Print timestamp information.\n  -v, --verbose               Verbose, describe each field.\n'
(opts, args) = getopt.getopt(sys.argv[1:], 'acd:e:f:hirstv', ['act', 'action', 'csig', 'dir=', 'entry=', 'format=', 'help', 'implicit', 'raw', 'readable', 'size', 'timestamp', 'verbose'])
for (o, a) in opts:
    if (o in ('-a', '--act', '--action')):
        Print_Flags['action'] = 1
    elif (o in ('-c', '--csig')):
        Print_Flags['csig'] = 1
    elif (o in ('-d', '--dir')):
        Print_Directories.append(a)
    elif (o in ('-e', '--entry')):
        Print_Entries.append(a)
    elif (o in ('-f', '--format')):
        Module_Map = {'dblite': 'SCons.dblite', 'sconsign': None, }
        dbm_name = Module_Map.get(a, a)
        if dbm_name:
            try:
                dbm = my_import(dbm_name)
            except:
                sys.stderr.write(("sconsign: illegal file format `%s'\n" % a))
                print helpstr
                sys.exit(2)
            Do_Call = Do_SConsignDB(a, dbm)
        else:
            Do_Call = Do_SConsignDir
    elif (o in ('-h', '--help')):
        print helpstr
        sys.exit(0)
    elif (o in ('-i', '--implicit')):
        Print_Flags['implicit'] = 1
    elif (o in ('--raw',)):
        nodeinfo_string = nodeinfo_raw
    elif (o in ('-r', '--readable')):
        Readable = 1
    elif (o in ('-s', '--size')):
        Print_Flags['size'] = 1
    elif (o in ('-t', '--timestamp')):
        Print_Flags['timestamp'] = 1
    elif (o in ('-v', '--verbose')):
        Verbose = 1
if Do_Call:
    for a in args:
        Do_Call(a)
else:
    for a in args:
        dbm_name = whichdb.whichdb(a)
        if dbm_name:
            Map_Module = {'SCons.dblite': 'dblite', }
            dbm = my_import(dbm_name)
            Do_SConsignDB(Map_Module.get(dbm_name, dbm_name), dbm)(a)
        else:
            Do_SConsignDir(a)
sys.exit(0)
