{
  int width=getWidth();
  int height=getHeight();
  int dataWidth=getDataWidth();
  int dataHeight=getDataHeight();
  byte[] yuv=getYUVData();
  int expectedYBytes=dataWidth * dataHeight;
  int expectedUBytes=expectedYBytes >> 2;
  int expectedVBytes=expectedYBytes >> 2;
  int expectedBytes=expectedYBytes + expectedUBytes + expectedVBytes;
  if (yuv.length != expectedBytes) {
    throw new IllegalStateException("Expected " + expectedBytes + " bytes");
  }
  int[] pixels=new int[width * height];
  int inputYOffset=getTop() * getDataWidth() + getLeft();
  int uOffset=expectedYBytes;
  int vOffset=expectedYBytes + expectedUBytes;
  for (int y=0; y < height; y++) {
    int outputOffset=y * width;
    for (int x=0; x < width; x++) {
      int yOffset=inputYOffset + x;
      int yDataRow=yOffset / dataWidth;
      int yDataOffset=yOffset % dataWidth;
      int uvOffset=((yDataRow >> 1) * dataWidth + yDataOffset) >> 1;
      int y1=yuv[yOffset] & 0xFF;
      int u=yuv[uOffset + uvOffset] & 0xFF;
      int v=yuv[vOffset + uvOffset] & 0XFF;
      pixels[outputOffset + x]=OPAQUE_ALPHA | InterleavedYUV422LuminanceSource.yuvToRGB(y1,u,v);
    }
    inputYOffset+=dataWidth;
  }
  Bitmap bitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
  bitmap.setPixels(pixels,0,width,0,0,width,height);
  return bitmap;
}
