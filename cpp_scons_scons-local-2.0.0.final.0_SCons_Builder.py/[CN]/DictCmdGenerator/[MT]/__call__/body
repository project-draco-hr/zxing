def __call__(self, target, source, env, for_signature):
    if (not source):
        return []
    if self.source_ext_match:
        suffixes = self.src_suffixes()
        ext = None
        for src in map(str, source):
            my_ext = match_splitext(src, suffixes)[1]
            if (ext and (my_ext != ext)):
                raise UserError(("While building `%s' from `%s': Cannot build multiple sources with different extensions: %s, %s" % (repr(list(map(str, target))), src, ext, my_ext)))
            ext = my_ext
    else:
        ext = match_splitext(str(source[0]), self.src_suffixes())[1]
    if (not ext):
        raise UserError(("While building `%s': Cannot deduce file extension from source files: %s" % (repr(list(map(str, target))), repr(list(map(str, source))))))
    try:
        ret = SCons.Util.Selector.__call__(self, env, source, ext)
    except KeyError as e:
        raise UserError(('Ambiguous suffixes after environment substitution: %s == %s == %s' % (e.args[0], e.args[1], e.args[2])))
    if (ret is None):
        raise UserError(("While building `%s' from `%s': Don't know how to build from a source file with suffix `%s'.  Expected a suffix in this list: %s." % (repr(list(map(str, target))), repr(list(map(str, source))), ext, repr(list(self.keys())))))
    return ret
