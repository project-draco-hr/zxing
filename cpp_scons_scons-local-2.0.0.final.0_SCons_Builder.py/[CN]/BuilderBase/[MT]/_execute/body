def _execute(self, env, target, source, overwarn={}, executor_kw={}):
    if self.src_builder:
        source = self.src_builder_sources(env, source, overwarn)
    if (self.single_source and (len(source) > 1) and (target is None)):
        result = []
        if (target is None):
            target = ([None] * len(source))
        for (tgt, src) in zip(target, source):
            if (not (tgt is None)):
                tgt = [tgt]
            if (not (src is None)):
                src = [src]
            result.extend(self._execute(env, tgt, src, overwarn))
        return SCons.Node.NodeList(result)
    overwarn.warn()
    (tlist, slist) = self._create_nodes(env, target, source)
    _node_errors(self, env, tlist, slist)
    executor = None
    key = None
    if self.multi:
        try:
            executor = tlist[0].get_executor(create=0)
        except (AttributeError, IndexError):
            pass
        else:
            executor.add_sources(slist)
    if (executor is None):
        if (not self.action):
            fmt = 'Builder %s must have an action to build %s.'
            raise UserError((fmt % (self.get_name((env or self.env)), list(map(str, tlist)))))
        key = self.action.batch_key((env or self.env), tlist, slist)
        if key:
            try:
                executor = SCons.Executor.GetBatchExecutor(key)
            except KeyError:
                pass
            else:
                executor.add_batch(tlist, slist)
    if (executor is None):
        executor = SCons.Executor.Executor(self.action, env, [], tlist, slist, executor_kw)
        if key:
            SCons.Executor.AddBatchExecutor(key, executor)
    for t in tlist:
        t.cwd = env.fs.getcwd()
        t.builder_set(self)
        t.env_set(env)
        t.add_source(slist)
        t.set_executor(executor)
        t.set_explicit(self.is_explicit)
    return SCons.Node.NodeList(tlist)
