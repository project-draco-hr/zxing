def _create_nodes(self, env, target=None, source=None):
    'Create and return lists of target and source nodes.\n        '
    src_suf = self.get_src_suffix(env)
    target_factory = env.get_factory(self.target_factory)
    source_factory = env.get_factory(self.source_factory)
    source = self._adjustixes(source, None, src_suf)
    slist = env.arg2nodes(source, source_factory)
    pre = self.get_prefix(env, slist)
    suf = self.get_suffix(env, slist)
    if (target is None):
        try:
            t_from_s = slist[0].target_from_source
        except AttributeError:
            raise UserError(("Do not know how to create a target from source `%s'" % slist[0]))
        except IndexError:
            tlist = []
        else:
            splitext = (lambda S: self.splitext(S, env))
            tlist = [t_from_s(pre, suf, splitext)]
    else:
        target = self._adjustixes(target, pre, suf, self.ensure_suffix)
        tlist = env.arg2nodes(target, target_factory, target=target, source=source)
    if self.emitter:
        new_targets = []
        for t in tlist:
            if (not t.is_derived()):
                t.builder_set(self)
                new_targets.append(t)
        orig_tlist = tlist[:]
        orig_slist = slist[:]
        (target, source) = self.emitter(target=tlist, source=slist, env=env)
        for t in new_targets:
            if (t.builder is self):
                t.builder_set(None)
        tlist = env.arg2nodes(target, target_factory, target=orig_tlist, source=orig_slist)
        slist = env.arg2nodes(source, source_factory, target=orig_tlist, source=orig_slist)
    return (tlist, slist)
