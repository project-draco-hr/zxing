"SCons.Builder\n\nBuilder object subsystem.\n\nA Builder object is a callable that encapsulates information about how\nto execute actions to create a target Node (file) from source Nodes\n(files), and how to create those dependencies for tracking.\n\nThe main entry point here is the Builder() factory method.  This provides\na procedural interface that creates the right underlying Builder object\nbased on the keyword arguments supplied and the types of the arguments.\n\nThe goal is for this external interface to be simple enough that the\nvast majority of users can create new Builders as necessary to support\nbuilding new types of files in their configurations, without having to\ndive any deeper into this subsystem.\n\nThe base class here is BuilderBase.  This is a concrete base class which\ndoes, in fact, represent the Builder objects that we (or users) create.\n\nThere is also a proxy that looks like a Builder:\n\n    CompositeBuilder\n\n        This proxies for a Builder with an action that is actually a\n        dictionary that knows how to map file suffixes to a specific\n        action.  This is so that we can invoke different actions\n        (compilers, compile options) for different flavors of source\n        files.\n\nBuilders and their proxies have the following public interface methods\nused by other modules:\n\n    __call__()\n        THE public interface.  Calling a Builder object (with the\n        use of internal helper methods) sets up the target and source\n        dependencies, appropriate mapping to a specific action, and the\n        environment manipulation necessary for overridden construction\n        variable.  This also takes care of warning about possible mistakes\n        in keyword arguments.\n\n    add_emitter()\n        Adds an emitter for a specific file suffix, used by some Tool\n        modules to specify that (for example) a yacc invocation on a .y\n        can create a .h *and* a .c file.\n\n    add_action()\n        Adds an action for a specific file suffix, heavily used by\n        Tool modules to add their specific action(s) for turning\n        a source file into an object file to the global static\n        and shared object file Builders.\n\nThere are the following methods for internal use within this module:\n\n    _execute()\n        The internal method that handles the heavily lifting when a\n        Builder is called.  This is used so that the __call__() methods\n        can set up warning about possible mistakes in keyword-argument\n        overrides, and *then* execute all of the steps necessary so that\n        the warnings only occur once.\n\n    get_name()\n        Returns the Builder's name within a specific Environment,\n        primarily used to try to return helpful information in error\n        messages.\n\n    adjust_suffix()\n    get_prefix()\n    get_suffix()\n    get_src_suffix()\n    set_src_suffix()\n        Miscellaneous stuff for handling the prefix and suffix\n        manipulation we use in turning source file names into target\n        file names.\n\n"
__revision__ = 'src/engine/SCons/Builder.py 5023 2010/06/14 22:05:46 scons'
import collections
import SCons.Action
from SCons.Debug import logInstanceCreation
from SCons.Errors import InternalError, UserError
import SCons.Executor
import SCons.Memoize
import SCons.Node
import SCons.Node.FS
import SCons.Util
import SCons.Warnings
_null = _Null
misleading_keywords = {'targets': 'target', 'sources': 'source', }
