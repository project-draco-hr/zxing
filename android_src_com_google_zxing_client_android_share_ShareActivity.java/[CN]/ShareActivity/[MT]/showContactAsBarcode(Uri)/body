{
  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);
  if (contactUri == null) {
    return;
  }
  ContentResolver resolver=getContentResolver();
  Cursor cursor;
  try {
    cursor=resolver.query(contactUri,null,null,null,null);
  }
 catch (  IllegalArgumentException ignored) {
    return;
  }
  if (cursor == null) {
    return;
  }
  String id;
  String name;
  boolean hasPhone;
  try {
    if (!cursor.moveToFirst()) {
      return;
    }
    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));
    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));
    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;
  }
  finally {
    cursor.close();
  }
  Bundle bundle=new Bundle();
  if (name != null && name.length() > 0) {
    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));
  }
  if (hasPhone) {
    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);
    if (phonesCursor != null) {
      try {
        int foundPhone=0;
        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);
        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {
          String number=phonesCursor.getString(phonesNumberColumn);
          if (number != null && number.length() > 0) {
            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));
          }
          foundPhone++;
        }
      }
  finally {
        phonesCursor.close();
      }
    }
  }
  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);
  if (methodsCursor != null) {
    try {
      if (methodsCursor.moveToNext()) {
        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));
        if (data != null && data.length() > 0) {
          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));
        }
      }
    }
  finally {
      methodsCursor.close();
    }
  }
  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);
  if (emailCursor != null) {
    try {
      int foundEmail=0;
      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);
      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {
        String email=emailCursor.getString(emailColumn);
        if (email != null && email.length() > 0) {
          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));
        }
        foundEmail++;
      }
    }
  finally {
      emailCursor.close();
    }
  }
  Intent intent=new Intent(Intents.Encode.ACTION);
  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);
  intent.putExtra(Intents.Encode.DATA,bundle);
  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());
  Log.i(TAG,"Sending bundle for encoding: " + bundle);
  startActivity(intent);
}
