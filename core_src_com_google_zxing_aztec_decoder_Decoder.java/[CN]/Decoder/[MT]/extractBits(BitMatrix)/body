{
  boolean[] rawbits;
  if (ddata.isCompact()) {
    if (ddata.getNbLayers() > NB_BITS_COMPACT.length) {
      throw FormatException.getFormatInstance();
    }
    rawbits=new boolean[NB_BITS_COMPACT[ddata.getNbLayers()]];
    numCodewords=NB_DATABLOCK_COMPACT[ddata.getNbLayers()];
  }
 else {
    if (ddata.getNbLayers() > NB_BITS.length) {
      throw FormatException.getFormatInstance();
    }
    rawbits=new boolean[NB_BITS[ddata.getNbLayers()]];
    numCodewords=NB_DATABLOCK[ddata.getNbLayers()];
  }
  int layer=ddata.getNbLayers();
  int size=matrix.height;
  int rawbitsOffset=0;
  int matrixOffset=0;
  while (layer != 0) {
    int flip=0;
    for (int i=0; i < 2 * size - 4; i++) {
      rawbits[rawbitsOffset + i]=matrix.get(matrixOffset + flip,matrixOffset + i / 2);
      rawbits[rawbitsOffset + 2 * size - 4 + i]=matrix.get(matrixOffset + i / 2,matrixOffset + size - 1 - flip);
      flip=(flip + 1) % 2;
    }
    flip=0;
    for (int i=2 * size + 1; i > 5; i--) {
      rawbits[rawbitsOffset + 4 * size - 8 + (2 * size - i) + 1]=matrix.get(matrixOffset + size - 1 - flip,matrixOffset + i / 2 - 1);
      rawbits[rawbitsOffset + 6 * size - 12 + (2 * size - i) + 1]=matrix.get(matrixOffset + i / 2 - 1,matrixOffset + flip);
      flip=(flip + 1) % 2;
    }
    matrixOffset+=2;
    rawbitsOffset+=8 * size - 16;
    layer--;
    size-=4;
  }
  return rawbits;
}
