def Parser(version):
    '\n    Returns an options parser object initialized with the standard\n    SCons options.\n    '
    formatter = SConsIndentedHelpFormatter(max_help_position=30)
    op = SConsOptionParser(option_class=SConsOption, add_help_option=False, formatter=formatter, usage='usage: scons [OPTION] [TARGET] ...')
    op.preserve_unknown_options = True
    op.version = version

    def opt_ignore(option, opt, value, parser):
        sys.stderr.write(('Warning:  ignoring %s option\n' % opt))
    op.add_option('-b', '-d', '-e', '-m', '-S', '-t', '-w', '--environment-overrides', '--no-keep-going', '--no-print-directory', '--print-directory', '--stop', '--touch', action='callback', callback=opt_ignore, help='Ignored for compatibility.')
    op.add_option('-c', '--clean', '--remove', dest='clean', default=False, action='store_true', help='Remove specified targets and dependencies.')
    op.add_option('-C', '--directory', nargs=1, type='string', dest='directory', default=[], action='append', help='Change to DIR before doing anything.', metavar='DIR')
    op.add_option('--cache-debug', nargs=1, dest='cache_debug', default=None, action='store', help='Print CacheDir debug info to FILE.', metavar='FILE')
    op.add_option('--cache-disable', '--no-cache', dest='cache_disable', default=False, action='store_true', help='Do not retrieve built targets from CacheDir.')
    op.add_option('--cache-force', '--cache-populate', dest='cache_force', default=False, action='store_true', help='Copy already-built targets into the CacheDir.')
    op.add_option('--cache-show', dest='cache_show', default=False, action='store_true', help='Print build actions for files from CacheDir.')
    config_options = ['auto', 'force', 'cache']

    def opt_config(option, opt, value, parser, c_options=config_options):
        if (not (value in c_options)):
            raise OptionValueError(('Warning:  %s is not a valid config type' % value))
        setattr(parser.values, option.dest, value)
    opt_config_help = ('Controls Configure subsystem: %s.' % ', '.join(config_options))
    op.add_option('--config', nargs=1, type='string', dest='config', default='auto', action='callback', callback=opt_config, help=opt_config_help, metavar='MODE')
    op.add_option('-D', dest='climb_up', default=None, action='store_const', const=2, help='Search up directory tree for SConstruct,       build all Default() targets.')
    deprecated_debug_options = {'dtree': '; please use --tree=derived instead', 'nomemoizer': ' and has no effect', 'stree': '; please use --tree=all,status instead', 'tree': '; please use --tree=all instead', }
    debug_options = (['count', 'explain', 'findlibs', 'includes', 'memoizer', 'memory', 'objects', 'pdb', 'presub', 'stacktrace', 'time'] + list(deprecated_debug_options.keys()))

    def opt_debug(option, opt, value, parser, debug_options=debug_options, deprecated_debug_options=deprecated_debug_options):
        if (value in debug_options):
            parser.values.debug.append(value)
            if (value in deprecated_debug_options.keys()):
                try:
                    parser.values.delayed_warnings
                except AttributeError:
                    parser.values.delayed_warnings = []
                msg = deprecated_debug_options[value]
                w = ('The --debug=%s option is deprecated%s.' % (value, msg))
                t = (SCons.Warnings.DeprecatedDebugOptionsWarning, w)
                parser.values.delayed_warnings.append(t)
        else:
            raise OptionValueError(('Warning:  %s is not a valid debug type' % value))
    opt_debug_help = ('Print various types of debugging information: %s.' % ', '.join(debug_options))
    op.add_option('--debug', nargs=1, type='string', dest='debug', default=[], action='callback', callback=opt_debug, help=opt_debug_help, metavar='TYPE')

    def opt_diskcheck(option, opt, value, parser):
        try:
            diskcheck_value = diskcheck_convert(value)
        except ValueError as e:
            raise OptionValueError(("Warning: `%s' is not a valid diskcheck type" % e))
        setattr(parser.values, option.dest, diskcheck_value)
    op.add_option('--diskcheck', nargs=1, type='string', dest='diskcheck', default=None, action='callback', callback=opt_diskcheck, help='Enable specific on-disk checks.', metavar='TYPE')

    def opt_duplicate(option, opt, value, parser):
        if (not (value in SCons.Node.FS.Valid_Duplicates)):
            raise OptionValueError(("`%s' is not a valid duplication style." % value))
        setattr(parser.values, option.dest, value)
        SCons.Node.FS.set_duplicate(value)
    opt_duplicate_help = ('Set the preferred duplication methods. Must be one of ' + ', '.join(SCons.Node.FS.Valid_Duplicates))
    op.add_option('--duplicate', nargs=1, type='string', dest='duplicate', default='hard-soft-copy', action='callback', callback=opt_duplicate, help=opt_duplicate_help)
    op.add_option('-f', '--file', '--makefile', '--sconstruct', nargs=1, type='string', dest='file', default=[], action='append', help='Read FILE as the top-level SConstruct file.')
    op.add_option('-h', '--help', dest='help', default=False, action='store_true', help='Print defined help message, or this one.')
    op.add_option('-H', '--help-options', action='help', help='Print this message and exit.')
    op.add_option('-i', '--ignore-errors', dest='ignore_errors', default=False, action='store_true', help='Ignore errors from build actions.')
    op.add_option('-I', '--include-dir', nargs=1, dest='include_dir', default=[], action='append', help='Search DIR for imported Python modules.', metavar='DIR')
    op.add_option('--implicit-cache', dest='implicit_cache', default=False, action='store_true', help='Cache implicit dependencies')

    def opt_implicit_deps(option, opt, value, parser):
        setattr(parser.values, 'implicit_cache', True)
        setattr(parser.values, option.dest, True)
    op.add_option('--implicit-deps-changed', dest='implicit_deps_changed', default=False, action='callback', callback=opt_implicit_deps, help='Ignore cached implicit dependencies.')
    op.add_option('--implicit-deps-unchanged', dest='implicit_deps_unchanged', default=False, action='callback', callback=opt_implicit_deps, help='Ignore changes in implicit dependencies.')
    op.add_option('--interact', '--interactive', dest='interactive', default=False, action='store_true', help='Run in interactive mode.')
    op.add_option('-j', '--jobs', nargs=1, type='int', dest='num_jobs', default=1, action='store', help='Allow N jobs at once.', metavar='N')
    op.add_option('-k', '--keep-going', dest='keep_going', default=False, action='store_true', help="Keep going when a target can't be made.")
    op.add_option('--max-drift', nargs=1, type='int', dest='max_drift', default=SCons.Node.FS.default_max_drift, action='store', help='Set maximum system clock drift to N seconds.', metavar='N')
    op.add_option('--md5-chunksize', nargs=1, type='int', dest='md5_chunksize', default=SCons.Node.FS.File.md5_chunksize, action='store', help='Set chunk-size for MD5 signature computation to N kilobytes.', metavar='N')
    op.add_option('-n', '--no-exec', '--just-print', '--dry-run', '--recon', dest='no_exec', default=False, action='store_true', help="Don't build; just print commands.")
    op.add_option('--no-site-dir', dest='no_site_dir', default=False, action='store_true', help="Don't search or use the usual site_scons dir.")
    op.add_option('--profile', nargs=1, dest='profile_file', default=None, action='store', help='Profile SCons and put results in FILE.', metavar='FILE')
    op.add_option('-q', '--question', dest='question', default=False, action='store_true', help="Don't build; exit status says if up to date.")
    op.add_option('-Q', dest='no_progress', default=False, action='store_true', help='Suppress "Reading/Building" progress messages.')
    op.add_option('--random', dest='random', default=False, action='store_true', help='Build dependencies in random order.')
    op.add_option('-s', '--silent', '--quiet', dest='silent', default=False, action='store_true', help="Don't print commands.")
    op.add_option('--site-dir', nargs=1, dest='site_dir', default=None, action='store', help='Use DIR instead of the usual site_scons dir.', metavar='DIR')
    op.add_option('--stack-size', nargs=1, type='int', dest='stack_size', action='store', help='Set the stack size of the threads used to run jobs to N kilobytes.', metavar='N')
    op.add_option('--taskmastertrace', nargs=1, dest='taskmastertrace_file', default=None, action='store', help='Trace Node evaluation to FILE.', metavar='FILE')
    tree_options = ['all', 'derived', 'prune', 'status']

    def opt_tree(option, opt, value, parser, tree_options=tree_options):
        import Main
        tp = Main.TreePrinter()
        for o in value.split(','):
            if (o == 'all'):
                tp.derived = False
            elif (o == 'derived'):
                tp.derived = True
            elif (o == 'prune'):
                tp.prune = True
            elif (o == 'status'):
                tp.status = True
            else:
                raise OptionValueError(('Warning:  %s is not a valid --tree option' % o))
        parser.values.tree_printers.append(tp)
    opt_tree_help = ('Print a dependency tree in various formats: %s.' % ', '.join(tree_options))
    op.add_option('--tree', nargs=1, type='string', dest='tree_printers', default=[], action='callback', callback=opt_tree, help=opt_tree_help, metavar='OPTIONS')
    op.add_option('-u', '--up', '--search-up', dest='climb_up', default=0, action='store_const', const=1, help='Search up directory tree for SConstruct,       build targets at or below current directory.')
    op.add_option('-U', dest='climb_up', default=0, action='store_const', const=3, help='Search up directory tree for SConstruct,       build Default() targets from local SConscript.')

    def opt_version(option, opt, value, parser):
        sys.stdout.write((parser.version + '\n'))
        sys.exit(0)
    op.add_option('-v', '--version', action='callback', callback=opt_version, help='Print the SCons version number and exit.')

    def opt_warn(option, opt, value, parser, tree_options=tree_options):
        if SCons.Util.is_String(value):
            value = value.split(',')
        parser.values.warn.extend(value)
    op.add_option('--warn', '--warning', nargs=1, type='string', dest='warn', default=[], action='callback', callback=opt_warn, help='Enable or disable warnings.', metavar='WARNING-SPEC')
    op.add_option('-Y', '--repository', '--srcdir', nargs=1, dest='repository', default=[], action='append', help='Search REPOSITORY for source and target files.')

    def opt_not_yet(option, opt, value, parser):
        msg = ('Warning:  the %s option is not yet implemented\n' % opt)
        sys.stderr.write(msg)
    op.add_option('-l', '--load-average', '--max-load', nargs=1, type='int', dest='load_average', default=0, action='callback', callback=opt_not_yet, help=SUPPRESS_HELP)
    op.add_option('--list-actions', dest='list_actions', action='callback', callback=opt_not_yet, help=SUPPRESS_HELP)
    op.add_option('--list-derived', dest='list_derived', action='callback', callback=opt_not_yet, help=SUPPRESS_HELP)
    op.add_option('--list-where', dest='list_where', action='callback', callback=opt_not_yet, help=SUPPRESS_HELP)
    op.add_option('-o', '--old-file', '--assume-old', nargs=1, type='string', dest='old_file', default=[], action='callback', callback=opt_not_yet, help=SUPPRESS_HELP)
    op.add_option('--override', nargs=1, type='string', action='callback', callback=opt_not_yet, dest='override', help=SUPPRESS_HELP)
    op.add_option('-p', action='callback', callback=opt_not_yet, dest='p', help=SUPPRESS_HELP)
    op.add_option('-r', '-R', '--no-builtin-rules', '--no-builtin-variables', action='callback', callback=opt_not_yet, dest='no_builtin_rules', help=SUPPRESS_HELP)
    op.add_option('--write-filenames', nargs=1, type='string', dest='write_filenames', action='callback', callback=opt_not_yet, help=SUPPRESS_HELP)
    op.add_option('-W', '--new-file', '--assume-new', '--what-if', nargs=1, type='string', dest='new_file', action='callback', callback=opt_not_yet, help=SUPPRESS_HELP)
    op.add_option('--warn-undefined-variables', dest='warn_undefined_variables', action='callback', callback=opt_not_yet, help=SUPPRESS_HELP)
    return op
