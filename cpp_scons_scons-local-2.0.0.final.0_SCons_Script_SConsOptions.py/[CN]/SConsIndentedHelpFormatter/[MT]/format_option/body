def format_option(self, option):
    "\n        A copy of the normal optparse.IndentedHelpFormatter.format_option()\n        method.  This has been snarfed so we can modify text wrapping to\n        out liking:\n\n        --  add our own regular expression that doesn't break on hyphens\n            (so things like --no-print-directory don't get broken); \n\n        --  wrap the list of options themselves when it's too long\n            (the wrapper.fill(opts) call below);\n \n        --  set the subsequent_indent when wrapping the help_text.\n        "
    result = []
    try:
        opts = self.option_strings[option]
    except AttributeError:
        opts = option.option_strings
    opt_width = ((self.help_position - self.current_indent) - 2)
    if (len(opts) > opt_width):
        wrapper = textwrap.TextWrapper(width=self.width, initial_indent='  ', subsequent_indent='  ')
        wrapper.wordsep_re = no_hyphen_re
        opts = (wrapper.fill(opts) + '\n')
        indent_first = self.help_position
    else:
        opts = ('%*s%-*s  ' % (self.current_indent, '', opt_width, opts))
        indent_first = 0
    result.append(opts)
    if option.help:
        try:
            expand_default = self.expand_default
        except AttributeError:
            help_text = option.help
        else:
            help_text = expand_default(option)
        wrapper = textwrap.TextWrapper(width=self.help_width, subsequent_indent='  ')
        wrapper.wordsep_re = no_hyphen_re
        help_lines = wrapper.wrap(help_text)
        result.append(('%*s%s\n' % (indent_first, '', help_lines[0])))
        for line in help_lines[1:]:
            result.append(('%*s%s\n' % (self.help_position, '', line)))
    elif (opts[(-1)] != '\n'):
        result.append('\n')
    return ''.join(result)
