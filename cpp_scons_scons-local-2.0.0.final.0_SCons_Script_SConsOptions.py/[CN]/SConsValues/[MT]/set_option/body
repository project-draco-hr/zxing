def set_option(self, name, value):
    '\n        Sets an option from an SConscript file.\n        '
    if (not (name in self.settable)):
        raise SCons.Errors.UserError(('This option is not settable from a SConscript file: %s' % name))
    if (name == 'num_jobs'):
        try:
            value = int(value)
            if (value < 1):
                raise ValueError
        except ValueError:
            raise SCons.Errors.UserError(('A positive integer is required: %s' % repr(value)))
    elif (name == 'max_drift'):
        try:
            value = int(value)
        except ValueError:
            raise SCons.Errors.UserError(('An integer is required: %s' % repr(value)))
    elif (name == 'duplicate'):
        try:
            value = str(value)
        except ValueError:
            raise SCons.Errors.UserError(('A string is required: %s' % repr(value)))
        if (not (value in SCons.Node.FS.Valid_Duplicates)):
            raise SCons.Errors.UserError(('Not a valid duplication style: %s' % value))
        SCons.Node.FS.set_duplicate(value)
    elif (name == 'diskcheck'):
        try:
            value = diskcheck_convert(value)
        except ValueError as v:
            raise SCons.Errors.UserError(('Not a valid diskcheck value: %s' % v))
        if ('diskcheck' not in self.__dict__):
            SCons.Node.FS.set_diskcheck(value)
    elif (name == 'stack_size'):
        try:
            value = int(value)
        except ValueError:
            raise SCons.Errors.UserError(('An integer is required: %s' % repr(value)))
    elif (name == 'md5_chunksize'):
        try:
            value = int(value)
        except ValueError:
            raise SCons.Errors.UserError(('An integer is required: %s' % repr(value)))
    elif (name == 'warn'):
        if SCons.Util.is_String(value):
            value = [value]
        value = (self.__SConscript_settings__.get(name, []) + value)
        SCons.Warnings.process_warn_strings(value)
    self.__SConscript_settings__[name] = value
