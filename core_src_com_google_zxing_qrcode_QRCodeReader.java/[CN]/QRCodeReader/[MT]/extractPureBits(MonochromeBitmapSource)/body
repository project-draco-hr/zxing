{
  int height=image.getHeight();
  int width=image.getWidth();
  int minDimension=Math.min(height,width);
  int borderWidth=0;
  while (borderWidth < minDimension && !image.isBlack(borderWidth,borderWidth)) {
    borderWidth++;
  }
  if (borderWidth == minDimension) {
    throw new ReaderException("No black pixels found along diagonal");
  }
  int moduleEnd=borderWidth;
  while (moduleEnd < minDimension && image.isBlack(moduleEnd,moduleEnd)) {
    moduleEnd++;
  }
  if (moduleEnd == minDimension) {
    throw new ReaderException("No end to black pixels found along diagonal");
  }
  int moduleSize=moduleEnd - borderWidth;
  int rowEndOfSymbol=width - 1;
  while (rowEndOfSymbol >= 0 && !image.isBlack(rowEndOfSymbol,borderWidth)) {
    rowEndOfSymbol--;
  }
  if (rowEndOfSymbol < 0) {
    throw new ReaderException("Can't find end of rightmost black module");
  }
  rowEndOfSymbol++;
  if ((rowEndOfSymbol - borderWidth) % moduleSize != 0) {
    throw new ReaderException("Bad module size / width: " + moduleSize + " / "+ (rowEndOfSymbol - borderWidth));
  }
  int dimension=(rowEndOfSymbol - borderWidth) / moduleSize;
  borderWidth+=moduleSize >> 1;
  int sampleDimension=borderWidth + (dimension - 1) * moduleSize;
  if (sampleDimension >= width || sampleDimension >= height) {
    throw new ReaderException("Estimated pure image size is beyond image boundaries");
  }
  BitMatrix bits=new BitMatrix(dimension);
  for (int i=0; i < dimension; i++) {
    int iOffset=borderWidth + i * moduleSize;
    for (int j=0; j < dimension; j++) {
      if (image.isBlack(borderWidth + j * moduleSize,iOffset)) {
        bits.set(i,j);
      }
    }
  }
  return bits;
}
