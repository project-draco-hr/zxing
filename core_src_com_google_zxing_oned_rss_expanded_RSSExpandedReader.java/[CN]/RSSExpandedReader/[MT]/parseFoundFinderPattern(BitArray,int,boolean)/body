{
  int firstCounter;
  int start;
  int end;
  if (oddPattern) {
    int firstElementStart=this.startEnd[0] - 1;
    while (firstElementStart >= 0 && !row.get(firstElementStart)) {
      firstElementStart--;
    }
    firstElementStart++;
    firstCounter=this.startEnd[0] - firstElementStart;
    start=firstElementStart;
    end=this.startEnd[1];
  }
 else {
    start=this.startEnd[0];
    int firstElementStart=this.startEnd[1] + 1;
    while (row.get(firstElementStart) && firstElementStart < row.size) {
      firstElementStart++;
    }
    end=firstElementStart;
    firstCounter=end - this.startEnd[1];
  }
  int[] counters=this.decodeFinderCounters;
  for (int i=counters.length - 1; i > 0; i--) {
    counters[i]=counters[i - 1];
  }
  counters[0]=firstCounter;
  int value;
  try {
    value=parseFinderValue(counters,FINDER_PATTERNS);
  }
 catch (  NotFoundException nfe) {
    return null;
  }
  return new FinderPattern(value,new int[]{start,end},start,end,rowNumber);
}
