{
  int[] counters=this.getDecodeFinderCounters();
  counters[0]=0;
  counters[1]=0;
  counters[2]=0;
  counters[3]=0;
  int width=row.getSize();
  int rowOffset;
  if (forcedOffset >= 0) {
    rowOffset=forcedOffset;
  }
 else   if (previousPairs.isEmpty()) {
    rowOffset=0;
  }
 else {
    ExpandedPair lastPair=previousPairs.get(previousPairs.size() - 1);
    rowOffset=lastPair.getFinderPattern().getStartEnd()[1];
  }
  boolean searchingEvenPair=previousPairs.size() % 2 != 0;
  boolean isWhite=false;
  while (rowOffset < width) {
    isWhite=!row.get(rowOffset);
    if (!isWhite) {
      break;
    }
    rowOffset++;
  }
  int counterPosition=0;
  int patternStart=rowOffset;
  for (int x=rowOffset; x < width; x++) {
    if (row.get(x) ^ isWhite) {
      counters[counterPosition]++;
    }
 else {
      if (counterPosition == 3) {
        if (searchingEvenPair) {
          reverseCounters(counters);
        }
        if (isFinderPattern(counters)) {
          this.startEnd[0]=patternStart;
          this.startEnd[1]=x;
          return;
        }
        if (searchingEvenPair) {
          reverseCounters(counters);
        }
        patternStart+=counters[0] + counters[1];
        counters[0]=counters[2];
        counters[1]=counters[3];
        counters[2]=0;
        counters[3]=0;
        counterPosition--;
      }
 else {
        counterPosition++;
      }
      counters[counterPosition]=1;
      isWhite=!isWhite;
    }
  }
  throw NotFoundException.getNotFoundInstance();
}
