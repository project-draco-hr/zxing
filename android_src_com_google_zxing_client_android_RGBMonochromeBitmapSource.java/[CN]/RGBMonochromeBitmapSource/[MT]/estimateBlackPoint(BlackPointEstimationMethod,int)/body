{
  if (!method.equals(lastMethod) || argument != lastArgument) {
    int width=image.width();
    int height=image.height();
    int[] histogram=new int[LUMINANCE_BUCKETS];
    float biasTowardsWhite=1.0f;
    if (method.equals(BlackPointEstimationMethod.TWO_D_SAMPLING)) {
      int minDimension=width < height ? width : height;
      int startI=height == minDimension ? 0 : (height - width) >> 1;
      int startJ=width == minDimension ? 0 : (width - height) >> 1;
      for (int n=0; n < minDimension; n++) {
        int pixel=image.getPixel(startJ + n,startI + n);
        histogram[computeRGBLuminance(pixel) >> LUMINANCE_SHIFT]++;
      }
    }
 else     if (method.equals(BlackPointEstimationMethod.ROW_SAMPLING)) {
      if (argument < 0 || argument >= height) {
        throw new IllegalArgumentException("Row is not within the image: " + argument);
      }
      biasTowardsWhite=2.0f;
      int[] pixelRow=new int[width];
      image.getPixels(pixelRow,0,width,0,argument,width,1);
      for (int x=0; x < width; x++) {
        histogram[computeRGBLuminance(pixelRow[x]) >> LUMINANCE_SHIFT]++;
      }
    }
 else {
      throw new IllegalArgumentException("Unknown method: " + method);
    }
    blackPoint=BlackPointEstimator.estimate(histogram,biasTowardsWhite) << LUMINANCE_SHIFT;
    lastMethod=method;
    lastArgument=argument;
  }
}
