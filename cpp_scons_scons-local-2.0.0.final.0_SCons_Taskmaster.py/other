__doc__ = '\nGeneric Taskmaster module for the SCons build engine.\n\nThis module contains the primary interface(s) between a wrapping user\ninterface and the SCons build engine.  There are two key classes here:\n\n    Taskmaster\n        This is the main engine for walking the dependency graph and\n        calling things to decide what does or doesn\'t need to be built.\n\n    Task\n        This is the base class for allowing a wrapping interface to\n        decide what does or doesn\'t actually need to be done.  The\n        intention is for a wrapping interface to subclass this as\n        appropriate for different types of behavior it may need.\n\n        The canonical example is the SCons native Python interface,\n        which has Task subclasses that handle its specific behavior,\n        like printing "`foo\' is up to date" when a top-level target\n        doesn\'t need to be built, and handling the -c option by removing\n        targets as its "build" action.  There is also a separate subclass\n        for suppressing this output when the -q option is used.\n\n        The Taskmaster instantiates a Task object for each (set of)\n        target(s) that it decides need to be evaluated and/or built.\n'
__revision__ = 'src/engine/SCons/Taskmaster.py 5023 2010/06/14 22:05:46 scons'
from itertools import chain
import operator
import sys
import traceback
import SCons.Errors
import SCons.Node
import SCons.Warnings
StateString = SCons.Node.StateString
NODE_NO_STATE = SCons.Node.no_state
NODE_PENDING = SCons.Node.pending
NODE_EXECUTING = SCons.Node.executing
NODE_UP_TO_DATE = SCons.Node.up_to_date
NODE_EXECUTED = SCons.Node.executed
NODE_FAILED = SCons.Node.failed
CollectStats = None
StatsNodes = []
fmt = '%(considered)3d %(already_handled)3d %(problem)3d %(child_failed)3d %(not_built)3d %(side_effects)3d %(build)3d '
