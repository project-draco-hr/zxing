{
  int numBuckets=buckets.length;
  int maxBucketCount=0;
  int firstPeak=0;
  int firstPeakSize=0;
  for (int i=0; i < numBuckets; i++) {
    if (buckets[i] > firstPeakSize) {
      firstPeak=i;
      firstPeakSize=buckets[i];
    }
    if (buckets[i] > maxBucketCount) {
      maxBucketCount=buckets[i];
    }
  }
  int secondPeak=0;
  int secondPeakScore=0;
  for (int i=0; i < numBuckets; i++) {
    int distanceToBiggest=i - firstPeak;
    int score=buckets[i] * distanceToBiggest * distanceToBiggest;
    if (score > secondPeakScore) {
      secondPeak=i;
      secondPeakScore=score;
    }
  }
  if (firstPeak > secondPeak) {
    int temp=firstPeak;
    firstPeak=secondPeak;
    secondPeak=temp;
  }
  if (secondPeak - firstPeak <= numBuckets >> 4) {
    throw ReaderException.getInstance();
  }
  int bestValley=secondPeak - 1;
  int bestValleyScore=-1;
  for (int i=secondPeak - 1; i > firstPeak; i--) {
    int fromFirst=i - firstPeak;
    int score=fromFirst * fromFirst * (secondPeak - i)* (maxBucketCount - buckets[i]);
    if (score > bestValleyScore) {
      bestValley=i;
      bestValleyScore=score;
    }
  }
  return bestValley << LUMINANCE_SHIFT;
}
