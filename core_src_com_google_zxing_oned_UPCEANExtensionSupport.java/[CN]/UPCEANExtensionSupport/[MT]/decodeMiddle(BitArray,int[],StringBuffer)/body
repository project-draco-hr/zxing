{
  int[] counters=decodeMiddleCounters;
  counters[0]=0;
  counters[1]=0;
  counters[2]=0;
  counters[3]=0;
  int[] separatorCounters=this.separatorCounters;
  separatorCounters[0]=0;
  separatorCounters[1]=0;
  int end=row.getSize();
  int rowOffset=startRange[1];
  int lgPatternFound=0;
  for (int x=0; x < 5 && rowOffset < end; x++) {
    int bestMatch=UPCEANReader.decodeDigit(row,counters,rowOffset,UPCEANReader.L_AND_G_PATTERNS);
    resultString.append((char)('0' + bestMatch % 10));
    for (int i=0; i < counters.length; i++) {
      rowOffset+=counters[i];
    }
    if (bestMatch >= 10) {
      lgPatternFound|=1 << (4 - x);
    }
    while (rowOffset < end && !row.get(rowOffset)) {
      rowOffset++;
    }
    while (rowOffset < end && row.get(rowOffset)) {
      rowOffset++;
    }
  }
  if (resultString.length() != 5) {
    throw NotFoundException.getNotFoundInstance();
  }
  int checkDigit=determineCheckDigit(lgPatternFound);
  if (extensionChecksum(resultString.toString()) != checkDigit) {
    throw NotFoundException.getNotFoundInstance();
  }
  return rowOffset;
}
