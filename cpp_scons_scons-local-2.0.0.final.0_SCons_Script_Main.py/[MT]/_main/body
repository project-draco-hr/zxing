def _main(parser):
    global exit_status
    global this_build_status
    options = parser.values
    default_warnings = [SCons.Warnings.WarningOnByDefault, SCons.Warnings.DeprecatedWarning]
    for warning in default_warnings:
        SCons.Warnings.enableWarningClass(warning)
    SCons.Warnings._warningOut = _scons_internal_warning
    SCons.Warnings.process_warn_strings(options.warn)
    try:
        dw = options.delayed_warnings
    except AttributeError:
        pass
    else:
        delayed_warnings.extend(dw)
    for (warning_type, message) in delayed_warnings:
        SCons.Warnings.warn(warning_type, message)
    if options.diskcheck:
        SCons.Node.FS.set_diskcheck(options.diskcheck)
    if options.directory:
        script_dir = os.path.abspath(_create_path(options.directory))
    else:
        script_dir = os.getcwd()
    target_top = None
    if options.climb_up:
        target_top = '.'
        while (script_dir and (not _SConstruct_exists(script_dir, options.repository, options.file))):
            (script_dir, last_part) = os.path.split(script_dir)
            if last_part:
                target_top = os.path.join(last_part, target_top)
            else:
                script_dir = ''
    if (script_dir and (script_dir != os.getcwd())):
        display(("scons: Entering directory `%s'" % script_dir))
        try:
            os.chdir(script_dir)
        except OSError:
            sys.stderr.write(('Could not change directory to %s\n' % script_dir))
    fs = SCons.Node.FS.get_default_fs()
    for rep in options.repository:
        fs.Repository(rep)
    scripts = []
    if options.file:
        scripts.extend(options.file)
    if (not scripts):
        sfile = _SConstruct_exists(repositories=options.repository, filelist=options.file)
        if sfile:
            scripts.append(sfile)
    if (not scripts):
        if options.help:
            raise SConsPrintHelpException
        raise SCons.Errors.UserError('No SConstruct file found.')
    if (scripts[0] == '-'):
        d = fs.getcwd()
    else:
        d = fs.File(scripts[0]).dir
    fs.set_SConstruct_dir(d)
    _set_debug_values(options)
    SCons.Node.implicit_cache = options.implicit_cache
    SCons.Node.implicit_deps_changed = options.implicit_deps_changed
    SCons.Node.implicit_deps_unchanged = options.implicit_deps_unchanged
    if options.no_exec:
        SCons.SConf.dryrun = 1
        SCons.Action.execute_actions = None
    if options.question:
        SCons.SConf.dryrun = 1
    if options.clean:
        SCons.SConf.SetBuildType('clean')
    if options.help:
        SCons.SConf.SetBuildType('help')
    SCons.SConf.SetCacheMode(options.config)
    SCons.SConf.SetProgressDisplay(progress_display)
    if (options.no_progress or options.silent):
        progress_display.set_mode(0)
    if options.site_dir:
        _load_site_scons_dir(d, options.site_dir)
    elif (not options.no_site_dir):
        _load_site_scons_dir(d)
    if options.include_dir:
        sys.path = (options.include_dir + sys.path)
    targets = []
    xmit_args = []
    for a in parser.largs:
        if (a[:1] == '-'):
            continue
        if ('=' in a):
            xmit_args.append(a)
        else:
            targets.append(a)
    SCons.Script._Add_Targets((targets + parser.rargs))
    SCons.Script._Add_Arguments(xmit_args)
    if ((not hasattr(sys.stdout, 'isatty')) or (not sys.stdout.isatty())):
        sys.stdout = SCons.Util.Unbuffered(sys.stdout)
    if ((not hasattr(sys.stderr, 'isatty')) or (not sys.stderr.isatty())):
        sys.stderr = SCons.Util.Unbuffered(sys.stderr)
    memory_stats.append('before reading SConscript files:')
    count_stats.append(('pre-', 'read'))
    progress_display('scons: Reading SConscript files ...')
    start_time = time.time()
    try:
        for script in scripts:
            SCons.Script._SConscript._SConscript(fs, script)
    except SCons.Errors.StopError as e:
        sys.stderr.write(('scons: *** %s  Stop.\n' % e))
        exit_status = 2
        sys.exit(exit_status)
    global sconscript_time
    sconscript_time = (time.time() - start_time)
    progress_display('scons: done reading SConscript files.')
    memory_stats.append('after reading SConscript files:')
    count_stats.append(('post-', 'read'))
    SCons.Warnings.process_warn_strings(options.warn)
    if python_version_deprecated():
        msg = ('Support for pre-2.4 Python (%s) is deprecated.\n' + '    If this will cause hardship, contact dev@scons.tigris.org.')
        SCons.Warnings.warn(SCons.Warnings.PythonVersionWarning, (msg % python_version_string()))
    if (not options.help):
        SCons.SConf.CreateConfigHBuilder(SCons.Defaults.DefaultEnvironment())
    parser.preserve_unknown_options = False
    parser.parse_args(parser.largs, options)
    if options.help:
        help_text = SCons.Script.help_text
        if (help_text is None):
            raise SConsPrintHelpException
        else:
            print help_text
            print 'Use scons -H for help about command-line options.'
        exit_status = 0
        return
    fs.chdir(fs.Top)
    SCons.Node.FS.save_strings(1)
    SCons.Node.implicit_cache = options.implicit_cache
    SCons.Node.FS.set_duplicate(options.duplicate)
    fs.set_max_drift(options.max_drift)
    SCons.Job.explicit_stack_size = options.stack_size
    if options.md5_chunksize:
        SCons.Node.FS.File.md5_chunksize = options.md5_chunksize
    platform = SCons.Platform.platform_module()
    if options.interactive:
        SCons.Script.Interactive.interact(fs, OptionsParser, options, targets, target_top)
    else:
        nodes = _build_targets(fs, options, targets, target_top)
        if (not nodes):
            exit_status = 2
