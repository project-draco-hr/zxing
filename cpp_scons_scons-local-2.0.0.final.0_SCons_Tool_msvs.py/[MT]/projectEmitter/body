def projectEmitter(target, source, env):
    'Sets up the DSP dependencies.'
    if (source[0] == target[0]):
        source = []
    (base, suff) = SCons.Util.splitext(str(target[0]))
    suff = env.subst('$MSVSPROJECTSUFFIX')
    target[0] = (base + suff)
    if (not source):
        source = 'prj_inputs:'
        source = (source + env.subst('$MSVSSCONSCOM', 1))
        source = (source + env.subst('$MSVSENCODING', 1))
        if (('buildtarget' in env) and (env['buildtarget'] != None)):
            if SCons.Util.is_String(env['buildtarget']):
                source = (source + (' "%s"' % env['buildtarget']))
            elif SCons.Util.is_List(env['buildtarget']):
                for bt in env['buildtarget']:
                    if SCons.Util.is_String(bt):
                        source = (source + (' "%s"' % bt))
                    else:
                        try:
                            source = (source + (' "%s"' % bt.get_abspath()))
                        except AttributeError:
                            raise SCons.Errors.InternalError('buildtarget can be a string, a node, a list of strings or nodes, or None')
            else:
                try:
                    source = (source + (' "%s"' % env['buildtarget'].get_abspath()))
                except AttributeError:
                    raise SCons.Errors.InternalError('buildtarget can be a string, a node, a list of strings or nodes, or None')
        if (('outdir' in env) and (env['outdir'] != None)):
            if SCons.Util.is_String(env['outdir']):
                source = (source + (' "%s"' % env['outdir']))
            elif SCons.Util.is_List(env['outdir']):
                for s in env['outdir']:
                    if SCons.Util.is_String(s):
                        source = (source + (' "%s"' % s))
                    else:
                        try:
                            source = (source + (' "%s"' % s.get_abspath()))
                        except AttributeError:
                            raise SCons.Errors.InternalError('outdir can be a string, a node, a list of strings or nodes, or None')
            else:
                try:
                    source = (source + (' "%s"' % env['outdir'].get_abspath()))
                except AttributeError:
                    raise SCons.Errors.InternalError('outdir can be a string, a node, a list of strings or nodes, or None')
        if ('name' in env):
            if SCons.Util.is_String(env['name']):
                source = (source + (' "%s"' % env['name']))
            else:
                raise SCons.Errors.InternalError('name must be a string')
        if ('variant' in env):
            if SCons.Util.is_String(env['variant']):
                source = (source + (' "%s"' % env['variant']))
            elif SCons.Util.is_List(env['variant']):
                for variant in env['variant']:
                    if SCons.Util.is_String(variant):
                        source = (source + (' "%s"' % variant))
                    else:
                        raise SCons.Errors.InternalError('name must be a string or a list of strings')
            else:
                raise SCons.Errors.InternalError('variant must be a string or a list of strings')
        else:
            raise SCons.Errors.InternalError('variant must be specified')
        for s in _DSPGenerator.srcargs:
            if (s in env):
                if SCons.Util.is_String(env[s]):
                    source = (source + (' "%s' % env[s]))
                elif SCons.Util.is_List(env[s]):
                    for t in env[s]:
                        if SCons.Util.is_String(t):
                            source = (source + (' "%s"' % t))
                        else:
                            raise SCons.Errors.InternalError((s + ' must be a string or a list of strings'))
                else:
                    raise SCons.Errors.InternalError((s + ' must be a string or a list of strings'))
        source = (source + (' "%s"' % str(target[0])))
        source = [SCons.Node.Python.Value(source)]
    targetlist = [target[0]]
    sourcelist = source
    if env.get('auto_build_solution', 1):
        env['projects'] = targetlist
        (t, s) = solutionEmitter(target, target, env)
        targetlist = (targetlist + t)
    return (targetlist, sourcelist)
