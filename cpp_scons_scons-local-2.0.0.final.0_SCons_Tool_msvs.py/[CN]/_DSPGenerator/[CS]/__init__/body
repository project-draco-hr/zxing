def __init__(self, dspfile, source, env):
    self.dspfile = str(dspfile)
    try:
        get_abspath = dspfile.get_abspath
    except AttributeError:
        self.dspabs = os.path.abspath(dspfile)
    else:
        self.dspabs = get_abspath()
    if ('variant' not in env):
        raise SCons.Errors.InternalError(("You must specify a 'variant' argument (i.e. 'Debug' or " + "'Release') to create an MSVSProject."))
    elif SCons.Util.is_String(env['variant']):
        variants = [env['variant']]
    elif SCons.Util.is_List(env['variant']):
        variants = env['variant']
    if (('buildtarget' not in env) or (env['buildtarget'] == None)):
        buildtarget = ['']
    elif SCons.Util.is_String(env['buildtarget']):
        buildtarget = [env['buildtarget']]
    elif SCons.Util.is_List(env['buildtarget']):
        if (len(env['buildtarget']) != len(variants)):
            raise SCons.Errors.InternalError("Sizes of 'buildtarget' and 'variant' lists must be the same.")
        buildtarget = []
        for bt in env['buildtarget']:
            if SCons.Util.is_String(bt):
                buildtarget.append(bt)
            else:
                buildtarget.append(bt.get_abspath())
    else:
        buildtarget = [env['buildtarget'].get_abspath()]
    if (len(buildtarget) == 1):
        bt = buildtarget[0]
        buildtarget = []
        for _ in variants:
            buildtarget.append(bt)
    if (('outdir' not in env) or (env['outdir'] == None)):
        outdir = ['']
    elif SCons.Util.is_String(env['outdir']):
        outdir = [env['outdir']]
    elif SCons.Util.is_List(env['outdir']):
        if (len(env['outdir']) != len(variants)):
            raise SCons.Errors.InternalError("Sizes of 'outdir' and 'variant' lists must be the same.")
        outdir = []
        for s in env['outdir']:
            if SCons.Util.is_String(s):
                outdir.append(s)
            else:
                outdir.append(s.get_abspath())
    else:
        outdir = [env['outdir'].get_abspath()]
    if (len(outdir) == 1):
        s = outdir[0]
        outdir = []
        for v in variants:
            outdir.append(s)
    if (('runfile' not in env) or (env['runfile'] == None)):
        runfile = buildtarget[(-1):]
    elif SCons.Util.is_String(env['runfile']):
        runfile = [env['runfile']]
    elif SCons.Util.is_List(env['runfile']):
        if (len(env['runfile']) != len(variants)):
            raise SCons.Errors.InternalError("Sizes of 'runfile' and 'variant' lists must be the same.")
        runfile = []
        for s in env['runfile']:
            if SCons.Util.is_String(s):
                runfile.append(s)
            else:
                runfile.append(s.get_abspath())
    else:
        runfile = [env['runfile'].get_abspath()]
    if (len(runfile) == 1):
        s = runfile[0]
        runfile = []
        for v in variants:
            runfile.append(s)
    self.sconscript = env['MSVSSCONSCRIPT']
    cmdargs = env.get('cmdargs', '')
    self.env = env
    if ('name' in self.env):
        self.name = self.env['name']
    else:
        self.name = os.path.basename(SCons.Util.splitext(self.dspfile)[0])
    self.name = self.env.subst(self.name)
    sourcenames = ['Source Files', 'Header Files', 'Local Headers', 'Resource Files', 'Other Files']
    self.sources = {}
    for n in sourcenames:
        self.sources[n] = []
    self.configs = {}
    self.nokeep = 0
    if (('nokeep' in env) and (env['variant'] != 0)):
        self.nokeep = 1
    if ((self.nokeep == 0) and os.path.exists(self.dspabs)):
        self.Parse()
    for t in zip(sourcenames, self.srcargs):
        if (t[1] in self.env):
            if SCons.Util.is_List(self.env[t[1]]):
                for i in self.env[t[1]]:
                    if (not (i in self.sources[t[0]])):
                        self.sources[t[0]].append(i)
            elif (not (self.env[t[1]] in self.sources[t[0]])):
                self.sources[t[0]].append(self.env[t[1]])
    for n in sourcenames:
        self.sources[n] = sorted(self.sources[n], key=(lambda a: a.lower()))

    def AddConfig(self, variant, buildtarget, outdir, runfile, cmdargs, dspfile=dspfile):
        config = Config()
        config.buildtarget = buildtarget
        config.outdir = outdir
        config.cmdargs = cmdargs
        config.runfile = runfile
        match = re.match('(.*)\\|(.*)', variant)
        if match:
            config.variant = match.group(1)
            config.platform = match.group(2)
        else:
            config.variant = variant
            config.platform = 'Win32'
        self.configs[variant] = config
        print (((((((("Adding '" + self.name) + ' - ') + config.variant) + '|') + config.platform) + "' to '") + str(dspfile)) + "'")
    for i in range(len(variants)):
        AddConfig(self, variants[i], buildtarget[i], outdir[i], runfile[i], cmdargs)
    self.platforms = []
    for key in self.configs.keys():
        platform = self.configs[key].platform
        if (not (platform in self.platforms)):
            self.platforms.append(platform)
