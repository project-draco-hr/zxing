{
  List<Result> results=new ArrayList<>();
  DetectorResult[] detectorResults=new MultiDetector(image.getBlackMatrix()).detectMulti(hints);
  for (  DetectorResult detectorResult : detectorResults) {
    try {
      DecoderResult decoderResult=getDecoder().decode(detectorResult.getBits(),hints);
      ResultPoint[] points=detectorResult.getPoints();
      if (decoderResult.getOther() instanceof QRCodeDecoderMetaData) {
        ((QRCodeDecoderMetaData)decoderResult.getOther()).applyMirroredCorrection(points);
      }
      Result result=new Result(decoderResult.getText(),decoderResult.getRawBytes(),points,BarcodeFormat.QR_CODE);
      List<byte[]> byteSegments=decoderResult.getByteSegments();
      if (byteSegments != null) {
        result.putMetadata(ResultMetadataType.BYTE_SEGMENTS,byteSegments);
      }
      String ecLevel=decoderResult.getECLevel();
      if (ecLevel != null) {
        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL,ecLevel);
      }
      if (decoderResult.hasStructuredAppend()) {
        result.putMetadata(ResultMetadataType.STRUCTURED_APPEND_SEQUENCE,decoderResult.getStructuredAppendSequenceNumber());
        result.putMetadata(ResultMetadataType.STRUCTURED_APPEND_PARITY,decoderResult.getStructuredAppendParity());
      }
      results.add(result);
    }
 catch (    ReaderException re) {
    }
  }
  if (results.isEmpty()) {
    return EMPTY_RESULT_ARRAY;
  }
 else {
    results=processStructuredAppend(results);
    return results.toArray(new Result[results.size()]);
  }
}
