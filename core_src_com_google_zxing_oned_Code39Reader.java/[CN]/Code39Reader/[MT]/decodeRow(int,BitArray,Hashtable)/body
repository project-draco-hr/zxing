{
  int[] start=findAsteriskPattern(row);
  int nextStart=start[1];
  int end=row.getSize();
  while (nextStart < end && !row.get(nextStart)) {
    nextStart++;
  }
  StringBuffer result=new StringBuffer();
  int[] counters=new int[9];
  char decodedChar;
  int lastStart;
  do {
    recordPattern(row,nextStart,counters);
    int pattern=toNarrowWidePattern(counters);
    decodedChar=patternToChar(pattern);
    result.append(decodedChar);
    lastStart=nextStart;
    for (int i=0; i < counters.length; i++) {
      nextStart+=counters[i];
    }
    while (nextStart < end && !row.get(nextStart)) {
      nextStart++;
    }
  }
 while (decodedChar != '*');
  result.deleteCharAt(result.length() - 1);
  if (usingCheckDigit) {
    int max=result.length() - 1;
    int total=0;
    for (int i=0; i < max; i++) {
      total+=ALPHABET_STRING.indexOf(result.charAt(i));
    }
    if (total % 43 != ALPHABET_STRING.indexOf(result.charAt(max))) {
      throw new ReaderException("Checksum failed");
    }
    result.deleteCharAt(max);
  }
  String resultString=result.toString();
  if (extendedMode) {
    resultString=decodeExtended(resultString);
  }
  return new Result(resultString,new ResultPoint[]{new GenericResultPoint((float)(start[1] - start[0]) / 2.0f,(float)rowNumber),new GenericResultPoint((float)(nextStart - lastStart) / 2.0f,(float)rowNumber)},BarcodeFormat.CODE_39);
}
