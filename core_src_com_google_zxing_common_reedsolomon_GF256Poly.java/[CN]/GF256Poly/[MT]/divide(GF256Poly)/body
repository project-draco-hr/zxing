{
  if (!field.equals(other.field)) {
    throw new IllegalArgumentException("GF256Polys do not have same GF256 field");
  }
  if (other.isZero()) {
    throw new IllegalArgumentException("Divide by 0");
  }
  GF256Poly quotient=field.getZero();
  GF256Poly remainder=this;
  int denominatorLeadingTerm=other.getCoefficient(other.getDegree());
  int inverseDenominatorLeadingTerm=field.inverse(denominatorLeadingTerm);
  while (remainder.getDegree() >= other.getDegree() && !remainder.isZero()) {
    int degreeDifference=remainder.getDegree() - other.getDegree();
    int scale=field.multiply(remainder.getCoefficient(remainder.getDegree()),inverseDenominatorLeadingTerm);
    GF256Poly term=other.multiplyByMonomial(degreeDifference,scale);
    GF256Poly iterationQuotient=field.buildMonomial(degreeDifference,scale);
    quotient=quotient.addOrSubtract(iterationQuotient);
    remainder=remainder.addOrSubtract(term);
  }
  return new GF256Poly[]{quotient,remainder};
}
