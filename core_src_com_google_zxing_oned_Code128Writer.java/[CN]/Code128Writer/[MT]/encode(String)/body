{
  int length=contents.length();
  if (length > 80) {
    throw new IllegalArgumentException("Requested contents should be less than 80 digits long, but got " + length);
  }
  boolean useCodeC=true;
  for (int i=0; i < length; i++) {
    char c=contents.charAt(i);
    if (c < '0' || c > '9') {
      useCodeC=false;
      break;
    }
  }
  int codeWidth=11 + 11 + 13;
  byte[] result;
  int pos;
  int check;
  if (useCodeC) {
    if (length % 2 != 0) {
      contents='0' + contents;
      length++;
    }
    for (int i=0; i < length; i+=2) {
      int[] patterns=Code128Reader.CODE_PATTERNS[Integer.parseInt(contents.substring(i,i + 2))];
      for (int j=0; j < patterns.length; j++) {
        codeWidth+=patterns[j];
      }
    }
    result=new byte[codeWidth];
    pos=appendPattern(result,0,Code128Reader.CODE_PATTERNS[105],1);
    check=105;
    for (int i=0; i < length; i+=2) {
      int pair=Integer.parseInt(contents.substring(i,i + 2));
      check+=pair * (i / 2 + 1);
      pos+=appendPattern(result,pos,Code128Reader.CODE_PATTERNS[pair],1);
    }
  }
 else {
    for (int i=0; i < length; i++) {
      int[] patterns=Code128Reader.CODE_PATTERNS[contents.charAt(i) - ' '];
      for (int j=0; j < patterns.length; j++) {
        codeWidth+=patterns[j];
      }
    }
    result=new byte[codeWidth];
    pos=appendPattern(result,0,Code128Reader.CODE_PATTERNS[104],1);
    check=104;
    for (int i=0; i < length; i++) {
      check+=(contents.charAt(i) - ' ') * (i + 1);
      pos+=appendPattern(result,pos,Code128Reader.CODE_PATTERNS[contents.charAt(i) - ' '],1);
    }
  }
  check%=103;
  pos+=appendPattern(result,pos,Code128Reader.CODE_PATTERNS[check],1);
  pos+=appendPattern(result,pos,Code128Reader.CODE_PATTERNS[106],1);
  return result;
}
