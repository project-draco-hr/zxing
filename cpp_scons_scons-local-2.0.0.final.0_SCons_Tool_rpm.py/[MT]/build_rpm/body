def build_rpm(target, source, env):
    tmpdir = os.path.join(os.path.dirname(target[0].abspath), 'rpmtemp')
    if os.path.exists(tmpdir):
        shutil.rmtree(tmpdir)
    for d in ['RPMS', 'SRPMS', 'SPECS', 'BUILD']:
        os.makedirs(os.path.join(tmpdir, d))
    env.Prepend(RPMFLAGS=("--define '_topdir %s'" % tmpdir))
    handle = subprocess.Popen(get_cmd(source, env), stdout=subprocess.PIPE, stderr=subprocess.STDOUT, shell=True)
    output = handle.stdout.read()
    status = handle.wait()
    if status:
        raise SCons.Errors.BuildError(node=target[0], errstr=output, filename=str(target[0]))
    else:
        output_files = re.compile('Wrote: (.*)').findall(output)
        for (output, input) in zip(output_files, target):
            rpm_output = os.path.basename(output)
            expected = os.path.basename(input.get_path())
            assert (expected == rpm_output), ('got %s but expected %s' % (rpm_output, expected))
            shutil.copy(output, input.abspath)
    shutil.rmtree(tmpdir)
    return status
