{
  int[] counters=decodeMiddleCounters;
  counters[0]=0;
  counters[1]=0;
  counters[2]=0;
  counters[3]=0;
  int end=row.getSize();
  int rowOffset=startRange[1];
  for (int x=0; x < 4 && rowOffset < end; x++) {
    int bestMatch=decodeDigit(row,counters,rowOffset,L_PATTERNS);
    result.append((char)('0' + bestMatch));
    for (    int counter : counters) {
      rowOffset+=counter;
    }
  }
  int[] middleRange=findGuardPattern(row,rowOffset,true,MIDDLE_PATTERN);
  rowOffset=middleRange[1];
  for (int x=0; x < 4 && rowOffset < end; x++) {
    int bestMatch=decodeDigit(row,counters,rowOffset,L_PATTERNS);
    result.append((char)('0' + bestMatch));
    for (    int counter : counters) {
      rowOffset+=counter;
    }
  }
  return rowOffset;
}
