{
  int left=(width - INIT_SIZE) / 2;
  int right=(width + INIT_SIZE) / 2;
  int up=(height - INIT_SIZE) / 2;
  int down=(height + INIT_SIZE) / 2;
  boolean sizeExceeded=false;
  boolean aBlackPointFoundOnBorder=true;
  boolean atLeastOneBlackPointFoundOnBorder=false;
  while (aBlackPointFoundOnBorder) {
    aBlackPointFoundOnBorder=false;
    boolean rightBorderNotWhite=true;
    while (rightBorderNotWhite && right < width) {
      rightBorderNotWhite=containsBlackPoint(up,down,right,false);
      if (rightBorderNotWhite) {
        right++;
        aBlackPointFoundOnBorder=true;
      }
    }
    boolean bottomBorderNotWhite=true;
    while (bottomBorderNotWhite && down < height) {
      bottomBorderNotWhite=containsBlackPoint(left,right,down,true);
      if (bottomBorderNotWhite) {
        down++;
        aBlackPointFoundOnBorder=true;
      }
    }
    boolean leftBorderNotWhite=true;
    while (leftBorderNotWhite && left >= 0) {
      leftBorderNotWhite=containsBlackPoint(up,down,left,false);
      if (leftBorderNotWhite) {
        left--;
        aBlackPointFoundOnBorder=true;
      }
    }
    boolean topBorderNotWhite=true;
    while (topBorderNotWhite && up >= 0) {
      topBorderNotWhite=containsBlackPoint(left,right,up,true);
      if (topBorderNotWhite) {
        up--;
        aBlackPointFoundOnBorder=true;
      }
    }
    if (right >= width || down >= height || up < 0 || left < 0) {
      sizeExceeded=true;
      break;
    }
    if (aBlackPointFoundOnBorder) {
      atLeastOneBlackPointFoundOnBorder=true;
    }
  }
  if (!sizeExceeded && atLeastOneBlackPointFoundOnBorder) {
    ResultPoint x=null, y=null, z=null, t=null;
    final int max_size=right - left;
    for (int i=1; i < max_size; i++) {
      ResultPoint a=new ResultPoint(left,down - i);
      ResultPoint b=new ResultPoint(left + i,down);
      z=getBlackPointOnSegment(a,b);
      if (z != null) {
        break;
      }
    }
    if (z == null) {
      throw NotFoundException.getNotFoundInstance();
    }
    for (int i=1; i < max_size; i++) {
      ResultPoint a=new ResultPoint(left,up + i);
      ResultPoint b=new ResultPoint(left + i,up);
      t=getBlackPointOnSegment(a,b);
      if (t != null) {
        break;
      }
    }
    if (t == null) {
      throw NotFoundException.getNotFoundInstance();
    }
    for (int i=1; i < max_size; i++) {
      ResultPoint a=new ResultPoint(right,up + i);
      ResultPoint b=new ResultPoint(right - i,up);
      x=getBlackPointOnSegment(a,b);
      if (x != null) {
        break;
      }
    }
    if (x == null) {
      throw NotFoundException.getNotFoundInstance();
    }
    for (int i=1; i < max_size; i++) {
      ResultPoint a=new ResultPoint(right,down - i);
      ResultPoint b=new ResultPoint(right - i,down);
      y=getBlackPointOnSegment(a,b);
      if (y != null) {
        break;
      }
    }
    if (y == null) {
      throw NotFoundException.getNotFoundInstance();
    }
    return centerEdges(y,z,x,t);
  }
 else {
    throw NotFoundException.getNotFoundInstance();
  }
}
