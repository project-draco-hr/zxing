{
  if (contents.isEmpty()) {
    throw new IllegalArgumentException("Found empty contents");
  }
  if (format != BarcodeFormat.DATA_MATRIX) {
    throw new IllegalArgumentException("Can only encode DATA_MATRIX, but got " + format);
  }
  if (width < 0 || height < 0) {
    throw new IllegalArgumentException("Requested dimensions are too small: " + width + 'x'+ height);
  }
  SymbolShapeHint shape=SymbolShapeHint.FORCE_NONE;
  Dimension minSize=null;
  Dimension maxSize=null;
  if (hints != null) {
    SymbolShapeHint requestedShape=(SymbolShapeHint)hints.get(EncodeHintType.DATA_MATRIX_SHAPE);
    if (requestedShape != null) {
      shape=requestedShape;
    }
    @SuppressWarnings("deprecation") Dimension requestedMinSize=(Dimension)hints.get(EncodeHintType.MIN_SIZE);
    if (requestedMinSize != null) {
      minSize=requestedMinSize;
    }
    @SuppressWarnings("deprecation") Dimension requestedMaxSize=(Dimension)hints.get(EncodeHintType.MAX_SIZE);
    if (requestedMaxSize != null) {
      maxSize=requestedMaxSize;
    }
  }
  String encoded=HighLevelEncoder.encodeHighLevel(contents,shape,minSize,maxSize);
  SymbolInfo symbolInfo=SymbolInfo.lookup(encoded.length(),shape,minSize,maxSize,true);
  String codewords=ErrorCorrection.encodeECC200(encoded,symbolInfo);
  DefaultPlacement placement=new DefaultPlacement(codewords,symbolInfo.getSymbolDataWidth(),symbolInfo.getSymbolDataHeight());
  placement.place();
  return encodeLowLevel(placement,symbolInfo);
}
