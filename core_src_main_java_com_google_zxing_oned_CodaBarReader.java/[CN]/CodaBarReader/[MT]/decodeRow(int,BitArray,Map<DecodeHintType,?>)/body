{
  Arrays.fill(counters,0);
  setCounters(row);
  int startOffset=findStartPattern();
  int nextStart=startOffset;
  decodeRowResult.setLength(0);
  do {
    int charOffset=toNarrowWidePattern(nextStart);
    if (charOffset == -1) {
      throw NotFoundException.getNotFoundInstance();
    }
    decodeRowResult.append((char)charOffset);
    nextStart+=8;
    if (decodeRowResult.length() > 1 && arrayContains(STARTEND_ENCODING,ALPHABET[charOffset])) {
      break;
    }
  }
 while (nextStart < counterLength);
  int trailingWhitespace=counters[nextStart - 1];
  int lastPatternSize=0;
  for (int i=-8; i < -1; i++) {
    lastPatternSize+=counters[nextStart + i];
  }
  if (nextStart < counterLength && trailingWhitespace < lastPatternSize / 2) {
    throw NotFoundException.getNotFoundInstance();
  }
  validatePattern(startOffset);
  for (int i=0; i < decodeRowResult.length(); i++) {
    decodeRowResult.setCharAt(i,ALPHABET[decodeRowResult.charAt(i)]);
  }
  char startchar=decodeRowResult.charAt(0);
  if (!arrayContains(STARTEND_ENCODING,startchar)) {
    throw NotFoundException.getNotFoundInstance();
  }
  char endchar=decodeRowResult.charAt(decodeRowResult.length() - 1);
  if (!arrayContains(STARTEND_ENCODING,endchar)) {
    throw NotFoundException.getNotFoundInstance();
  }
  if (decodeRowResult.length() <= MIN_CHARACTER_LENGTH) {
    throw NotFoundException.getNotFoundInstance();
  }
  if (hints == null || !hints.containsKey(DecodeHintType.RETURN_CODABAR_START_END)) {
    decodeRowResult.deleteCharAt(decodeRowResult.length() - 1);
    decodeRowResult.deleteCharAt(0);
  }
  int runningCount=0;
  for (int i=0; i < startOffset; i++) {
    runningCount+=counters[i];
  }
  float left=(float)runningCount;
  for (int i=startOffset; i < nextStart - 1; i++) {
    runningCount+=counters[i];
  }
  float right=(float)runningCount;
  return new Result(decodeRowResult.toString(),null,new ResultPoint[]{new ResultPoint(left,(float)rowNumber),new ResultPoint(right,(float)rowNumber)},BarcodeFormat.CODABAR);
}
