{
  int[] sizes={0,0,0,0};
  int[] counts={0,0,0,0};
  int end=decodeRowResult.length() - 1;
  int pos=start;
  for (int i=0; true; i++) {
    int pattern=CHARACTER_ENCODINGS[decodeRowResult.charAt(i)];
    for (int j=6; j >= 0; j--) {
      int category=(j & 1) + (pattern & 1) * 2;
      sizes[category]+=counters[pos + j];
      counts[category]++;
      pattern>>=1;
    }
    if (i >= end) {
      break;
    }
    pos+=8;
  }
  float[] maxes=new float[4];
  float[] mins=new float[4];
  for (int i=0; i < 2; i++) {
    mins[i]=0.0f;
    mins[i + 2]=((float)sizes[i] / counts[i] + (float)sizes[i + 2] / counts[i + 2]) / 2.0f;
    maxes[i]=mins[i + 2];
    maxes[i + 2]=(sizes[i + 2] * MAX_ACCEPTABLE + PADDING) / counts[i + 2];
  }
  pos=start;
  for (int i=0; true; i++) {
    int pattern=CHARACTER_ENCODINGS[decodeRowResult.charAt(i)];
    for (int j=6; j >= 0; j--) {
      int category=(j & 1) + (pattern & 1) * 2;
      int size=counters[pos + j];
      if (size < mins[category] || size > maxes[category]) {
        throw NotFoundException.getNotFoundInstance();
      }
      pattern>>=1;
    }
    if (i >= end) {
      break;
    }
    pos+=8;
  }
}
