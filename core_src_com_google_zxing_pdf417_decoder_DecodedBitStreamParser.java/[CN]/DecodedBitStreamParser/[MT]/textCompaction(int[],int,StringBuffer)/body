{
  int[] textCompactionData=new int[codewords[0] << 1];
  int[] byteCompactionData=new int[codewords[0] << 1];
  int index=0;
  int code=0;
  boolean end=false;
  while ((codeIndex < codewords[0]) && !end) {
    code=codewords[codeIndex++];
    if (code < TEXT_COMPACTION_MODE_LATCH) {
      textCompactionData[index]=code / 30;
      textCompactionData[index + 1]=code % 30;
      index+=2;
    }
 else {
switch (code) {
case TEXT_COMPACTION_MODE_LATCH:
{
          codeIndex--;
          end=true;
          break;
        }
case BYTE_COMPACTION_MODE_LATCH:
{
        codeIndex--;
        end=true;
        break;
      }
case NUMERIC_COMPACTION_MODE_LATCH:
{
      codeIndex--;
      end=true;
      break;
    }
case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
{
    textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;
    byteCompactionData[index]=code;
    index++;
    break;
  }
case BYTE_COMPACTION_MODE_LATCH_6:
{
  codeIndex--;
  end=true;
  break;
}
}
}
}
decodeTextCompaction(textCompactionData,byteCompactionData,index,result);
return codeIndex;
}
