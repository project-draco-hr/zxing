{
  int subMode=ALPHA;
  int priorToShiftMode=ALPHA;
  int i=0;
  while (i < length) {
    int subModeCh=textCompactionData[i];
    char ch=0;
switch (subMode) {
case ALPHA:
      if (subModeCh < 26) {
        ch=(char)('A' + subModeCh);
      }
 else {
        if (subModeCh == 26) {
          ch=' ';
        }
 else         if (subModeCh == LL) {
          subMode=LOWER;
        }
 else         if (subModeCh == ML) {
          subMode=MIXED;
        }
 else         if (subModeCh == PS) {
          priorToShiftMode=subMode;
          subMode=PUNCT_SHIFT;
        }
 else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
          result.append((char)byteCompactionData[i]);
        }
      }
    break;
case LOWER:
  if (subModeCh < 26) {
    ch=(char)('a' + subModeCh);
  }
 else {
    if (subModeCh == 26) {
      ch=' ';
    }
 else     if (subModeCh == AL) {
      subMode=ALPHA;
    }
 else     if (subModeCh == ML) {
      subMode=MIXED;
    }
 else     if (subModeCh == PS) {
      priorToShiftMode=subMode;
      subMode=PUNCT_SHIFT;
    }
 else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
      result.append((char)byteCompactionData[i]);
    }
  }
break;
case MIXED:
if (subModeCh < PL) {
ch=MIXED_CHARS[subModeCh];
}
 else {
if (subModeCh == PL) {
  subMode=PUNCT;
}
 else if (subModeCh == 26) {
  ch=' ';
}
 else if (subModeCh == LL) {
  subMode=LOWER;
}
 else if (subModeCh == AL) {
  subMode=ALPHA;
}
 else if (subModeCh == PS) {
  priorToShiftMode=subMode;
  subMode=PUNCT_SHIFT;
}
 else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
  result.append((char)byteCompactionData[i]);
}
}
break;
case PUNCT:
if (subModeCh < PS) {
ch=PUNCT_CHARS[subModeCh];
}
 else {
if (subModeCh == PAL) {
subMode=ALPHA;
}
 else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {
result.append((char)byteCompactionData[i]);
}
}
break;
case PUNCT_SHIFT:
subMode=priorToShiftMode;
if (subModeCh < PS) {
ch=PUNCT_CHARS[subModeCh];
}
 else {
if (subModeCh == PAL) {
subMode=ALPHA;
}
}
break;
}
if (ch != 0) {
result.append(ch);
}
i++;
}
}
