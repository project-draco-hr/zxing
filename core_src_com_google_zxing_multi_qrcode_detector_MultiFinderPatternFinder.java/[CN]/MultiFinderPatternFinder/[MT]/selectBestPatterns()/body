{
  Vector possibleCenters=getPossibleCenters();
  int size=possibleCenters.size();
  if (size < 3) {
    throw ReaderException.getInstance();
  }
  if (size == 3) {
    return new FinderPattern[][]{new FinderPattern[]{(FinderPattern)possibleCenters.elementAt(0),(FinderPattern)possibleCenters.elementAt(1),(FinderPattern)possibleCenters.elementAt(2)}};
  }
  Collections.insertionSort(possibleCenters,new ModuleSizeComparator());
  Vector results=new Vector();
  for (int i1=0; i1 < (size - 2); i1++) {
    FinderPattern p1=(FinderPattern)possibleCenters.elementAt(i1);
    if (p1 == null) {
      continue;
    }
    for (int i2=i1 + 1; i2 < (size - 1); i2++) {
      FinderPattern p2=(FinderPattern)possibleCenters.elementAt(i2);
      if (p2 == null) {
        continue;
      }
      float vModSize12=(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize()) / (Math.min(p1.getEstimatedModuleSize(),p2.getEstimatedModuleSize()));
      float vModSize12A=Math.abs(p1.getEstimatedModuleSize() - p2.getEstimatedModuleSize());
      if (vModSize12A > DIFF_MODSIZE_CUTOFF && vModSize12 >= DIFF_MODSIZE_CUTOFF_PERCENT) {
        break;
      }
      for (int i3=i2 + 1; i3 < size; i3++) {
        FinderPattern p3=(FinderPattern)possibleCenters.elementAt(i3);
        if (p3 == null) {
          continue;
        }
        float vModSize23=(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize()) / (Math.min(p2.getEstimatedModuleSize(),p3.getEstimatedModuleSize()));
        float vModSize23A=Math.abs(p2.getEstimatedModuleSize() - p3.getEstimatedModuleSize());
        if (vModSize23A > DIFF_MODSIZE_CUTOFF && vModSize23 >= DIFF_MODSIZE_CUTOFF_PERCENT) {
          break;
        }
        FinderPattern[] test={p1,p2,p3};
        ResultPoint.orderBestPatterns(test);
        FinderPatternInfo info=new FinderPatternInfo(test);
        float dA=ResultPoint.distance(info.getTopLeft(),info.getBottomLeft());
        float dC=ResultPoint.distance(info.getTopRight(),info.getBottomLeft());
        float dB=ResultPoint.distance(info.getTopLeft(),info.getTopRight());
        float estimatedModuleCount=((dA + dB) / p1.getEstimatedModuleSize()) / 2;
        if (estimatedModuleCount > MAX_MODULE_COUNT_PER_EDGE || estimatedModuleCount < MIN_MODULE_COUNT_PER_EDGE) {
          continue;
        }
        float vABBC=Math.abs(((dA - dB) / Math.min(dA,dB)));
        if (vABBC >= 0.1f) {
          continue;
        }
        float dCpy=(float)Math.sqrt(dA * dA + dB * dB);
        float vPyC=Math.abs(((dC - dCpy) / Math.min(dC,dCpy)));
        if (vPyC >= 0.1f) {
          continue;
        }
        results.addElement(test);
      }
    }
  }
  if (!results.isEmpty()) {
    FinderPattern[][] resultArray=new FinderPattern[results.size()][];
    for (int i=0; i < results.size(); i++) {
      resultArray[i]=(FinderPattern[])results.elementAt(i);
    }
    return resultArray;
  }
  throw ReaderException.getInstance();
}
