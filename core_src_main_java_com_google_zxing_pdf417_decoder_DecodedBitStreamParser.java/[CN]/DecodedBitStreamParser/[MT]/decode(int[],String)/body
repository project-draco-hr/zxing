{
  StringBuilder result=new StringBuilder(codewords.length * 2);
  Charset encoding=DEFAULT_ENCODING;
  int codeIndex=1;
  int code=codewords[codeIndex++];
  PDF417ResultMetadata resultMetadata=new PDF417ResultMetadata();
  while (codeIndex < codewords[0]) {
switch (code) {
case TEXT_COMPACTION_MODE_LATCH:
      codeIndex=textCompaction(codewords,codeIndex,result);
    break;
case BYTE_COMPACTION_MODE_LATCH:
case BYTE_COMPACTION_MODE_LATCH_6:
case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
  codeIndex=byteCompaction(code,codewords,encoding,codeIndex,result);
break;
case NUMERIC_COMPACTION_MODE_LATCH:
codeIndex=numericCompaction(codewords,codeIndex,result);
break;
case ECI_CHARSET:
CharacterSetECI charsetECI=CharacterSetECI.getCharacterSetECIByValue(codewords[codeIndex++]);
encoding=Charset.forName(charsetECI.name());
break;
case ECI_GENERAL_PURPOSE:
codeIndex+=2;
break;
case ECI_USER_DEFINED:
codeIndex++;
break;
case BEGIN_MACRO_PDF417_CONTROL_BLOCK:
codeIndex=decodeMacroBlock(codewords,codeIndex,resultMetadata);
break;
case BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
case MACRO_PDF417_TERMINATOR:
throw FormatException.getFormatInstance();
default :
codeIndex--;
codeIndex=textCompaction(codewords,codeIndex,result);
break;
}
if (codeIndex < codewords.length) {
code=codewords[codeIndex++];
}
 else {
throw FormatException.getFormatInstance();
}
}
if (result.length() == 0) {
throw FormatException.getFormatInstance();
}
DecoderResult decoderResult=new DecoderResult(null,result.toString(),null,ecLevel);
decoderResult.setOther(resultMetadata);
return decoderResult;
}
