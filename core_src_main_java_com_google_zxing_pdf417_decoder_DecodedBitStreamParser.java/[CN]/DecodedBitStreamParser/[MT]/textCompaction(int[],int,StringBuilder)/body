{
  int[] textCompactionData=new int[(codewords[0] - codeIndex) * 2];
  int[] byteCompactionData=new int[(codewords[0] - codeIndex) * 2];
  int index=0;
  boolean end=false;
  while ((codeIndex < codewords[0]) && !end) {
    int code=codewords[codeIndex++];
    if (code < TEXT_COMPACTION_MODE_LATCH) {
      textCompactionData[index]=code / 30;
      textCompactionData[index + 1]=code % 30;
      index+=2;
    }
 else {
switch (code) {
case TEXT_COMPACTION_MODE_LATCH:
        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;
      break;
case BYTE_COMPACTION_MODE_LATCH:
case BYTE_COMPACTION_MODE_LATCH_6:
case NUMERIC_COMPACTION_MODE_LATCH:
case BEGIN_MACRO_PDF417_CONTROL_BLOCK:
case BEGIN_MACRO_PDF417_OPTIONAL_FIELD:
case MACRO_PDF417_TERMINATOR:
    codeIndex--;
  end=true;
break;
case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:
textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;
code=codewords[codeIndex++];
byteCompactionData[index]=code;
index++;
break;
}
}
}
decodeTextCompaction(textCompactionData,byteCompactionData,index,result);
return codeIndex;
}
