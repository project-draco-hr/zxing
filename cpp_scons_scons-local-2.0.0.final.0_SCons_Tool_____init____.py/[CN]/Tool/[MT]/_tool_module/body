def _tool_module(self):
    oldpythonpath = sys.path
    sys.path = (self.toolpath + sys.path)
    try:
        try:
            (file, path, desc) = imp.find_module(self.name, self.toolpath)
            try:
                return imp.load_module(self.name, file, path, desc)
            finally:
                if file:
                    file.close()
        except ImportError as e:
            if (str(e) != ('No module named %s' % self.name)):
                raise SCons.Errors.EnvironmentError(e)
            try:
                import zipimport
            except ImportError:
                pass
            else:
                for aPath in self.toolpath:
                    try:
                        importer = zipimport.zipimporter(aPath)
                        return importer.load_module(self.name)
                    except ImportError as e:
                        pass
    finally:
        sys.path = oldpythonpath
    full_name = ('SCons.Tool.' + self.name)
    try:
        return sys.modules[full_name]
    except KeyError:
        try:
            smpath = sys.modules['SCons.Tool'].__path__
            try:
                (file, path, desc) = imp.find_module(self.name, smpath)
                module = imp.load_module(full_name, file, path, desc)
                setattr(SCons.Tool, self.name, module)
                if file:
                    file.close()
                return module
            except ImportError as e:
                if (str(e) != ('No module named %s' % self.name)):
                    raise SCons.Errors.EnvironmentError(e)
                try:
                    import zipimport
                    importer = zipimport.zipimporter(sys.modules['SCons.Tool'].__path__[0])
                    module = importer.load_module(full_name)
                    setattr(SCons.Tool, self.name, module)
                    return module
                except ImportError as e:
                    m = ("No tool named '%s': %s" % (self.name, e))
                    raise SCons.Errors.EnvironmentError(m)
        except ImportError as e:
            m = ("No tool named '%s': %s" % (self.name, e))
            raise SCons.Errors.EnvironmentError(m)
