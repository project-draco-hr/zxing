{
  int numCounters=counters.length;
  int total=0;
  int patternLength=0;
  for (int i=0; i < numCounters; i++) {
    total+=counters[i];
    patternLength+=pattern[i];
  }
  if (total < patternLength) {
    return Integer.MAX_VALUE;
  }
  patternLength<<=INTEGER_MATH_SHIFT;
  int patternRatio=patternLength / total;
  int totalVariance=0;
  for (int x=0; x < numCounters; x++) {
    int scaledCounter=counters[x] * patternRatio;
    int width=pattern[x] << INTEGER_MATH_SHIFT;
    totalVariance+=scaledCounter > width ? scaledCounter - width : width - scaledCounter;
  }
  return (totalVariance << 8) / patternLength;
}
