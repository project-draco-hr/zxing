{
  int width=image.getWidth();
  int height=image.getHeight();
  BitArray row=new BitArray(width);
  int barcodesToSkip=0;
  if (hints != null) {
    Integer number=(Integer)hints.get(DecodeHintType.SKIP_N_BARCODES);
    if (number != null) {
      barcodesToSkip=number.intValue();
    }
  }
  int middle=height >> 1;
  int rowStep=Math.max(1,height >> 4);
  int maxLines;
  if (barcodesToSkip > 0) {
    maxLines=height;
  }
 else {
    maxLines=tryHarder ? 15 : 7;
  }
  for (int x=0; x < maxLines; x++) {
    int rowStepsAboveOrBelow=(x + 1) >> 1;
    boolean isAbove=(x & 0x01) == 0;
    int rowNumber=middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);
    if (rowNumber < 0 || rowNumber >= height) {
      break;
    }
    image.estimateBlackPoint(BlackPointEstimationMethod.ROW_SAMPLING,rowNumber);
    image.getBlackRow(rowNumber,row,0,width);
    try {
      Result result=decodeRow(rowNumber,row,hints);
      if (barcodesToSkip > 0) {
        barcodesToSkip--;
      }
 else {
        return result;
      }
    }
 catch (    ReaderException re) {
      if (tryHarder) {
        row.reverse();
        try {
          Result result=decodeRow(rowNumber,row,hints);
          if (barcodesToSkip > 0) {
            barcodesToSkip--;
          }
 else {
            return result;
          }
        }
 catch (        ReaderException re2) {
        }
      }
    }
  }
  throw new ReaderException("No barcode found");
}
