{
  int width=image.getWidth();
  int height=image.getHeight();
  BitArray row=new BitArray(width);
  int middle=height >> 1;
  int rowStep=Math.max(1,height >> (tryHarder ? 7 : 4));
  int maxLines;
  if (tryHarder) {
    maxLines=height;
  }
 else {
    maxLines=7;
  }
  Hashtable lastResults=null;
  boolean skippingSomeBarcodes=hints != null && hints.containsKey(DecodeHintType.SKIP_N_BARCODES);
  for (int x=0; x < maxLines; x++) {
    int rowStepsAboveOrBelow=(x + 1) >> 1;
    boolean isAbove=(x & 0x01) == 0;
    int rowNumber=middle + rowStep * (isAbove ? rowStepsAboveOrBelow : -rowStepsAboveOrBelow);
    if (rowNumber < 0 || rowNumber >= height) {
      break;
    }
    try {
      image.estimateBlackPoint(BlackPointEstimationMethod.ROW_SAMPLING,rowNumber);
    }
 catch (    ReaderException re) {
      continue;
    }
    image.getBlackRow(rowNumber,row,0,width);
    for (int attempt=0; attempt < 2; attempt++) {
      if (attempt == 1) {
        if (tryHarder) {
          row.reverse();
        }
 else {
          break;
        }
      }
      try {
        Result result=decodeRow(rowNumber,row,hints);
        if (lastResults != null && lastResults.containsKey(result.getText())) {
          continue;
        }
        if (skippingSomeBarcodes) {
          int oldValue=((Integer)hints.get(DecodeHintType.SKIP_N_BARCODES)).intValue();
          if (oldValue > 1) {
            hints.put(DecodeHintType.SKIP_N_BARCODES,new Integer(oldValue - 1));
          }
 else {
            hints.remove(DecodeHintType.SKIP_N_BARCODES);
            skippingSomeBarcodes=false;
          }
          if (lastResults == null) {
            lastResults=new Hashtable(3);
          }
          lastResults.put(result.getText(),Boolean.TRUE);
        }
 else {
          if (attempt == 1) {
            result.putMetadata(ResultMetadataType.ORIENTATION,new Integer(180));
          }
          return result;
        }
      }
 catch (      ReaderException re) {
      }
    }
  }
  throw new ReaderException("No barcode found");
}
