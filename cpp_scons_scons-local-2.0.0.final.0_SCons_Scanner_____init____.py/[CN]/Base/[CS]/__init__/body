def __init__(self, function, name='NONE', argument=_null, skeys=_null, path_function=None, node_class=SCons.Node.FS.Base, node_factory=None, scan_check=None, recursive=None):
    "\n        Construct a new scanner object given a scanner function.\n\n        'function' - a scanner function taking two or three\n        arguments and returning a list of strings.\n\n        'name' - a name for identifying this scanner object.\n\n        'argument' - an optional argument that, if specified, will be\n        passed to both the scanner function and the path_function.\n\n        'skeys' - an optional list argument that can be used to determine\n        which scanner should be used for a given Node. In the case of File\n        nodes, for example, the 'skeys' would be file suffixes.\n\n        'path_function' - a function that takes four or five arguments\n        (a construction environment, Node for the directory containing\n        the SConscript file that defined the primary target, list of\n        target nodes, list of source nodes, and optional argument for\n        this instance) and returns a tuple of the directories that can\n        be searched for implicit dependency files.  May also return a\n        callable() which is called with no args and returns the tuple\n        (supporting Bindable class).\n\n        'node_class' - the class of Nodes which this scan will return.\n        If node_class is None, then this scanner will not enforce any\n        Node conversion and will return the raw results from the\n        underlying scanner function.\n\n        'node_factory' - the factory function to be called to translate\n        the raw results returned by the scanner function into the\n        expected node_class objects.\n\n        'scan_check' - a function to be called to first check whether\n        this node really needs to be scanned.\n\n        'recursive' - specifies that this scanner should be invoked\n        recursively on all of the implicit dependencies it returns\n        (the canonical example being #include lines in C source files).\n        May be a callable, which will be called to filter the list\n        of nodes found to select a subset for recursive scanning\n        (the canonical example being only recursively scanning\n        subdirectories within a directory).\n\n        The scanner function's first argument will be a Node that should\n        be scanned for dependencies, the second argument will be an\n        Environment object, the third argument will be the tuple of paths\n        returned by the path_function, and the fourth argument will be\n        the value passed into 'argument', and the returned list should\n        contain the Nodes for all the direct dependencies of the file.\n\n        Examples:\n\n        s = Scanner(my_scanner_function)\n\n        s = Scanner(function = my_scanner_function)\n\n        s = Scanner(function = my_scanner_function, argument = 'foo')\n\n        "
    self.function = function
    self.path_function = path_function
    self.name = name
    self.argument = argument
    if (skeys is _null):
        if SCons.Util.is_Dict(function):
            skeys = list(function.keys())
        else:
            skeys = []
    self.skeys = skeys
    self.node_class = node_class
    self.node_factory = node_factory
    self.scan_check = scan_check
    if callable(recursive):
        self.recurse_nodes = recursive
    elif recursive:
        self.recurse_nodes = self._recurse_all_nodes
    else:
        self.recurse_nodes = self._recurse_no_nodes
