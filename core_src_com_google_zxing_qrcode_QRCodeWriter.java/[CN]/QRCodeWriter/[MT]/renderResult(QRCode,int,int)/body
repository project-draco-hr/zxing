{
  ByteMatrix input=code.getMatrix();
  int inputWidth=input.width();
  int inputHeight=input.height();
  int qrWidth=inputWidth + (QUIET_ZONE_SIZE << 1);
  int qrHeight=inputHeight + (QUIET_ZONE_SIZE << 1);
  int outputWidth=Math.max(width,qrWidth);
  int outputHeight=Math.max(height,qrHeight);
  int multiple=Math.min(outputWidth / qrWidth,outputHeight / qrHeight);
  int leftPadding=(outputWidth - (inputWidth * multiple)) / 2;
  int topPadding=(outputHeight - (inputHeight * multiple)) / 2;
  ByteMatrix output=new ByteMatrix(outputHeight,outputWidth);
  byte[][] outputArray=output.getArray();
  byte[] row=new byte[outputWidth];
  for (int y=0; y < topPadding; y++) {
    setRowColor(outputArray[y],(byte)255);
  }
  byte[][] inputArray=input.getArray();
  for (int y=0; y < inputHeight; y++) {
    for (int x=0; x < leftPadding; x++) {
      row[x]=(byte)255;
    }
    int offset=leftPadding;
    for (int x=0; x < inputWidth; x++) {
      byte value=(inputArray[y][x] == 1) ? 0 : (byte)255;
      for (int z=0; z < multiple; z++) {
        row[offset + z]=value;
      }
      offset+=multiple;
    }
    offset=leftPadding + (inputWidth * multiple);
    for (int x=offset; x < outputWidth; x++) {
      row[x]=(byte)255;
    }
    offset=topPadding + (y * multiple);
    for (int z=0; z < multiple; z++) {
      System.arraycopy(row,0,outputArray[offset + z],0,outputWidth);
    }
  }
  int offset=topPadding + (inputHeight * multiple);
  for (int y=offset; y < outputHeight; y++) {
    setRowColor(outputArray[y],(byte)255);
  }
  return output;
}
