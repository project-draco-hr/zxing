def generate(env):
    cmd_interp = ''
    if SCons.Util.can_read_reg:
        try:
            k = SCons.Util.RegOpenKeyEx(SCons.Util.hkey_mod.HKEY_LOCAL_MACHINE, 'Software\\Microsoft\\Windows NT\\CurrentVersion')
            (val, tok) = SCons.Util.RegQueryValueEx(k, 'SystemRoot')
            cmd_interp = os.path.join(val, 'System32\\cmd.exe')
        except SCons.Util.RegError:
            try:
                k = SCons.Util.RegOpenKeyEx(SCons.Util.hkey_mod.HKEY_LOCAL_MACHINE, 'Software\\Microsoft\\Windows\\CurrentVersion')
                (val, tok) = SCons.Util.RegQueryValueEx(k, 'SystemRoot')
                cmd_interp = os.path.join(val, 'command.com')
            except KeyboardInterrupt:
                raise
            except:
                pass
    if (not cmd_interp):
        systemroot = get_system_root()
        tmp_path = ((systemroot + os.pathsep) + os.path.join(systemroot, 'System32'))
        tmp_pathext = '.com;.exe;.bat;.cmd'
        if ('PATHEXT' in os.environ):
            tmp_pathext = os.environ['PATHEXT']
        cmd_interp = SCons.Util.WhereIs('cmd', tmp_path, tmp_pathext)
        if (not cmd_interp):
            cmd_interp = SCons.Util.WhereIs('command', tmp_path, tmp_pathext)
    if (not cmd_interp):
        cmd_interp = env.Detect('cmd')
        if (not cmd_interp):
            cmd_interp = env.Detect('command')
    if ('ENV' not in env):
        env['ENV'] = {}
    import_env = ['SystemDrive', 'SystemRoot', 'TEMP', 'TMP']
    for var in import_env:
        v = os.environ.get(var)
        if v:
            env['ENV'][var] = v
    if ('COMSPEC' not in env['ENV']):
        v = os.environ.get('COMSPEC')
        if v:
            env['ENV']['COMSPEC'] = v
    env.AppendENVPath('PATH', (get_system_root() + '\\System32'))
    env['ENV']['PATHEXT'] = '.COM;.EXE;.BAT;.CMD'
    env['OBJPREFIX'] = ''
    env['OBJSUFFIX'] = '.obj'
    env['SHOBJPREFIX'] = '$OBJPREFIX'
    env['SHOBJSUFFIX'] = '$OBJSUFFIX'
    env['PROGPREFIX'] = ''
    env['PROGSUFFIX'] = '.exe'
    env['LIBPREFIX'] = ''
    env['LIBSUFFIX'] = '.lib'
    env['SHLIBPREFIX'] = ''
    env['SHLIBSUFFIX'] = '.dll'
    env['LIBPREFIXES'] = ['$LIBPREFIX']
    env['LIBSUFFIXES'] = ['$LIBSUFFIX']
    env['PSPAWN'] = piped_spawn
    env['SPAWN'] = spawn
    env['SHELL'] = cmd_interp
    env['TEMPFILE'] = TempFileMunge
    env['TEMPFILEPREFIX'] = '@'
    env['MAXLINELENGTH'] = 2048
    env['ESCAPE'] = escape
    env['HOST_OS'] = 'win32'
    env['HOST_ARCH'] = get_architecture().arch
