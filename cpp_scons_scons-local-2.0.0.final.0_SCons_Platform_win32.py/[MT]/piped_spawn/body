def piped_spawn(sh, escape, cmd, args, env, stdout, stderr):
    if (not sh):
        sys.stderr.write('scons: Could not find command interpreter, is it in your PATH?\n')
        return 127
    else:
        tmpFileStdout = os.path.normpath(tempfile.mktemp())
        tmpFileStderr = os.path.normpath(tempfile.mktemp())
        stdoutRedirected = 0
        stderrRedirected = 0
        for arg in args:
            if ((arg.find('>', 0, 1) != (-1)) or (arg.find('1>', 0, 2) != (-1))):
                stdoutRedirected = 1
            if (arg.find('2>', 0, 2) != (-1)):
                stderrRedirected = 1
        if (stdoutRedirected == 0):
            args.append(('>' + str(tmpFileStdout)))
        if (stderrRedirected == 0):
            args.append(('2>' + str(tmpFileStderr)))
        try:
            args = [sh, '/C', escape(' '.join(args))]
            ret = os.spawnve(os.P_WAIT, sh, args, env)
        except OSError as e:
            try:
                ret = exitvalmap[e[0]]
            except KeyError:
                sys.stderr.write(('scons: unknown OSError exception code %d - %s: %s\n' % (e[0], cmd, e[1])))
            if (stderr is not None):
                stderr.write(('scons: %s: %s\n' % (cmd, e[1])))
        if ((stdout is not None) and (stdoutRedirected == 0)):
            try:
                stdout.write(open(tmpFileStdout, 'r').read())
                os.remove(tmpFileStdout)
            except (IOError, OSError):
                pass
        if ((stderr is not None) and (stderrRedirected == 0)):
            try:
                stderr.write(open(tmpFileStderr, 'r').read())
                os.remove(tmpFileStderr)
            except (IOError, OSError):
                pass
        return ret
