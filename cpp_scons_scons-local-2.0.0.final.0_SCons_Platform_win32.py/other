"SCons.Platform.win32\n\nPlatform-specific initialization for Win32 systems.\n\nThere normally shouldn't be any need to import this module directly.  It\nwill usually be imported through the generic SCons.Platform.Platform()\nselection method.\n"
__revision__ = 'src/engine/SCons/Platform/win32.py 5023 2010/06/14 22:05:46 scons'
import os
import os.path
import sys
import tempfile
from SCons.Platform.posix import exitvalmap
from SCons.Platform import TempFileMunge
import SCons.Util
try:
    import msvcrt
    import win32api
    import win32con
    msvcrt.get_osfhandle
    win32api.SetHandleInformation
    win32con.HANDLE_FLAG_INHERIT
except ImportError:
    parallel_msg = ('you do not seem to have the pywin32 extensions installed;\n' + '\tparallel (-j) builds may not work reliably with open Python files.')
except AttributeError:
    parallel_msg = ('your pywin32 extensions do not support file handle operations;\n' + '\tparallel (-j) builds may not work reliably with open Python files.')
else:
    parallel_msg = None
    import builtins
    _builtin_file = builtins.file
    _builtin_open = builtins.open

    def _scons_file(*args, **kw):
        fp = _builtin_file(*args, **kw)
        win32api.SetHandleInformation(msvcrt.get_osfhandle(fp.fileno()), win32con.HANDLE_FLAG_INHERIT, 0)
        return fp

    def _scons_open(*args, **kw):
        fp = _builtin_open(*args, **kw)
        win32api.SetHandleInformation(msvcrt.get_osfhandle(fp.fileno()), win32con.HANDLE_FLAG_INHERIT, 0)
        return fp
    builtins.file = _scons_file
    builtins.open = _scons_open
_system_root = None
SupportedArchitectureList = [ArchDefinition('x86', ['i386', 'i486', 'i586', 'i686']), ArchDefinition('x86_64', ['AMD64', 'amd64', 'em64t', 'EM64T', 'x86_64']), ArchDefinition('ia64', ['IA64'])]
SupportedArchitectureMap = {}
for a in SupportedArchitectureList:
    SupportedArchitectureMap[a.arch] = a
    for s in a.synonyms:
        SupportedArchitectureMap[s] = a
