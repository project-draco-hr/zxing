{
  if (a.getDegree() < b.getDegree()) {
    ModulusPoly temp=a;
    a=b;
    b=temp;
  }
  ModulusPoly rLast=a;
  ModulusPoly r=b;
  ModulusPoly tLast=field.getZero();
  ModulusPoly t=field.getOne();
  while (r.getDegree() >= R / 2) {
    ModulusPoly rLastLast=rLast;
    ModulusPoly tLastLast=tLast;
    rLast=r;
    tLast=t;
    if (rLast.isZero()) {
      throw ChecksumException.getChecksumInstance();
    }
    r=rLastLast;
    ModulusPoly q=field.getZero();
    int denominatorLeadingTerm=rLast.getCoefficient(rLast.getDegree());
    int dltInverse=field.inverse(denominatorLeadingTerm);
    while (r.getDegree() >= rLast.getDegree() && !r.isZero()) {
      int degreeDiff=r.getDegree() - rLast.getDegree();
      int scale=field.multiply(r.getCoefficient(r.getDegree()),dltInverse);
      q=q.add(field.buildMonomial(degreeDiff,scale));
      r=r.subtract(rLast.multiplyByMonomial(degreeDiff,scale));
    }
    t=q.multiply(tLast).subtract(tLastLast).negative();
  }
  int sigmaTildeAtZero=t.getCoefficient(0);
  if (sigmaTildeAtZero == 0) {
    throw ChecksumException.getChecksumInstance();
  }
  int inverse=field.inverse(sigmaTildeAtZero);
  ModulusPoly sigma=t.multiply(inverse);
  ModulusPoly omega=r.multiply(inverse);
  return new ModulusPoly[]{sigma,omega};
}
