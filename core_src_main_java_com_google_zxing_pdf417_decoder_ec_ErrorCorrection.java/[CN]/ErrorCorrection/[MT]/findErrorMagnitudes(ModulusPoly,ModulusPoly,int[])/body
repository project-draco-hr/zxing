{
  int errorLocatorDegree=errorLocator.getDegree();
  int[] formalDerivativeCoefficients=new int[errorLocatorDegree];
  for (int i=1; i <= errorLocatorDegree; i++) {
    formalDerivativeCoefficients[errorLocatorDegree - i]=field.multiply(i,errorLocator.getCoefficient(i));
  }
  ModulusPoly formalDerivative=new ModulusPoly(field,formalDerivativeCoefficients);
  int s=errorLocations.length;
  int[] result=new int[s];
  for (int i=0; i < s; i++) {
    int xiInverse=field.inverse(errorLocations[i]);
    int numerator=field.subtract(0,errorEvaluator.evaluateAt(xiInverse));
    int denominator=field.inverse(formalDerivative.evaluateAt(xiInverse));
    result[i]=field.multiply(numerator,denominator);
  }
  return result;
}
