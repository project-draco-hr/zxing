{
  int[][] blackPoints=new int[subHeight][subWidth];
  for (int y=0; y < subHeight; y++) {
    int yoffset=y << BLOCK_SIZE_POWER;
    int maxYOffset=height - BLOCK_SIZE;
    if (yoffset > maxYOffset) {
      yoffset=maxYOffset;
    }
    for (int x=0; x < subWidth; x++) {
      int xoffset=x << BLOCK_SIZE_POWER;
      int maxXOffset=width - BLOCK_SIZE;
      if (xoffset > maxXOffset) {
        xoffset=maxXOffset;
      }
      int sum=0;
      int min=0xFF;
      int max=0;
      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {
        for (int xx=0; xx < BLOCK_SIZE; xx++) {
          int pixel=luminances[offset + xx] & 0xFF;
          sum+=pixel;
          if (pixel < min) {
            min=pixel;
          }
          if (pixel > max) {
            max=pixel;
          }
        }
        if (max - min > MIN_DYNAMIC_RANGE) {
          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {
            for (int xx=0; xx < BLOCK_SIZE; xx++) {
              sum+=luminances[offset + xx] & 0xFF;
            }
          }
        }
      }
      int average=sum >> (BLOCK_SIZE_POWER * 2);
      if (max - min <= MIN_DYNAMIC_RANGE) {
        average=min >> 1;
        if (y > 0 && x > 0) {
          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) >> 2;
          if (min < averageNeighborBlackPoint) {
            average=averageNeighborBlackPoint;
          }
        }
      }
      blackPoints[y][x]=average;
    }
  }
  return blackPoints;
}
