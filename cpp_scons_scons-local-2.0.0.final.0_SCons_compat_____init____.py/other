__doc__ = '\nSCons compatibility package for old Python versions\n\nThis subpackage holds modules that provide backwards-compatible\nimplementations of various things that we\'d like to use in SCons but which\nonly show up in later versions of Python than the early, old version(s)\nwe still support.\n\nOther code will not generally reference things in this package through\nthe SCons.compat namespace.  The modules included here add things to\nthe builtins namespace or the global module list so that the rest\nof our code can use the objects and names imported here regardless of\nPython version.\n\nSimply enough, things that go in the builtins name space come from\nour _scons_builtins module.\n\nThe rest of the things here will be in individual compatibility modules\nthat are either: 1) suitably modified copies of the future modules that\nwe want to use; or 2) backwards compatible re-implementations of the\nspecific portions of a future module\'s API that we want to use.\n\nGENERAL WARNINGS:  Implementations of functions in the SCons.compat\nmodules are *NOT* guaranteed to be fully compliant with these functions in\nlater versions of Python.  We are only concerned with adding functionality\nthat we actually use in SCons, so be wary if you lift this code for\nother uses.  (That said, making these more nearly the same as later,\nofficial versions is still a desirable goal, we just don\'t need to be\nobsessive about it.)\n\nWe name the compatibility modules with an initial \'_scons_\' (for example,\n_scons_subprocess.py is our compatibility module for subprocess) so\nthat we can still try to import the real module name and fall back to\nour compatibility module if we get an ImportError.  The import_as()\nfunction defined below loads the module as the "real" name (without the\n\'_scons\'), after which all of the "import {module}" statements in the\nrest of our code will find our pre-loaded compatibility module.\n'
__revision__ = 'src/engine/SCons/compat/__init__.py 5023 2010/06/14 22:05:46 scons'
import os
import sys
import imp
rename_module('builtins', '__builtin__')
import _scons_builtins
try:
    import hashlib
except ImportError:
    try:
        import_as('_scons_hashlib', 'hashlib')
    except ImportError:
        pass
try:
    set
except NameError:
    import_as('_scons_sets', 'sets')
    import builtins, sets
    builtins.set = sets.Set
try:
    import collections
except ImportError:
    import_as('_scons_collections', 'collections')
else:
    try:
        collections.UserDict
    except AttributeError:
        exec 'from UserDict import UserDict as _UserDict'
        collections.UserDict = _UserDict
        del _UserDict
    try:
        collections.UserList
    except AttributeError:
        exec 'from UserList import UserList as _UserList'
        collections.UserList = _UserList
        del _UserList
    try:
        collections.UserString
    except AttributeError:
        exec 'from UserString import UserString as _UserString'
        collections.UserString = _UserString
        del _UserString
try:
    import io
except ImportError:
    import_as('_scons_io', 'io')
try:
    os.devnull
except AttributeError:
    _names = sys.builtin_module_names
    if ('posix' in _names):
        os.devnull = '/dev/null'
    elif ('nt' in _names):
        os.devnull = 'nul'
    os.path.devnull = os.devnull
try:
    os.path.lexists
except AttributeError:

    def lexists(path):
        return (os.path.exists(path) or os.path.islink(path))
    os.path.lexists = lexists
if (os.environ.get('SCONS_HORRIBLE_REGRESSION_TEST_HACK') is None):
    rename_module('pickle', 'cPickle')
rename_module('profile', 'cProfile')
rename_module('queue', 'Queue')
rename_module('winreg', '_winreg')
try:
    import subprocess
except ImportError:
    import_as('_scons_subprocess', 'subprocess')
try:
    sys.intern
except AttributeError:
    import builtins
    try:
        sys.intern = builtins.intern
    except AttributeError:

        def intern(x):
            return x
        sys.intern = intern
        del intern
try:
    sys.maxsize
except AttributeError:
    sys.maxsize = sys.maxint
if (os.environ.get('SCONS_HORRIBLE_REGRESSION_TEST_HACK') is not None):
    from types import ClassType

    def callable(obj):
        if hasattr(obj, '__call__'):
            return True
        if isinstance(obj, (ClassType, type)):
            return True
        return False
    import builtins
    builtins.callable = callable
    del callable
