{
  float ratio=(2 * nbLayers + (nbLayers > 4 ? 1 : 0) + (nbLayers - 4) / 8) / (2.0f * nbCenterLayers);
  int dx=bullEyeCornerPoints[0].getX() - bullEyeCornerPoints[2].getX();
  dx+=dx > 0 ? 1 : -1;
  int dy=bullEyeCornerPoints[0].getY() - bullEyeCornerPoints[2].getY();
  dy+=dy > 0 ? 1 : -1;
  int targetcx=MathUtils.round(bullEyeCornerPoints[2].getX() - ratio * dx);
  int targetcy=MathUtils.round(bullEyeCornerPoints[2].getY() - ratio * dy);
  int targetax=MathUtils.round(bullEyeCornerPoints[0].getX() + ratio * dx);
  int targetay=MathUtils.round(bullEyeCornerPoints[0].getY() + ratio * dy);
  dx=bullEyeCornerPoints[1].getX() - bullEyeCornerPoints[3].getX();
  dx+=dx > 0 ? 1 : -1;
  dy=bullEyeCornerPoints[1].getY() - bullEyeCornerPoints[3].getY();
  dy+=dy > 0 ? 1 : -1;
  int targetdx=MathUtils.round(bullEyeCornerPoints[3].getX() - ratio * dx);
  int targetdy=MathUtils.round(bullEyeCornerPoints[3].getY() - ratio * dy);
  int targetbx=MathUtils.round(bullEyeCornerPoints[1].getX() + ratio * dx);
  int targetby=MathUtils.round(bullEyeCornerPoints[1].getY() + ratio * dy);
  if (!isValid(targetax,targetay) || !isValid(targetbx,targetby) || !isValid(targetcx,targetcy)|| !isValid(targetdx,targetdy)) {
    throw NotFoundException.getNotFoundInstance();
  }
  return new ResultPoint[]{new ResultPoint(targetax,targetay),new ResultPoint(targetbx,targetby),new ResultPoint(targetcx,targetcy),new ResultPoint(targetdx,targetdy)};
}
