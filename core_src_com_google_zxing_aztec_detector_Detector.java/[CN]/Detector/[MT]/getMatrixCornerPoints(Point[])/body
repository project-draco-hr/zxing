{
  float ratio=(2 * nbLayers + (nbLayers > 4 ? 1 : 0) + (nbLayers - 4) / 8) / (2.0f * nbCenterLayers);
  int dx=bullEyeCornerPoints[0].x - bullEyeCornerPoints[2].x;
  dx+=dx > 0 ? 1 : -1;
  int dy=bullEyeCornerPoints[0].y - bullEyeCornerPoints[2].y;
  dy+=dy > 0 ? 1 : -1;
  int targetcx=MathUtils.round(bullEyeCornerPoints[2].x - ratio * dx);
  int targetcy=MathUtils.round(bullEyeCornerPoints[2].y - ratio * dy);
  int targetax=MathUtils.round(bullEyeCornerPoints[0].x + ratio * dx);
  int targetay=MathUtils.round(bullEyeCornerPoints[0].y + ratio * dy);
  dx=bullEyeCornerPoints[1].x - bullEyeCornerPoints[3].x;
  dx+=dx > 0 ? 1 : -1;
  dy=bullEyeCornerPoints[1].y - bullEyeCornerPoints[3].y;
  dy+=dy > 0 ? 1 : -1;
  int targetdx=MathUtils.round(bullEyeCornerPoints[3].x - ratio * dx);
  int targetdy=MathUtils.round(bullEyeCornerPoints[3].y - ratio * dy);
  int targetbx=MathUtils.round(bullEyeCornerPoints[1].x + ratio * dx);
  int targetby=MathUtils.round(bullEyeCornerPoints[1].y + ratio * dy);
  if (!isValid(targetax,targetay) || !isValid(targetbx,targetby) || !isValid(targetcx,targetcy)|| !isValid(targetdx,targetdy)) {
    throw NotFoundException.getNotFoundInstance();
  }
  return new ResultPoint[]{new ResultPoint(targetax,targetay),new ResultPoint(targetbx,targetby),new ResultPoint(targetcx,targetcy),new ResultPoint(targetdx,targetdy)};
}
