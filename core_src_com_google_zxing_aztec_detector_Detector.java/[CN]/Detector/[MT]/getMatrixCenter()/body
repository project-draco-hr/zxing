{
  ResultPoint pointA;
  ResultPoint pointB;
  ResultPoint pointC;
  ResultPoint pointD;
  try {
    ResultPoint[] cornerPoints=new WhiteRectangleDetector(image).detect();
    pointA=cornerPoints[0];
    pointB=cornerPoints[1];
    pointC=cornerPoints[2];
    pointD=cornerPoints[3];
  }
 catch (  NotFoundException e) {
    int cx=image.getWidth() / 2;
    int cy=image.getHeight() / 2;
    pointA=getFirstDifferent(new Point(cx + 15 / 2,cy - 15 / 2),false,1,-1).toResultPoint();
    pointB=getFirstDifferent(new Point(cx + 15 / 2,cy + 15 / 2),false,1,1).toResultPoint();
    pointC=getFirstDifferent(new Point(cx - 15 / 2,cy + 15 / 2),false,-1,1).toResultPoint();
    pointD=getFirstDifferent(new Point(cx - 15 / 2,cy - 15 / 2),false,-1,-1).toResultPoint();
  }
  int cx=MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX()+ pointC.getX()) / 4);
  int cy=MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY()+ pointC.getY()) / 4);
  try {
    ResultPoint[] cornerPoints=new WhiteRectangleDetector(image,15,cx,cy).detect();
    pointA=cornerPoints[0];
    pointB=cornerPoints[1];
    pointC=cornerPoints[2];
    pointD=cornerPoints[3];
  }
 catch (  NotFoundException e) {
    pointA=getFirstDifferent(new Point(cx + 15 / 2,cy - 15 / 2),false,1,-1).toResultPoint();
    pointB=getFirstDifferent(new Point(cx + 15 / 2,cy + 15 / 2),false,1,1).toResultPoint();
    pointC=getFirstDifferent(new Point(cx - 15 / 2,cy + 15 / 2),false,-1,1).toResultPoint();
    pointD=getFirstDifferent(new Point(cx - 15 / 2,cy - 15 / 2),false,-1,-1).toResultPoint();
  }
  cx=MathUtils.round((pointA.getX() + pointD.getX() + pointB.getX()+ pointC.getX()) / 4);
  cy=MathUtils.round((pointA.getY() + pointD.getY() + pointB.getY()+ pointC.getY()) / 4);
  return new Point(cx,cy);
}
