{
  int numBuckets=buckets.length;
  int maxBucketCount=0;
  int firstPeak=0;
  int firstPeakSize=0;
  for (int x=0; x < numBuckets; x++) {
    if (buckets[x] > firstPeakSize) {
      firstPeak=x;
      firstPeakSize=buckets[x];
    }
    if (buckets[x] > maxBucketCount) {
      maxBucketCount=buckets[x];
    }
  }
  int secondPeak=0;
  int secondPeakScore=0;
  for (int x=0; x < numBuckets; x++) {
    int distanceToBiggest=x - firstPeak;
    int score=buckets[x] * distanceToBiggest * distanceToBiggest;
    if (score > secondPeakScore) {
      secondPeak=x;
      secondPeakScore=score;
    }
  }
  if (firstPeak > secondPeak) {
    int temp=firstPeak;
    firstPeak=secondPeak;
    secondPeak=temp;
  }
  if (secondPeak - firstPeak <= numBuckets / 16) {
    throw NotFoundException.getNotFoundInstance();
  }
  int bestValley=secondPeak - 1;
  int bestValleyScore=-1;
  for (int x=secondPeak - 1; x > firstPeak; x--) {
    int fromFirst=x - firstPeak;
    int score=fromFirst * fromFirst * (secondPeak - x)* (maxBucketCount - buckets[x]);
    if (score > bestValleyScore) {
      bestValley=x;
      bestValleyScore=score;
    }
  }
  return bestValley << LUMINANCE_SHIFT;
}
