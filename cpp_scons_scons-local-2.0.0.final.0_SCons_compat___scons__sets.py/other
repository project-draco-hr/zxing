"Classes to represent arbitrary sets (including sets of sets).\n\nThis module implements sets using dictionaries whose values are\nignored.  The usual operations (union, intersection, deletion, etc.)\nare provided as both methods and operators.\n\nImportant: sets are not sequences!  While they support 'x in s',\n'len(s)', and 'for x in s', none of those operations are unique for\nsequences; for example, mappings support all three as well.  The\ncharacteristic operation for sequences is subscripting with small\nintegers: s[i], for i in range(len(s)).  Sets don't support\nsubscripting at all.  Also, sequences allow multiple occurrences and\ntheir elements have a definite order; sets on the other hand don't\nrecord multiple occurrences and don't remember the order of element\ninsertion (which is why they don't support s[i]).\n\nThe following classes are provided:\n\nBaseSet -- All the operations common to both mutable and immutable\n    sets. This is an abstract class, not meant to be directly\n    instantiated.\n\nSet -- Mutable sets, subclass of BaseSet; not hashable.\n\nImmutableSet -- Immutable sets, subclass of BaseSet; hashable.\n    An iterable argument is mandatory to create an ImmutableSet.\n\n_TemporarilyImmutableSet -- A wrapper around a Set, hashable,\n    giving the same hash value as the immutable set equivalent\n    would have.  Do not use this class directly.\n\nOnly hashable objects can be added to a Set. In particular, you cannot\nreally add a Set as an element to another Set; if you try, what is\nactually added is an ImmutableSet built from it (it compares equal to\nthe one you tried adding).\n\nWhen you ask if `x in y' where x is a Set and y is a Set or\nImmutableSet, x is wrapped into a _TemporarilyImmutableSet z, and\nwhat's tested is actually `z in y'.\n\n"
exec 'from itertools import ifilterfalse as filterfalse'
__all__ = ['BaseSet', 'Set', 'ImmutableSet']
