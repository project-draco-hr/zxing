{
  String suffix=String.format(" (%srotation: %d)",tryHarder ? "try harder, " : "",(int)rotation);
  Map<DecodeHintType,Object> hints=new EnumMap<>(DecodeHintType.class);
  if (tryHarder) {
    hints.put(DecodeHintType.TRY_HARDER,Boolean.TRUE);
  }
  Result result=barcodeReader.decode(source,hints);
  if (expectedFormat != result.getBarcodeFormat()) {
    log.info(String.format("Format mismatch: expected '%s' but got '%s'%s",expectedFormat,result.getBarcodeFormat(),suffix));
    return false;
  }
  String resultText=result.getText();
  if (!expectedText.equals(resultText)) {
    log.info(String.format("Content mismatch: expected '%s' but got '%s'%s",expectedText,resultText,suffix));
    return false;
  }
  Map<ResultMetadataType,?> resultMetadata=result.getResultMetadata();
  for (  Map.Entry<?,?> metadatum : expectedMetadata.entrySet()) {
    ResultMetadataType key=ResultMetadataType.valueOf(metadatum.getKey().toString());
    Object expectedValue=metadatum.getValue();
    Object actualValue=resultMetadata == null ? null : resultMetadata.get(key);
    if (!expectedValue.equals(actualValue)) {
      log.info(String.format("Metadata mismatch for key '%s': expected '%s' but got '%s'",key,expectedValue,actualValue));
      return false;
    }
  }
  return true;
}
