{
  final Rect framingRect=CameraManager.get().getFramingRect();
  int framingWidth=framingRect.width();
  int framingHeight=framingRect.height();
  if (framingWidth > width || framingHeight > height) {
    throw new IllegalArgumentException();
  }
  int leftOffset=framingRect.left;
  int topOffset=framingRect.top;
  int[] colors=new int[framingWidth * framingHeight];
  for (int y=0; y < framingHeight; y++) {
    int rowOffset=(y + topOffset) * width + leftOffset;
    for (int x=0; x < framingWidth; x++) {
      int pixel=(int)data[rowOffset + x];
      pixel=0xff000000 + (pixel << 16) + (pixel << 8)+ pixel;
      colors[y * framingWidth + x]=pixel;
    }
  }
  Bitmap bitmap=Bitmap.createBitmap(colors,framingWidth,framingHeight,Bitmap.Config.ARGB_8888);
  OutputStream outStream=getNewPhotoOutputStream();
  if (outStream != null) {
    bitmap.compress(Bitmap.CompressFormat.PNG,100,outStream);
    try {
      outStream.close();
      Message message=Message.obtain(mActivity.mHandler,R.id.save_succeeded);
      message.sendToTarget();
      return;
    }
 catch (    IOException e) {
      Log.e(TAG,"Exception closing stream: " + e.toString());
    }
  }
  Message message=Message.obtain(mActivity.mHandler,R.id.save_failed);
  message.sendToTarget();
}
