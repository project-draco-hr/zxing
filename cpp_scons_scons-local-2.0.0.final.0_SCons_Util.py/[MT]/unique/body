def unique(s):
    'Return a list of the elements in s, but without duplicates.\n\n    For example, unique([1,2,3,1,2,3]) is some permutation of [1,2,3],\n    unique("abcabc") some permutation of ["a", "b", "c"], and\n    unique(([1, 2], [2, 3], [1, 2])) some permutation of\n    [[2, 3], [1, 2]].\n\n    For best speed, all sequence elements should be hashable.  Then\n    unique() will usually work in linear time.\n\n    If not possible, the sequence elements should enjoy a total\n    ordering, and if list(s).sort() doesn\'t raise TypeError it\'s\n    assumed that they do enjoy a total ordering.  Then unique() will\n    usually work in O(N*log2(N)) time.\n\n    If that\'s not possible either, the sequence elements must support\n    equality-testing.  Then unique() will usually work in quadratic\n    time.\n    '
    n = len(s)
    if (n == 0):
        return []
    u = {}
    try:
        for x in s:
            u[x] = 1
    except TypeError:
        pass
    else:
        return list(u.keys())
    del u
    try:
        t = sorted(s)
    except TypeError:
        pass
    else:
        assert (n > 0)
        last = t[0]
        lasti = i = 1
        while (i < n):
            if (t[i] != last):
                t[lasti] = last = t[i]
                lasti = (lasti + 1)
            i = (i + 1)
        return t[:lasti]
    del t
    u = []
    for x in s:
        if (x not in u):
            u.append(x)
    return u
