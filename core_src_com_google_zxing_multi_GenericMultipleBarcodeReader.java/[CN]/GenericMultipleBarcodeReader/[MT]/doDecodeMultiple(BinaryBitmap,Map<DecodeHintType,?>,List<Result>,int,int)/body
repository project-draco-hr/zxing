{
  Result result;
  try {
    result=delegate.decode(image,hints);
  }
 catch (  ReaderException ignored) {
    return;
  }
  boolean alreadyFound=false;
  for (  Result existingResult : results) {
    if (existingResult.getText().equals(result.getText())) {
      alreadyFound=true;
      break;
    }
  }
  if (!alreadyFound) {
    results.add(translateResultPoints(result,xOffset,yOffset));
  }
  ResultPoint[] resultPoints=result.getResultPoints();
  if (resultPoints == null || resultPoints.length == 0) {
    return;
  }
  int width=image.getWidth();
  int height=image.getHeight();
  float minX=width;
  float minY=height;
  float maxX=0.0f;
  float maxY=0.0f;
  for (  ResultPoint point : resultPoints) {
    float x=point.getX();
    float y=point.getY();
    if (x < minX) {
      minX=x;
    }
    if (y < minY) {
      minY=y;
    }
    if (x > maxX) {
      maxX=x;
    }
    if (y > maxY) {
      maxY=y;
    }
  }
  if (minX > MIN_DIMENSION_TO_RECUR) {
    doDecodeMultiple(image.crop(0,0,(int)minX,height),hints,results,xOffset,yOffset);
  }
  if (minY > MIN_DIMENSION_TO_RECUR) {
    doDecodeMultiple(image.crop(0,0,width,(int)minY),hints,results,xOffset,yOffset);
  }
  if (maxX < width - MIN_DIMENSION_TO_RECUR) {
    doDecodeMultiple(image.crop((int)maxX,0,width - (int)maxX,height),hints,results,xOffset + (int)maxX,yOffset);
  }
  if (maxY < height - MIN_DIMENSION_TO_RECUR) {
    doDecodeMultiple(image.crop(0,(int)maxY,width,height - (int)maxY),hints,results,xOffset,yOffset + (int)maxY);
  }
}
