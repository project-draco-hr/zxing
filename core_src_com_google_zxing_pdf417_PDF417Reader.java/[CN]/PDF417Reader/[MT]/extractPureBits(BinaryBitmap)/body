{
  BitMatrix matrix=image.getBlackMatrix();
  int height=matrix.getHeight();
  int width=matrix.getWidth();
  int minDimension=Math.min(height,width);
  int borderWidth=0;
  while (borderWidth < minDimension && !matrix.get(borderWidth,borderWidth)) {
    borderWidth++;
  }
  if (borderWidth == minDimension) {
    throw ReaderException.getInstance();
  }
  int moduleEnd=borderWidth;
  while (moduleEnd < minDimension && matrix.get(moduleEnd,moduleEnd)) {
    moduleEnd++;
  }
  if (moduleEnd == minDimension) {
    throw ReaderException.getInstance();
  }
  int moduleSize=moduleEnd - borderWidth;
  int rowEndOfSymbol=width - 1;
  while (rowEndOfSymbol >= 0 && !matrix.get(rowEndOfSymbol,borderWidth)) {
    rowEndOfSymbol--;
  }
  if (rowEndOfSymbol < 0) {
    throw ReaderException.getInstance();
  }
  rowEndOfSymbol++;
  if ((rowEndOfSymbol - borderWidth) % moduleSize != 0) {
    throw ReaderException.getInstance();
  }
  int dimension=(rowEndOfSymbol - borderWidth) / moduleSize;
  borderWidth+=moduleSize >> 1;
  int sampleDimension=borderWidth + (dimension - 1) * moduleSize;
  if (sampleDimension >= width || sampleDimension >= height) {
    throw ReaderException.getInstance();
  }
  BitMatrix bits=new BitMatrix(dimension);
  for (int y=0; y < dimension; y++) {
    int iOffset=borderWidth + y * moduleSize;
    for (int x=0; x < dimension; x++) {
      if (matrix.get(borderWidth + x * moduleSize,iOffset)) {
        bits.set(x,y);
      }
    }
  }
  return bits;
}
