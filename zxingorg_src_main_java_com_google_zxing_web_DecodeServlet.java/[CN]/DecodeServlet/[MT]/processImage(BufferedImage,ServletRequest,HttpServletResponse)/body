{
  LuminanceSource source=new BufferedImageLuminanceSource(image);
  BinaryBitmap bitmap=new BinaryBitmap(new GlobalHistogramBinarizer(source));
  Collection<Result> results=Lists.newArrayListWithCapacity(1);
  try {
    Reader reader=new MultiFormatReader();
    ReaderException savedException=null;
    try {
      MultipleBarcodeReader multiReader=new GenericMultipleBarcodeReader(reader);
      Result[] theResults=multiReader.decodeMultiple(bitmap,HINTS);
      if (theResults != null) {
        results.addAll(Arrays.asList(theResults));
      }
    }
 catch (    ReaderException re) {
      savedException=re;
    }
    if (results.isEmpty()) {
      try {
        Result theResult=reader.decode(bitmap,HINTS_PURE);
        if (theResult != null) {
          results.add(theResult);
        }
      }
 catch (      ReaderException re) {
        savedException=re;
      }
    }
    if (results.isEmpty()) {
      try {
        Result theResult=reader.decode(bitmap,HINTS);
        if (theResult != null) {
          results.add(theResult);
        }
      }
 catch (      ReaderException re) {
        savedException=re;
      }
    }
    if (results.isEmpty()) {
      try {
        BinaryBitmap hybridBitmap=new BinaryBitmap(new HybridBinarizer(source));
        Result theResult=reader.decode(hybridBitmap,HINTS);
        if (theResult != null) {
          results.add(theResult);
        }
      }
 catch (      ReaderException re) {
        savedException=re;
      }
    }
    if (results.isEmpty()) {
      handleException(savedException,response);
      return;
    }
  }
 catch (  RuntimeException re) {
    log.log(Level.WARNING,"Unexpected exception from library",re);
    throw new ServletException(re);
  }
  String fullParameter=request.getParameter("full");
  boolean minimalOutput=fullParameter != null && !Boolean.parseBoolean(fullParameter);
  if (minimalOutput) {
    response.setContentType(MediaType.PLAIN_TEXT_UTF_8.toString());
    response.setCharacterEncoding(StandardCharsets.UTF_8.name());
    try (Writer out=new OutputStreamWriter(response.getOutputStream(),StandardCharsets.UTF_8)){
      for (      Result result : results) {
        out.write(result.getText());
        out.write('\n');
      }
    }
   }
 else {
    request.setAttribute("results",results);
    request.getRequestDispatcher("decoderesult.jspx").forward(request,response);
  }
}
