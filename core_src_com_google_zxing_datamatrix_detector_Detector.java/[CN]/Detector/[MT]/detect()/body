{
  ResultPoint[] cornerPoints=rectangleDetector.detect();
  ResultPoint pointA=cornerPoints[0];
  ResultPoint pointB=cornerPoints[1];
  ResultPoint pointC=cornerPoints[2];
  ResultPoint pointD=cornerPoints[3];
  Vector transitions=new Vector(4);
  transitions.addElement(transitionsBetween(pointA,pointB));
  transitions.addElement(transitionsBetween(pointA,pointC));
  transitions.addElement(transitionsBetween(pointB,pointD));
  transitions.addElement(transitionsBetween(pointC,pointD));
  Collections.insertionSort(transitions,new ResultPointsAndTransitionsComparator());
  ResultPointsAndTransitions lSideOne=(ResultPointsAndTransitions)transitions.elementAt(0);
  ResultPointsAndTransitions lSideTwo=(ResultPointsAndTransitions)transitions.elementAt(1);
  Hashtable pointCount=new Hashtable();
  increment(pointCount,lSideOne.getFrom());
  increment(pointCount,lSideOne.getTo());
  increment(pointCount,lSideTwo.getFrom());
  increment(pointCount,lSideTwo.getTo());
  ResultPoint maybeTopLeft=null;
  ResultPoint bottomLeft=null;
  ResultPoint maybeBottomRight=null;
  Enumeration points=pointCount.keys();
  while (points.hasMoreElements()) {
    ResultPoint point=(ResultPoint)points.nextElement();
    Integer value=(Integer)pointCount.get(point);
    if (value.intValue() == 2) {
      bottomLeft=point;
    }
 else {
      if (maybeTopLeft == null) {
        maybeTopLeft=point;
      }
 else {
        maybeBottomRight=point;
      }
    }
  }
  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {
    throw NotFoundException.getNotFoundInstance();
  }
  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};
  ResultPoint.orderBestPatterns(corners);
  ResultPoint bottomRight=corners[0];
  bottomLeft=corners[1];
  ResultPoint topLeft=corners[2];
  ResultPoint topRight;
  if (!pointCount.containsKey(pointA)) {
    topRight=pointA;
  }
 else   if (!pointCount.containsKey(pointB)) {
    topRight=pointB;
  }
 else   if (!pointCount.containsKey(pointC)) {
    topRight=pointC;
  }
 else {
    topRight=pointD;
  }
  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();
  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();
  if ((dimensionTop & 0x01) == 1) {
    dimensionTop++;
  }
  dimensionTop+=2;
  if ((dimensionRight & 0x01) == 1) {
    dimensionRight++;
  }
  dimensionRight+=2;
  BitMatrix bits;
  ResultPoint correctedTopRight;
  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {
    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);
    if (correctedTopRight == null) {
      correctedTopRight=topRight;
    }
    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();
    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();
    if ((dimensionTop & 0x01) == 1) {
      dimensionTop++;
    }
    if ((dimensionRight & 0x01) == 1) {
      dimensionRight++;
    }
    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);
  }
 else {
    int dimension=Math.min(dimensionRight,dimensionTop);
    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);
    if (correctedTopRight == null) {
      correctedTopRight=topRight;
    }
    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());
    dimensionCorrected++;
    if ((dimensionCorrected & 0x01) == 1) {
      dimensionCorrected++;
    }
    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);
  }
  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});
}
