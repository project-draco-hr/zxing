{
  List<List<Map<Integer,Integer>>> votes=new ArrayList<List<Map<Integer,Integer>>>();
  votes.add(new ArrayList<Map<Integer,Integer>>());
  resize2(votes.get(0),symbolsPerLine);
  int currentRow=0;
  Map<Integer,Integer> clusterNumberVotes=new HashMap<Integer,Integer>();
  int lastLineClusterNumber=-1;
  for (int y=0; y < codewords.length; y++) {
    clusterNumberVotes.clear();
    for (int i=0; i < codewords[y].length; i++) {
      if (clusterNumbers[y][i] != -1) {
        clusterNumberVotes.put(clusterNumbers[y][i],defaultValue(clusterNumberVotes.get(clusterNumbers[y][i]),0) + 1);
      }
    }
    if (!clusterNumberVotes.isEmpty()) {
      VoteResult voteResult=getValueWithMaxVotes(clusterNumberVotes);
      boolean lineClusterNumberIsIndecisive=voteResult.isIndecisive();
      int lineClusterNumber=voteResult.getVote();
      if (lineClusterNumberIsIndecisive) {
        lineClusterNumber=lastLineClusterNumber;
      }
      if ((lineClusterNumber != ((lastLineClusterNumber + 3) % 9)) && (lastLineClusterNumber != -1)) {
        lineClusterNumber=lastLineClusterNumber;
      }
      if ((lineClusterNumber == 0 && lastLineClusterNumber == -1) || (lastLineClusterNumber != -1)) {
        if ((lineClusterNumber == ((lastLineClusterNumber + 3) % 9)) && (lastLineClusterNumber != -1)) {
          currentRow++;
          if (votes.size() < currentRow + 1) {
            resize1(votes,currentRow + 1);
            resize2(votes.get(currentRow),symbolsPerLine);
          }
        }
        if ((lineClusterNumber == ((lastLineClusterNumber + 6) % 9)) && (lastLineClusterNumber != -1)) {
          currentRow+=2;
          if (votes.size() < currentRow + 1) {
            resize1(votes,currentRow + 1);
            resize2(votes.get(currentRow),symbolsPerLine);
          }
        }
        for (int i=0; i < codewords[y].length; i++) {
          if (clusterNumbers[y][i] != -1) {
            if (clusterNumbers[y][i] == lineClusterNumber) {
              Map<Integer,Integer> votesMap=votes.get(currentRow).get(i);
              votesMap.put(codewords[y][i],defaultValue(votesMap.get(codewords[y][i]),0) + 1);
            }
 else             if (clusterNumbers[y][i] == ((lineClusterNumber + 3) % 9)) {
              if (votes.size() < currentRow + 2) {
                resize1(votes,currentRow + 2);
                resize2(votes.get(currentRow + 1),symbolsPerLine);
              }
              Map<Integer,Integer> votesMap=votes.get(currentRow + 1).get(i);
              votesMap.put(codewords[y][i],defaultValue(votesMap.get(codewords[y][i]),0) + 1);
            }
 else             if ((clusterNumbers[y][i] == ((lineClusterNumber + 6) % 9)) && (currentRow > 0)) {
              Map<Integer,Integer> votesMap=votes.get(currentRow - 1).get(i);
              votesMap.put(codewords[y][i],defaultValue(votesMap.get(codewords[y][i]),0) + 1);
            }
          }
        }
        lastLineClusterNumber=lineClusterNumber;
      }
    }
  }
  return votes;
}
