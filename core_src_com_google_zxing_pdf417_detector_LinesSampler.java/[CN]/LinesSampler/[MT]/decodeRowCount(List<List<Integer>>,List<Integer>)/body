{
  insertLinesAt.clear();
  Map<Integer,Integer> rowCountVotes=new HashMap<Integer,Integer>();
  Map<Integer,Integer> ecLevelVotes=new HashMap<Integer,Integer>();
  Map<Integer,Integer> rowNumberVotes=new HashMap<Integer,Integer>();
  int lastRowNumber=-1;
  for (int i=0; i + 2 < detectedCodeWords.size(); i+=3) {
    rowNumberVotes.clear();
    int firstCodewordDecodedLeft=-1;
    if (detectedCodeWords.get(i).get(0) != 0) {
      firstCodewordDecodedLeft=BitMatrixParser.getCodeword(detectedCodeWords.get(i).get(0));
    }
    int secondCodewordDecodedLeft=-1;
    if (detectedCodeWords.get(i + 1).get(0) != 0) {
      secondCodewordDecodedLeft=BitMatrixParser.getCodeword(detectedCodeWords.get(i + 1).get(0));
    }
    int thirdCodewordDecodedLeft=-1;
    if (detectedCodeWords.get(i + 2).get(0) != 0) {
      thirdCodewordDecodedLeft=BitMatrixParser.getCodeword(detectedCodeWords.get(i + 2).get(0));
    }
    int firstCodewordDecodedRight=-1;
    if (detectedCodeWords.get(i).get(detectedCodeWords.get(i).size() - 1) != 0) {
      firstCodewordDecodedRight=BitMatrixParser.getCodeword(detectedCodeWords.get(i).get(detectedCodeWords.get(i).size() - 1));
    }
    int secondCodewordDecodedRight=-1;
    if (detectedCodeWords.get(i + 1).get(detectedCodeWords.get(i + 1).size() - 1) != 0) {
      secondCodewordDecodedRight=BitMatrixParser.getCodeword(detectedCodeWords.get(i + 1).get(detectedCodeWords.get(i + 1).size() - 1));
    }
    int thirdCodewordDecodedRight=-1;
    if (detectedCodeWords.get(i + 2).get(detectedCodeWords.get(i + 2).size() - 1) != 0) {
      thirdCodewordDecodedRight=BitMatrixParser.getCodeword(detectedCodeWords.get(i + 2).get(detectedCodeWords.get(i + 2).size() - 1));
    }
    if (firstCodewordDecodedLeft != -1 && secondCodewordDecodedLeft != -1) {
      int leftRowCount=((firstCodewordDecodedLeft % 30) * 3) + ((secondCodewordDecodedLeft % 30) % 3);
      int leftECLevel=(secondCodewordDecodedLeft % 30) / 3;
      rowCountVotes.put(leftRowCount,defaultValue(rowCountVotes.get(leftRowCount),0) + 1);
      ecLevelVotes.put(leftECLevel,defaultValue(ecLevelVotes.get(leftECLevel),0) + 1);
    }
    if (secondCodewordDecodedRight != -1 && thirdCodewordDecodedRight != -1) {
      int rightRowCount=((secondCodewordDecodedRight % 30) * 3) + ((thirdCodewordDecodedRight % 30) % 3);
      int rightECLevel=(thirdCodewordDecodedRight % 30) / 3;
      rowCountVotes.put(rightRowCount,defaultValue(rowCountVotes.get(rightRowCount),0) + 1);
      ecLevelVotes.put(rightECLevel,defaultValue(ecLevelVotes.get(rightECLevel),0) + 1);
    }
    if (firstCodewordDecodedLeft != -1) {
      int rowNumber=firstCodewordDecodedLeft / 30;
      rowNumberVotes.put(rowNumber,defaultValue(rowNumberVotes.get(rowNumber),0) + 1);
    }
    if (secondCodewordDecodedLeft != -1) {
      int rowNumber=secondCodewordDecodedLeft / 30;
      rowNumberVotes.put(rowNumber,defaultValue(rowNumberVotes.get(rowNumber),0) + 1);
    }
    if (thirdCodewordDecodedLeft != -1) {
      int rowNumber=thirdCodewordDecodedLeft / 30;
      rowNumberVotes.put(rowNumber,defaultValue(rowNumberVotes.get(rowNumber),0) + 1);
    }
    if (firstCodewordDecodedRight != -1) {
      int rowNumber=firstCodewordDecodedRight / 30;
      rowNumberVotes.put(rowNumber,defaultValue(rowNumberVotes.get(rowNumber),0) + 1);
    }
    if (secondCodewordDecodedRight != -1) {
      int rowNumber=secondCodewordDecodedRight / 30;
      rowNumberVotes.put(rowNumber,defaultValue(rowNumberVotes.get(rowNumber),0) + 1);
    }
    if (thirdCodewordDecodedRight != -1) {
      int rowNumber=thirdCodewordDecodedRight / 30;
      rowNumberVotes.put(rowNumber,defaultValue(rowNumberVotes.get(rowNumber),0) + 1);
    }
    int rowNumber=getValueWithMaxVotes(rowNumberVotes).getVote();
    if (lastRowNumber + 1 < rowNumber) {
      for (int j=lastRowNumber + 1; j < rowNumber; j++) {
        insertLinesAt.add(i);
        insertLinesAt.add(i);
        insertLinesAt.add(i);
      }
    }
    lastRowNumber=rowNumber;
  }
  for (int i=0; i < insertLinesAt.size(); i++) {
    List<Integer> v=new ArrayList<Integer>();
    for (int j=0; j < symbolsPerLine; ++j) {
      v.add(0);
    }
    detectedCodeWords.add(insertLinesAt.get(i) + i,v);
  }
  int rowCount=getValueWithMaxVotes(rowCountVotes).getVote();
  rowCount+=1;
  return rowCount;
}
