{
  List<Float> symbolWidths=findSymbolWidths();
  int[][] codewords=new int[linesMatrix.getHeight()][];
  int[][] clusterNumbers=new int[linesMatrix.getHeight()][];
  linesMatrixToCodewords(codewords,clusterNumbers,symbolWidths);
  List<List<Map<Integer,Integer>>> votes=distributeVotes(codewords,clusterNumbers);
  List<List<Integer>> detectedCodeWords=new ArrayList<List<Integer>>();
  resize3(detectedCodeWords,votes.size());
  for (int i=0; i < votes.size(); i++) {
    resize4(detectedCodeWords.get(i),votes.get(i).size());
    for (int j=0; j < votes.get(i).size(); j++) {
      if (!votes.get(i).get(j).isEmpty()) {
        detectedCodeWords.get(i).set(j,getValueWithMaxVotes(votes.get(i).get(j)).getVote());
      }
    }
  }
  List<Integer> insertLinesAt=findMissingLines(detectedCodeWords);
  int rowCount=decodeRowCount(detectedCodeWords,insertLinesAt);
  resize3(detectedCodeWords,rowCount);
  return codewordsToBitMatrix(detectedCodeWords,dimension,detectedCodeWords.size());
}
