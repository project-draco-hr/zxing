def CheckTypeSize(context, type_name, header=None, language=None, expect=None):
    "This check can be used to get the size of a given type, or to check whether\n    the type is of expected size.\n\n    Arguments:\n        - type : str\n            the type to check\n        - includes : sequence\n            list of headers to include in the test code before testing the type\n        - language : str\n            'C' or 'C++'\n        - expect : int\n            if given, will test wether the type has the given number of bytes.\n            If not given, will automatically find the size.\n\n        Returns:\n            status : int\n                0 if the check failed, or the found size of the type if the check succeeded."
    if context.headerfilename:
        includetext = ('#include "%s"' % context.headerfilename)
    else:
        includetext = ''
    if (not header):
        header = ''
    (lang, suffix, msg) = _lang2suffix(language)
    if msg:
        context.Display(('Cannot check for %s type: %s\n' % (type_name, msg)))
        return msg
    src = (includetext + header)
    if (not (expect is None)):
        context.Display(('Checking %s is %d bytes... ' % (type_name, expect)))
        src = (src + '\ntypedef %s scons_check_type;\n\nint main()\n{\n    static int test_array[1 - 2 * !(((long int) (sizeof(scons_check_type))) == %d)];\n    test_array[0] = 0;\n\n    return 0;\n}\n')
        st = context.CompileProg((src % (type_name, expect)), suffix)
        if (not st):
            context.Display('yes\n')
            _Have(context, ('SIZEOF_%s' % type_name), expect, ("The size of `%s', as computed by sizeof." % type_name))
            return expect
        else:
            context.Display('no\n')
            _LogFailed(context, src, st)
            return 0
    else:
        context.Message(('Checking size of %s ... ' % type_name))
        src = (((src + '\n#include <stdlib.h>\n#include <stdio.h>\nint main() {\n    printf("%d", (int)sizeof(') + type_name) + '));\n    return 0;\n}\n    ')
        (st, out) = context.RunProg(src, suffix)
        try:
            size = int(out)
        except ValueError:
            st = 1
            size = 0
        if (not st):
            context.Display('yes\n')
            _Have(context, ('SIZEOF_%s' % type_name), size, ("The size of `%s', as computed by sizeof." % type_name))
            return size
        else:
            context.Display('no\n')
            _LogFailed(context, src, st)
            return 0
    return 0
