def CheckDeclaration(context, symbol, includes=None, language=None):
    'Checks whether symbol is declared.\n\n    Use the same test as autoconf, that is test whether the symbol is defined\n    as a macro or can be used as an r-value.\n\n    Arguments:\n        symbol : str\n            the symbol to check\n        includes : str\n            Optional "header" can be defined to include a header file.\n        language : str\n            only C and C++ supported.\n\n    Returns:\n        status : bool\n            True if the check failed, False if succeeded.'
    if context.headerfilename:
        includetext = ('#include "%s"' % context.headerfilename)
    else:
        includetext = ''
    if (not includes):
        includes = ''
    (lang, suffix, msg) = _lang2suffix(language)
    if msg:
        context.Display(('Cannot check for declaration %s: %s\n' % (type_name, msg)))
        return msg
    src = (includetext + includes)
    context.Display(('Checking whether %s is declared... ' % symbol))
    src = (src + ('\nint main()\n{\n#ifndef %s\n    (void) %s;\n#endif\n    ;\n    return 0;\n}\n' % (symbol, symbol)))
    st = context.CompileProg(src, suffix)
    _YesNoResult(context, st, ('HAVE_DECL_' + symbol), src, ('Set to 1 if %s is defined.' % symbol))
    return st
