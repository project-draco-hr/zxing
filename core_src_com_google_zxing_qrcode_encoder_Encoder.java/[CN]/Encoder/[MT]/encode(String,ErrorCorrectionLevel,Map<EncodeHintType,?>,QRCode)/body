{
  String encoding=hints == null ? null : (String)hints.get(EncodeHintType.CHARACTER_SET);
  if (encoding == null) {
    encoding=DEFAULT_BYTE_MODE_ENCODING;
  }
  Mode mode=chooseMode(content,encoding);
  BitArray dataBits=new BitArray();
  if (mode == Mode.BYTE && !DEFAULT_BYTE_MODE_ENCODING.equals(encoding)) {
    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding);
    if (eci != null) {
      appendECI(eci,dataBits);
    }
  }
  appendBytes(content,mode,dataBits,encoding);
  int numInputBits=dataBits.getSize();
  initQRCode(numInputBits,ecLevel,mode,qrCode);
  BitArray headerAndDataBits=new BitArray();
  appendModeInfo(mode,headerAndDataBits);
  int numLetters=mode == Mode.BYTE ? dataBits.getSizeInBytes() : content.length();
  appendLengthInfo(numLetters,qrCode.getVersion(),mode,headerAndDataBits);
  headerAndDataBits.appendBitArray(dataBits);
  terminateBits(qrCode.getNumDataBytes(),headerAndDataBits);
  BitArray finalBits=new BitArray();
  interleaveWithECBytes(headerAndDataBits,qrCode.getNumTotalBytes(),qrCode.getNumDataBytes(),qrCode.getNumRSBlocks(),finalBits);
  ByteMatrix matrix=new ByteMatrix(qrCode.getMatrixWidth(),qrCode.getMatrixWidth());
  qrCode.setMaskPattern(chooseMaskPattern(finalBits,ecLevel,qrCode.getVersion(),matrix));
  MatrixUtil.buildMatrix(finalBits,ecLevel,qrCode.getVersion(),qrCode.getMaskPattern(),matrix);
  qrCode.setMatrix(matrix);
  if (!qrCode.isValid()) {
    throw new WriterException("Invalid QR code: " + qrCode.toString());
  }
}
