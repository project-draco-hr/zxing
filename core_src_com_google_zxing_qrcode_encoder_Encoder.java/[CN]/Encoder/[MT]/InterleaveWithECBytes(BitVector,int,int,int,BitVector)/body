{
  if (bits.sizeInBytes() != num_data_bytes) {
    throw new WriterException("Number of bits and data bytes does not match");
  }
  int data_bytes_offset=0;
  int max_num_data_bytes=0;
  int max_num_ec_bytes=0;
  Vector blocks=new Vector(num_rs_blocks);
  for (int i=0; i < num_rs_blocks; ++i) {
    int[] num_data_bytes_in_block=new int[1];
    int[] num_ec_bytes_in_block=new int[1];
    GetNumDataBytesAndNumECBytesForBlockID(num_total_bytes,num_data_bytes,num_rs_blocks,i,num_data_bytes_in_block,num_ec_bytes_in_block);
    ByteArray data_bytes=new ByteArray();
    data_bytes.set(bits.getArray(),data_bytes_offset,num_data_bytes_in_block[0]);
    ByteArray ec_bytes=GenerateECBytes(data_bytes,num_ec_bytes_in_block[0]);
    blocks.addElement(new BlockPair(data_bytes,ec_bytes));
    max_num_data_bytes=Math.max(max_num_data_bytes,data_bytes.size());
    max_num_ec_bytes=Math.max(max_num_ec_bytes,ec_bytes.size());
    data_bytes_offset+=num_data_bytes_in_block[0];
  }
  if (num_data_bytes != data_bytes_offset) {
    throw new WriterException("Data bytes does not match offset");
  }
  for (int i=0; i < max_num_data_bytes; ++i) {
    for (int j=0; j < blocks.size(); ++j) {
      final ByteArray data_bytes=((BlockPair)blocks.elementAt(j)).getDataBytes();
      if (i < data_bytes.size()) {
        result.appendBits(data_bytes.at(i),8);
      }
    }
  }
  for (int i=0; i < max_num_ec_bytes; ++i) {
    for (int j=0; j < blocks.size(); ++j) {
      final ByteArray ec_bytes=((BlockPair)blocks.elementAt(j)).getErrorCorrectionBytes();
      if (i < ec_bytes.size()) {
        result.appendBits(ec_bytes.at(i),8);
      }
    }
  }
  if (num_total_bytes != result.sizeInBytes()) {
    throw new WriterException("Interleaving error: " + num_total_bytes + " and "+ result.sizeInBytes()+ " differ.");
  }
}
