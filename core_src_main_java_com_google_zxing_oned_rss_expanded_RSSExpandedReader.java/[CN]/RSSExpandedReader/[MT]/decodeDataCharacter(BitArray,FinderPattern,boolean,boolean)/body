{
  int[] counters=this.getDataCharacterCounters();
  counters[0]=0;
  counters[1]=0;
  counters[2]=0;
  counters[3]=0;
  counters[4]=0;
  counters[5]=0;
  counters[6]=0;
  counters[7]=0;
  if (leftChar) {
    recordPatternInReverse(row,pattern.getStartEnd()[0],counters);
  }
 else {
    recordPattern(row,pattern.getStartEnd()[1],counters);
    for (int i=0, j=counters.length - 1; i < j; i++, j--) {
      int temp=counters[i];
      counters[i]=counters[j];
      counters[j]=temp;
    }
  }
  int numModules=17;
  float elementWidth=MathUtils.sum(counters) / (float)numModules;
  float expectedElementWidth=(pattern.getStartEnd()[1] - pattern.getStartEnd()[0]) / 15.0f;
  if (Math.abs(elementWidth - expectedElementWidth) / expectedElementWidth > 0.3f) {
    throw NotFoundException.getNotFoundInstance();
  }
  int[] oddCounts=this.getOddCounts();
  int[] evenCounts=this.getEvenCounts();
  float[] oddRoundingErrors=this.getOddRoundingErrors();
  float[] evenRoundingErrors=this.getEvenRoundingErrors();
  for (int i=0; i < counters.length; i++) {
    float value=1.0f * counters[i] / elementWidth;
    int count=(int)(value + 0.5f);
    if (count < 1) {
      if (value < 0.3f) {
        throw NotFoundException.getNotFoundInstance();
      }
      count=1;
    }
 else     if (count > 8) {
      if (value > 8.7f) {
        throw NotFoundException.getNotFoundInstance();
      }
      count=8;
    }
    int offset=i / 2;
    if ((i & 0x01) == 0) {
      oddCounts[offset]=count;
      oddRoundingErrors[offset]=value - count;
    }
 else {
      evenCounts[offset]=count;
      evenRoundingErrors[offset]=value - count;
    }
  }
  adjustOddEvenCounts(numModules);
  int weightRowNumber=4 * pattern.getValue() + (isOddPattern ? 0 : 2) + (leftChar ? 0 : 1) - 1;
  int oddSum=0;
  int oddChecksumPortion=0;
  for (int i=oddCounts.length - 1; i >= 0; i--) {
    if (isNotA1left(pattern,isOddPattern,leftChar)) {
      int weight=WEIGHTS[weightRowNumber][2 * i];
      oddChecksumPortion+=oddCounts[i] * weight;
    }
    oddSum+=oddCounts[i];
  }
  int evenChecksumPortion=0;
  for (int i=evenCounts.length - 1; i >= 0; i--) {
    if (isNotA1left(pattern,isOddPattern,leftChar)) {
      int weight=WEIGHTS[weightRowNumber][2 * i + 1];
      evenChecksumPortion+=evenCounts[i] * weight;
    }
  }
  int checksumPortion=oddChecksumPortion + evenChecksumPortion;
  if ((oddSum & 0x01) != 0 || oddSum > 13 || oddSum < 4) {
    throw NotFoundException.getNotFoundInstance();
  }
  int group=(13 - oddSum) / 2;
  int oddWidest=SYMBOL_WIDEST[group];
  int evenWidest=9 - oddWidest;
  int vOdd=RSSUtils.getRSSvalue(oddCounts,oddWidest,true);
  int vEven=RSSUtils.getRSSvalue(evenCounts,evenWidest,false);
  int tEven=EVEN_TOTAL_SUBSET[group];
  int gSum=GSUM[group];
  int value=vOdd * tEven + vEven + gSum;
  return new DataCharacter(value,checksumPortion);
}
