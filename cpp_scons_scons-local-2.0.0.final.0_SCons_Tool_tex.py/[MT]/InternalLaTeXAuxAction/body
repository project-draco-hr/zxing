def InternalLaTeXAuxAction(XXXLaTeXAction, target=None, source=None, env=None):
    'A builder for LaTeX files that checks the output in the aux file\n    and decides how many times to use LaTeXAction, and BibTeXAction.'
    global must_rerun_latex
    if (XXXLaTeXAction == LaTeXAction):
        callerSuffix = '.dvi'
    else:
        callerSuffix = env['PDFSUFFIX']
    basename = SCons.Util.splitext(str(source[0]))[0]
    basedir = os.path.split(str(source[0]))[0]
    basefile = os.path.split(str(basename))[1]
    abspath = os.path.abspath(basedir)
    targetext = os.path.splitext(str(target[0]))[1]
    targetdir = os.path.split(str(target[0]))[0]
    saved_env = {}
    for var in SCons.Scanner.LaTeX.LaTeX.env_variables:
        saved_env[var] = modify_env_var(env, var, abspath)
    targetbase = os.path.join(targetdir, basefile)
    src_content = source[0].get_text_contents()
    run_makeindex = (makeindex_re.search(src_content) and (not os.path.exists((targetbase + '.idx'))))
    run_nomenclature = (makenomenclature_re.search(src_content) and (not os.path.exists((targetbase + '.nlo'))))
    run_glossary = (makeglossary_re.search(src_content) and (not os.path.exists((targetbase + '.glo'))))
    run_glossaries = (makeglossaries_re.search(src_content) and (not os.path.exists((targetbase + '.glo'))))
    run_acronyms = (makeacronyms_re.search(src_content) and (not os.path.exists((targetbase + '.acn'))))
    saved_hashes = {}
    suffix_nodes = {}
    for suffix in all_suffixes:
        theNode = env.fs.File((targetbase + suffix))
        suffix_nodes[suffix] = theNode
        saved_hashes[suffix] = theNode.get_csig()
    if Verbose:
        print 'hashes: ', saved_hashes
    must_rerun_latex = True

    def check_MD5(filenode, suffix):
        global must_rerun_latex
        filenode.clear_memoized_values()
        filenode.ninfo = filenode.new_ninfo()
        new_md5 = filenode.get_csig()
        if (saved_hashes[suffix] == new_md5):
            if Verbose:
                print ('file %s not changed' % (targetbase + suffix))
            return False
        saved_hashes[suffix] = new_md5
        must_rerun_latex = True
        if Verbose:
            print ('file %s changed, rerunning Latex, new hash = ' % (targetbase + suffix)), new_md5
        return True
    resultfilename = (targetbase + callerSuffix)
    count = 0
    while (must_rerun_latex and (count < int(env.subst('$LATEXRETRIES')))):
        result = XXXLaTeXAction(target, source, env)
        if (result != 0):
            return result
        count = (count + 1)
        must_rerun_latex = False
        logfilename = (targetbase + '.log')
        logContent = ''
        if os.path.exists(logfilename):
            logContent = open(logfilename, 'rb').read()
        flsfilename = (targetbase + '.fls')
        flsContent = ''
        auxfiles = []
        if os.path.exists(flsfilename):
            flsContent = open(flsfilename, 'rb').read()
            auxfiles = openout_aux_re.findall(flsContent)
        if Verbose:
            print 'auxfiles ', auxfiles
        if (count == 1):
            for auxfilename in auxfiles:
                target_aux = os.path.join(targetdir, auxfilename)
                if os.path.exists(target_aux):
                    content = open(target_aux, 'rb').read()
                    if (content.find('bibdata') != (-1)):
                        if Verbose:
                            print 'Need to run bibtex'
                        bibfile = env.fs.File(targetbase)
                        result = BibTeXAction(bibfile, bibfile, env)
                        if (result != 0):
                            check_file_error_message(env['BIBTEX'], 'blg')
                            return result
                        must_rerun_latex = check_MD5(suffix_nodes['.bbl'], '.bbl')
                        break
        if (check_MD5(suffix_nodes['.idx'], '.idx') or ((count == 1) and run_makeindex)):
            if Verbose:
                print 'Need to run makeindex'
            idxfile = suffix_nodes['.idx']
            result = MakeIndexAction(idxfile, idxfile, env)
            if (result != 0):
                check_file_error_message(env['MAKEINDEX'], 'ilg')
                return result
        for index in check_suffixes:
            check_MD5(suffix_nodes[index], index)
        if (check_MD5(suffix_nodes['.nlo'], '.nlo') or ((count == 1) and run_nomenclature)):
            if Verbose:
                print 'Need to run makeindex for nomenclature'
            nclfile = suffix_nodes['.nlo']
            result = MakeNclAction(nclfile, nclfile, env)
            if (result != 0):
                check_file_error_message(('%s (nomenclature)' % env['MAKENCL']), 'nlg')
        if (check_MD5(suffix_nodes['.glo'], '.glo') or ((count == 1) and run_glossaries) or ((count == 1) and run_glossary)):
            if Verbose:
                print 'Need to run makeindex for glossary'
            glofile = suffix_nodes['.glo']
            result = MakeGlossaryAction(glofile, glofile, env)
            if (result != 0):
                check_file_error_message(('%s (glossary)' % env['MAKEGLOSSARY']), 'glg')
        if (check_MD5(suffix_nodes['.acn'], '.acn') or ((count == 1) and run_acronyms)):
            if Verbose:
                print 'Need to run makeindex for acronyms'
            acrfile = suffix_nodes['.acn']
            result = MakeAcronymsAction(acrfile, acrfile, env)
            if (result != 0):
                check_file_error_message(('%s (acronyms)' % env['MAKEACRONYMS']), 'alg')
                return result
        if warning_rerun_re.search(logContent):
            must_rerun_latex = True
            if Verbose:
                print 'rerun Latex due to latex or package rerun warning'
        if rerun_citations_re.search(logContent):
            must_rerun_latex = True
            if Verbose:
                print "rerun Latex due to 'Rerun to get citations correct' warning"
        if undefined_references_re.search(logContent):
            must_rerun_latex = True
            if Verbose:
                print 'rerun Latex due to undefined references or citations'
        if ((count >= int(env.subst('$LATEXRETRIES'))) and must_rerun_latex):
            print 'reached max number of retries on Latex ,', int(env.subst('$LATEXRETRIES'))
    if (not ((str(target[0]) == resultfilename) and os.path.exists(resultfilename))):
        if os.path.exists(resultfilename):
            print ('move %s to %s' % (resultfilename, str(target[0])))
            shutil.move(resultfilename, str(target[0]))
    for var in SCons.Scanner.LaTeX.LaTeX.env_variables:
        if (var == 'TEXPICTS'):
            continue
        if (saved_env[var] is _null):
            try:
                del env['ENV'][var]
            except KeyError:
                pass
        else:
            env['ENV'][var] = saved_env[var]
    return result
