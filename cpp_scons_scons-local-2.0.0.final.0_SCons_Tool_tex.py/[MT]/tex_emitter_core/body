def tex_emitter_core(target, source, env, graphics_extensions):
    'An emitter for TeX and LaTeX sources.\n    For LaTeX sources we try and find the common created files that\n    are needed on subsequent runs of latex to finish tables of contents,\n    bibliographies, indices, lists of figures, and hyperlink references.\n    '
    basename = SCons.Util.splitext(str(source[0]))[0]
    basefile = os.path.split(str(basename))[1]
    targetdir = os.path.split(str(target[0]))[0]
    targetbase = os.path.join(targetdir, basefile)
    basedir = os.path.split(str(source[0]))[0]
    abspath = os.path.abspath(basedir)
    target[0].attributes.path = abspath
    emit_suffixes = (['.aux', '.log', '.ilg', '.blg', '.nls', '.nlg', '.gls', '.glg', '.alg'] + all_suffixes)
    auxfilename = (targetbase + '.aux')
    logfilename = (targetbase + '.log')
    flsfilename = (targetbase + '.fls')
    env.SideEffect(auxfilename, target[0])
    env.SideEffect(logfilename, target[0])
    env.SideEffect(flsfilename, target[0])
    if Verbose:
        print 'side effect :', auxfilename, logfilename, flsfilename
    env.Clean(target[0], auxfilename)
    env.Clean(target[0], logfilename)
    env.Clean(target[0], flsfilename)
    content = source[0].get_text_contents()
    idx_exists = os.path.exists((targetbase + '.idx'))
    nlo_exists = os.path.exists((targetbase + '.nlo'))
    glo_exists = os.path.exists((targetbase + '.glo'))
    acr_exists = os.path.exists((targetbase + '.acn'))
    file_tests_search = [auxfile_re, makeindex_re, bibliography_re, tableofcontents_re, listoffigures_re, listoftables_re, hyperref_re, makenomenclature_re, makeglossary_re, makeglossaries_re, makeacronyms_re, beamer_re]
    file_tests_suff = [['.aux'], ['.idx', '.ind', '.ilg'], ['.bbl', '.blg'], ['.toc'], ['.lof'], ['.lot'], ['.out'], ['.nlo', '.nls', '.nlg'], ['.glo', '.gls', '.glg'], ['.glo', '.gls', '.glg'], ['.acn', '.acr', '.alg'], ['.nav', '.snm', '.out', '.toc']]
    file_tests = []
    for i in range(len(file_tests_search)):
        file_tests.append([None, file_tests_suff[i]])
    savedpath = modify_env_var(env, 'TEXINPUTS', abspath)
    paths = env['ENV']['TEXINPUTS']
    if SCons.Util.is_List(paths):
        pass
    else:
        paths = paths.split(os.pathsep)
    if (savedpath is _null):
        try:
            del env['ENV']['TEXINPUTS']
        except KeyError:
            pass
    else:
        env['ENV']['TEXINPUTS'] = savedpath
    if Verbose:
        print 'search path ', paths
    aux_files = []
    file_tests = ScanFiles(source[0], target, paths, file_tests, file_tests_search, env, graphics_extensions, targetdir, aux_files)
    for (theSearch, suffix_list) in file_tests:
        if theSearch:
            for suffix in suffix_list:
                env.SideEffect((targetbase + suffix), target[0])
                if Verbose:
                    print 'side effect :', (targetbase + suffix)
                env.Clean(target[0], (targetbase + suffix))
    for aFile in aux_files:
        aFile_base = SCons.Util.splitext(aFile)[0]
        env.SideEffect((aFile_base + '.aux'), target[0])
        if Verbose:
            print 'side effect :', (aFile_base + '.aux')
        env.Clean(target[0], (aFile_base + '.aux'))
    if os.path.exists(flsfilename):
        content = open(flsfilename, 'rb').read()
        out_files = openout_re.findall(content)
        myfiles = [auxfilename, logfilename, flsfilename, (targetbase + '.dvi'), (targetbase + '.pdf')]
        for filename in out_files[:]:
            if (filename in myfiles):
                out_files.remove(filename)
        env.SideEffect(out_files, target[0])
        if Verbose:
            print 'side effect :', out_files
        env.Clean(target[0], out_files)
    return (target, source)
