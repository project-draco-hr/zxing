{
  AztecCode aztec=Encoder.encode(data.getBytes(LATIN_1),25,Encoder.DEFAULT_AZTEC_LAYERS);
  Random random=new Random(aztec.getMatrix().hashCode());
  int layers=aztec.getLayers();
  boolean compact=aztec.isCompact();
  List<Point> orientationPoints=getOrientationPoints(aztec);
  for (  boolean isMirror : new boolean[]{false,true}) {
    for (    BitMatrix matrix : getRotations(aztec.getMatrix())) {
      for (int error1=0; error1 < orientationPoints.size(); error1++) {
        for (int error2=error1; error2 < orientationPoints.size(); error2++) {
          BitMatrix copy=isMirror ? transpose(matrix) : clone(matrix);
          copy.flip(orientationPoints.get(error1).getX(),orientationPoints.get(error1).getY());
          if (error2 > error1) {
            copy.flip(orientationPoints.get(error2).getX(),orientationPoints.get(error2).getY());
          }
          AztecDetectorResult r=new Detector(makeLarger(copy,3)).detect(isMirror);
          assertNotNull(r);
          assertEquals(r.getNbLayers(),layers);
          assertEquals(r.isCompact(),compact);
          DecoderResult res=new Decoder().decode(r);
          assertEquals(data,res.getText());
        }
      }
      for (int i=0; i < 5; i++) {
        BitMatrix copy=clone(matrix);
        Collection<Integer> errors=new TreeSet<>();
        while (errors.size() < 3) {
          errors.add(random.nextInt(orientationPoints.size()));
        }
        for (        int error : errors) {
          copy.flip(orientationPoints.get(error).getX(),orientationPoints.get(error).getY());
        }
        try {
          new Detector(makeLarger(copy,3)).detect(false);
          fail("Should not reach here");
        }
 catch (        NotFoundException expected) {
        }
      }
    }
  }
}
