{
  int width=source.getWidth();
  int height=source.getHeight();
  initArrays(width);
  if (method.equals(BlackPointEstimationMethod.TWO_D_SAMPLING)) {
    int minDimension=width < height ? width : height;
    int startX=(width - minDimension) >> 1;
    int startY=(height - minDimension) >> 1;
    for (int n=0; n < minDimension; n++) {
      int luminance=source.getLuminance(startX + n,startY + n);
      histogram[luminance >> LUMINANCE_SHIFT]++;
    }
  }
 else   if (method.equals(BlackPointEstimationMethod.ROW_SAMPLING)) {
    if (argument < 0 || argument >= height) {
      throw new IllegalArgumentException("Row is not within the image: " + argument);
    }
    luminances=source.getLuminanceRow(argument,luminances);
    for (int x=0; x < width; x++) {
      histogram[luminances[x] >> LUMINANCE_SHIFT]++;
    }
  }
 else {
    throw new IllegalArgumentException("Unknown method");
  }
  return findBestValley(histogram) << LUMINANCE_SHIFT;
}
