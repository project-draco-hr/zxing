{
  int numBuckets=histogram.length;
  int firstPeak=0;
  int firstPeakSize=0;
  for (int i=0; i < numBuckets; i++) {
    if (histogram[i] > firstPeakSize) {
      firstPeak=i;
      firstPeakSize=histogram[i];
    }
  }
  int secondPeak=0;
  int secondPeakScore=0;
  for (int i=0; i < numBuckets; i++) {
    int distanceToBiggest=i - firstPeak;
    int score=histogram[i] * distanceToBiggest * distanceToBiggest;
    if (score > secondPeakScore) {
      secondPeak=i;
      secondPeakScore=score;
    }
  }
  if (firstPeak > secondPeak) {
    int temp=firstPeak;
    firstPeak=secondPeak;
    secondPeak=temp;
  }
  int bestValley=secondPeak;
  int bestValleyScore=Integer.MAX_VALUE;
  for (int i=secondPeak; i > firstPeak; i--) {
    int distance=secondPeak - i + 3;
    int score=distance * histogram[i];
    if (score < bestValleyScore) {
      bestValley=i;
      bestValleyScore=score;
    }
  }
  return bestValley;
}
