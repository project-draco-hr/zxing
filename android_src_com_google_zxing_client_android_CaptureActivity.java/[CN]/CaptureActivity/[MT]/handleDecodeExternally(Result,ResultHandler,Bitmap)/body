{
  if (barcode != null) {
    viewfinderView.drawResultBitmap(barcode);
  }
  long resultDurationMS;
  if (getIntent() == null) {
    resultDurationMS=DEFAULT_INTENT_RESULT_DURATION_MS;
  }
 else {
    resultDurationMS=getIntent().getLongExtra(Intents.Scan.RESULT_DISPLAY_DURATION_MS,DEFAULT_INTENT_RESULT_DURATION_MS);
  }
  if (resultDurationMS > 0) {
    String rawResultString=String.valueOf(rawResult);
    if (rawResultString.length() > 32) {
      rawResultString=rawResultString.substring(0,32) + " ...";
    }
    statusView.setText(getString(resultHandler.getDisplayTitle()) + " : " + rawResultString);
  }
  if (copyToClipboard && !resultHandler.areContentsSecure()) {
    ClipboardManager clipboard=(ClipboardManager)getSystemService(CLIPBOARD_SERVICE);
    CharSequence text=resultHandler.getDisplayContents();
    if (text != null) {
      try {
        clipboard.setText(text);
      }
 catch (      NullPointerException npe) {
        Log.w(TAG,"Clipboard bug",npe);
      }
    }
  }
  if (source == IntentSource.NATIVE_APP_INTENT) {
    Intent intent=new Intent(getIntent().getAction());
    intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
    intent.putExtra(Intents.Scan.RESULT,rawResult.toString());
    intent.putExtra(Intents.Scan.RESULT_FORMAT,rawResult.getBarcodeFormat().toString());
    byte[] rawBytes=rawResult.getRawBytes();
    if (rawBytes != null && rawBytes.length > 0) {
      intent.putExtra(Intents.Scan.RESULT_BYTES,rawBytes);
    }
    Map<ResultMetadataType,?> metadata=rawResult.getResultMetadata();
    if (metadata != null) {
      if (metadata.containsKey(ResultMetadataType.UPC_EAN_EXTENSION)) {
        intent.putExtra(Intents.Scan.RESULT_UPC_EAN_EXTENSION,metadata.get(ResultMetadataType.UPC_EAN_EXTENSION).toString());
      }
      Number orientation=(Number)metadata.get(ResultMetadataType.ORIENTATION);
      if (orientation != null) {
        intent.putExtra(Intents.Scan.RESULT_ORIENTATION,orientation.intValue());
      }
      String ecLevel=(String)metadata.get(ResultMetadataType.ERROR_CORRECTION_LEVEL);
      if (ecLevel != null) {
        intent.putExtra(Intents.Scan.RESULT_ERROR_CORRECTION_LEVEL,ecLevel);
      }
      Iterable<byte[]> byteSegments=(Iterable<byte[]>)metadata.get(ResultMetadataType.BYTE_SEGMENTS);
      if (byteSegments != null) {
        int i=0;
        for (        byte[] byteSegment : byteSegments) {
          intent.putExtra(Intents.Scan.RESULT_BYTE_SEGMENTS_PREFIX + i,byteSegment);
          i++;
        }
      }
    }
    sendReplyMessage(R.id.return_scan_result,intent,resultDurationMS);
  }
 else   if (source == IntentSource.PRODUCT_SEARCH_LINK) {
    int end=sourceUrl.lastIndexOf("/scan");
    String replyURL=sourceUrl.substring(0,end) + "?q=" + resultHandler.getDisplayContents()+ "&source=zxing";
    sendReplyMessage(R.id.launch_product_query,replyURL,resultDurationMS);
  }
 else   if (source == IntentSource.ZXING_LINK) {
    if (scanFromWebPageManager != null && scanFromWebPageManager.isScanFromWebPage()) {
      String replyURL=scanFromWebPageManager.buildReplyURL(rawResult,resultHandler);
      sendReplyMessage(R.id.launch_product_query,replyURL,resultDurationMS);
    }
  }
}
