{
  eventName.addStyleName(StylesDefs.INPUT_FIELD_REQUIRED);
  eventName.addChangeHandler(handler);
  eventName.addKeyPressHandler(keyListener);
  setDateToTextBox(timePicker1,new Date());
  try {
    setDateToTextBox(timePicker2,addMilliseconds(getDateFromTextBox(timePicker1),ONE_HOUR));
    timePicker1PreviousDate=getDateFromTextBox(timePicker1);
  }
 catch (  GeneratorException ge) {
    throw new IllegalStateException(ge);
  }
  buildTimeZoneList();
  timeZones.setSelectedIndex(25);
  timeZones.addKeyPressHandler(keyListener);
  timePicker1.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> valueChangeEvent){
      Date time=timePicker1PreviousDate;
      Date time1;
      Date time2;
      try {
        time1=getDateFromTextBox(timePicker1);
        time2=getDateFromTextBox(timePicker2);
      }
 catch (      GeneratorException e) {
        return;
      }
      if (time2.after(time)) {
        long diff=time2.getTime() - time.getTime();
        setDateToTextBox(timePicker2,addMilliseconds(time1,diff));
      }
 else {
        setDateToTextBox(timePicker2,addMilliseconds(time1,ONE_HOUR));
      }
      timePicker1PreviousDate=time1;
    }
  }
);
  timePicker2.addValueChangeHandler(new ValueChangeHandler<String>(){
    @Override public void onValueChange(    ValueChangeEvent<String> valueChangeEvent){
      ChangeEvent event=new ChangeEvent(){
        @Override public Object getSource(){
          return timePicker2;
        }
      }
;
      handler.onChange(event);
    }
  }
);
}
