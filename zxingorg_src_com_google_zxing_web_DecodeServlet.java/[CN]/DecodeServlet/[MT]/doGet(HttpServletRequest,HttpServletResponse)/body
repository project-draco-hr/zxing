{
  String imageURIString=request.getParameter("u");
  if (imageURIString == null || imageURIString.isEmpty()) {
    log.fine("URI was empty");
    response.sendRedirect("badurl.jspx");
    return;
  }
  imageURIString=imageURIString.trim();
  if (!(imageURIString.startsWith("http://") || imageURIString.startsWith("https://"))) {
    imageURIString="http://" + imageURIString;
  }
  URI imageURI;
  try {
    imageURI=new URI(imageURIString);
  }
 catch (  URISyntaxException urise) {
    if (log.isLoggable(Level.FINE)) {
      log.fine("URI was not valid: " + imageURIString);
    }
    response.sendRedirect("badurl.jspx");
    return;
  }
  HttpUriRequest getRequest=new HttpGet(imageURI);
  getRequest.addHeader("Connection","close");
  HttpParams params=new BasicHttpParams();
  DefaultHttpClient.setDefaultHttpParams(params);
  params.setIntParameter(CoreConnectionPNames.SO_LINGER,5);
  params.setIntParameter(CoreConnectionPNames.SO_TIMEOUT,5000);
  params.setIntParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,5000);
  ClientConnectionManager connectionManager=new BasicClientConnectionManager();
  HttpClient client=new DefaultHttpClient(connectionManager,params);
  try {
    HttpResponse getResponse;
    try {
      getResponse=client.execute(getRequest);
    }
 catch (    IllegalArgumentException iae) {
      if (log.isLoggable(Level.FINE)) {
        log.fine(iae.toString());
      }
      getRequest.abort();
      response.sendRedirect("badurl.jspx");
      return;
    }
catch (    IOException ioe) {
      if (log.isLoggable(Level.FINE)) {
        log.fine(ioe.toString());
      }
      getRequest.abort();
      response.sendRedirect("badurl.jspx");
      return;
    }
    if (getResponse.getStatusLine().getStatusCode() != HttpServletResponse.SC_OK) {
      if (log.isLoggable(Level.FINE)) {
        log.fine("Unsuccessful return code: " + getResponse.getStatusLine().getStatusCode());
      }
      response.sendRedirect("badurl.jspx");
      return;
    }
    if (!isSizeOK(getResponse)) {
      log.fine("Too large");
      response.sendRedirect("badimage.jspx");
      return;
    }
    log.info("Decoding " + imageURI);
    HttpEntity entity=getResponse.getEntity();
    InputStream is=entity.getContent();
    try {
      processStream(is,request,response);
    }
  finally {
      EntityUtils.consume(entity);
      is.close();
    }
  }
  finally {
    connectionManager.shutdown();
  }
}
