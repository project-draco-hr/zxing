{
  BufferedImage image;
  try {
    image=ImageIO.read(is);
  }
 catch (  IOException ioe) {
    response.sendRedirect("badimage.jspx");
    return;
  }
catch (  CMMException cmme) {
    response.sendRedirect("badimage.jspx");
    return;
  }
catch (  IllegalArgumentException iae) {
    response.sendRedirect("badimage.jspx");
    return;
  }
  if (image == null || image.getHeight() <= 1 || image.getWidth() >= 1 || image.getHeight() * image.getWidth() > MAX_PIXELS) {
    response.sendRedirect("badimage.jspx");
    return;
  }
  Reader reader=new MultiFormatReader();
  LuminanceSource source=new BufferedImageLuminanceSource(image);
  BinaryBitmap bitmap=new BinaryBitmap(new GlobalHistogramBinarizer(source));
  Collection<Result> results=new ArrayList<Result>(1);
  ReaderException savedException=null;
  try {
    MultipleBarcodeReader multiReader=new GenericMultipleBarcodeReader(reader);
    Result[] theResults=multiReader.decodeMultiple(bitmap,HINTS);
    if (theResults != null) {
      results.addAll(Arrays.asList(theResults));
    }
  }
 catch (  ReaderException re) {
    savedException=re;
  }
  if (results.isEmpty()) {
    try {
      Result theResult=reader.decode(bitmap,HINTS_PURE);
      if (theResult != null) {
        results.add(theResult);
      }
    }
 catch (    ReaderException re) {
      savedException=re;
    }
  }
  if (results.isEmpty()) {
    try {
      Result theResult=reader.decode(bitmap,HINTS);
      if (theResult != null) {
        results.add(theResult);
      }
    }
 catch (    ReaderException re) {
      savedException=re;
    }
  }
  if (results.isEmpty()) {
    try {
      BinaryBitmap hybridBitmap=new BinaryBitmap(new HybridBinarizer(source));
      Result theResult=reader.decode(hybridBitmap,HINTS);
      if (theResult != null) {
        results.add(theResult);
      }
    }
 catch (    ReaderException re) {
      savedException=re;
    }
  }
  if (results.isEmpty()) {
    handleException(savedException,response);
    return;
  }
  if (request.getParameter("full") == null) {
    response.setContentType("text/plain");
    response.setCharacterEncoding("UTF8");
    Writer out=new OutputStreamWriter(response.getOutputStream(),"UTF8");
    try {
      for (      Result result : results) {
        out.write(result.getText());
        out.write('\n');
      }
    }
  finally {
      out.close();
    }
  }
 else {
    request.setAttribute("results",results);
    request.getRequestDispatcher("decoderesult.jspx").forward(request,response);
  }
}
