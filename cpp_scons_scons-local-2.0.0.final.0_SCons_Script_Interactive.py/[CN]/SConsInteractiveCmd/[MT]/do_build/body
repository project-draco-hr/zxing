def do_build(self, argv):
    "        build [TARGETS]         Build the specified TARGETS and their\n                                dependencies.  'b' is a synonym.\n        "
    import SCons.Node
    import SCons.SConsign
    import SCons.Script.Main
    options = copy.deepcopy(self.options)
    (options, targets) = self.parser.parse_args(argv[1:], values=options)
    SCons.Script.COMMAND_LINE_TARGETS = targets
    if targets:
        SCons.Script.BUILD_TARGETS = targets
    else:
        SCons.Script.BUILD_TARGETS = SCons.Script._build_plus_default
    nodes = SCons.Script.Main._build_targets(self.fs, options, targets, self.target_top)
    if (not nodes):
        return
    x = []
    for n in nodes:
        x.extend(n.alter_targets()[0])
    nodes.extend(x)
    SCons.Script.Main.progress_display('scons: Clearing cached node information ...')
    seen_nodes = {}

    def get_unseen_children(node, parent, seen_nodes=seen_nodes):

        def is_unseen(node, seen_nodes=seen_nodes):
            return (node not in seen_nodes)
        return list(filter(is_unseen, node.children(scan=1)))

    def add_to_seen_nodes(node, parent, seen_nodes=seen_nodes):
        seen_nodes[node] = 1
        try:
            rfile_method = node.rfile
        except AttributeError:
            return
        else:
            rfile = rfile_method()
        if (rfile != node):
            seen_nodes[rfile] = 1
    for node in nodes:
        walker = SCons.Node.Walker(node, kids_func=get_unseen_children, eval_func=add_to_seen_nodes)
        n = walker.get_next()
        while n:
            n = walker.get_next()
    for node in seen_nodes.keys():
        node.clear()
        node.set_state(SCons.Node.no_state)
        node.implicit = None
    SCons.SConsign.Reset()
    SCons.Script.Main.progress_display('scons: done clearing node information.')
