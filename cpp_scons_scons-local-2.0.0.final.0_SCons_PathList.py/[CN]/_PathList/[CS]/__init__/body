def __init__(self, pathlist):
    '\n        Initializes a PathList object, canonicalizing the input and\n        pre-processing it for quicker substitution later.\n\n        The stored representation of the PathList is a list of tuples\n        containing (type, value), where the "type" is one of the TYPE_*\n        variables defined above.  We distinguish between:\n\n            strings that contain no \'$\' and therefore need no\n            delayed-evaluation string substitution (we expect that there\n            will be many of these and that we therefore get a pretty\n            big win from avoiding string substitution)\n\n            strings that contain \'$\' and therefore need substitution\n            (the hard case is things like \'${TARGET.dir}/include\',\n            which require re-evaluation for every target + source)\n\n            other objects (which may be something like an EntryProxy\n            that needs a method called to return a Node)\n\n        Pre-identifying the type of each element in the PathList up-front\n        and storing the type in the list of tuples is intended to reduce\n        the amount of calculation when we actually do the substitution\n        over and over for each target.\n        '
    if SCons.Util.is_String(pathlist):
        pathlist = pathlist.split(os.pathsep)
    elif (not SCons.Util.is_Sequence(pathlist)):
        pathlist = [pathlist]
    pl = []
    for p in pathlist:
        try:
            index = p.find('$')
        except (AttributeError, TypeError):
            type = TYPE_OBJECT
        else:
            if (index == (-1)):
                type = TYPE_STRING_NO_SUBST
            else:
                type = TYPE_STRING_SUBST
        pl.append((type, p))
    self.pathlist = tuple(pl)
