{
  assertFalse(testResults.isEmpty());
  Map<String,List<File>> imageFiles=getImageFileLists();
  int testCount=testResults.size();
  int[] passedCounts=new int[testCount];
  int[] misreadCounts=new int[testCount];
  int[] tryHarderCounts=new int[testCount];
  int[] tryHaderMisreadCounts=new int[testCount];
  for (  Entry<String,List<File>> testImageGroup : imageFiles.entrySet()) {
    log.fine(String.format("Starting Image Group %s",testImageGroup.getKey()));
    String fileBaseName=testImageGroup.getKey();
    String expectedText;
    File expectedTextFile=new File(testBase,fileBaseName + ".txt");
    if (expectedTextFile.exists()) {
      expectedText=readFileAsString(expectedTextFile,UTF8);
    }
 else {
      expectedTextFile=new File(testBase,fileBaseName + ".bin");
      assertTrue(expectedTextFile.exists());
      expectedText=readFileAsString(expectedTextFile,ISO88591);
    }
    for (int x=0; x < testCount; x++) {
      List<Result> results=new ArrayList<>();
      for (      File imageFile : testImageGroup.getValue()) {
        BufferedImage image=ImageIO.read(imageFile);
        float rotation=testResults.get(x).getRotation();
        BufferedImage rotatedImage=rotateImage(image,rotation);
        LuminanceSource source=new BufferedImageLuminanceSource(rotatedImage);
        BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));
        try {
          results.addAll(Arrays.asList(decode(bitmap,false)));
        }
 catch (        ReaderException ignored) {
        }
      }
      Collections.sort(results,new Comparator<Result>(){
        @Override public int compare(        Result arg0,        Result arg1){
          PDF417ResultMetadata resultMetadata=getMeta(arg0);
          PDF417ResultMetadata otherResultMetadata=getMeta(arg1);
          return resultMetadata.getSegmentIndex() - otherResultMetadata.getSegmentIndex();
        }
      }
);
      StringBuilder resultText=new StringBuilder();
      String fileId=null;
      for (      Result result : results) {
        PDF417ResultMetadata resultMetadata=getMeta(result);
        assertNotNull("resultMetadata",resultMetadata);
        if (fileId == null) {
          fileId=resultMetadata.getFileId();
        }
        assertEquals("FileId",fileId,resultMetadata.getFileId());
        resultText.append(result.getText());
      }
      assertEquals("ExpectedText",expectedText,resultText.toString());
      passedCounts[x]++;
      tryHarderCounts[x]++;
    }
  }
  int totalFound=0;
  int totalMustPass=0;
  int totalMisread=0;
  int totalMaxMisread=0;
  int numberOfTests=imageFiles.keySet().size();
  for (int x=0; x < testResults.size(); x++) {
    TestResult testResult=testResults.get(x);
    log.info(String.format("Rotation %d degrees:",(int)testResult.getRotation()));
    log.info(String.format(" %d of %d images passed (%d required)",passedCounts[x],numberOfTests,testResult.getMustPassCount()));
    int failed=numberOfTests - passedCounts[x];
    log.info(String.format(" %d failed due to misreads, %d not detected",misreadCounts[x],failed - misreadCounts[x]));
    log.info(String.format(" %d of %d images passed with try harder (%d required)",tryHarderCounts[x],numberOfTests,testResult.getTryHarderCount()));
    failed=numberOfTests - tryHarderCounts[x];
    log.info(String.format(" %d failed due to misreads, %d not detected",tryHaderMisreadCounts[x],failed - tryHaderMisreadCounts[x]));
    totalFound+=passedCounts[x] + tryHarderCounts[x];
    totalMustPass+=testResult.getMustPassCount() + testResult.getTryHarderCount();
    totalMisread+=misreadCounts[x] + tryHaderMisreadCounts[x];
    totalMaxMisread+=testResult.getMaxMisreads() + testResult.getMaxTryHarderMisreads();
  }
  int totalTests=numberOfTests * testCount * 2;
  log.info(String.format("Decoded %d images out of %d (%d%%, %d required)",totalFound,totalTests,totalFound * 100 / totalTests,totalMustPass));
  if (totalFound > totalMustPass) {
    log.warning(String.format("+++ Test too lax by %d images",totalFound - totalMustPass));
  }
 else   if (totalFound < totalMustPass) {
    log.warning(String.format("--- Test failed by %d images",totalMustPass - totalFound));
  }
  if (totalMisread < totalMaxMisread) {
    log.warning(String.format("+++ Test expects too many misreads by %d images",totalMaxMisread - totalMisread));
  }
 else   if (totalMisread > totalMaxMisread) {
    log.warning(String.format("--- Test had too many misreads by %d images",totalMisread - totalMaxMisread));
  }
  if (assertOnFailure) {
    for (int x=0; x < testCount; x++) {
      TestResult testResult=testResults.get(x);
      String label="Rotation " + testResult.getRotation() + " degrees: Too many images failed";
      assertTrue(label,passedCounts[x] >= testResult.getMustPassCount());
      assertTrue("Try harder, " + label,tryHarderCounts[x] >= testResult.getTryHarderCount());
      label="Rotation " + testResult.getRotation() + " degrees: Too many images misread";
      assertTrue(label,misreadCounts[x] <= testResult.getMaxMisreads());
      assertTrue("Try harder, " + label,tryHaderMisreadCounts[x] <= testResult.getMaxTryHarderMisreads());
    }
  }
  return new SummaryResults(totalFound,totalMustPass,totalTests);
}
