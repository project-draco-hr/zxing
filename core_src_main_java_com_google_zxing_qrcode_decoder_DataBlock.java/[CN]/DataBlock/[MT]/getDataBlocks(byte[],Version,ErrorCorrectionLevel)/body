{
  if (rawCodewords.length != version.getTotalCodewords()) {
    throw new IllegalArgumentException();
  }
  Version.ECBlocks ecBlocks=version.getECBlocksForLevel(ecLevel);
  int totalBlocks=0;
  Version.ECB[] ecBlockArray=ecBlocks.getECBlocks();
  for (  Version.ECB ecBlock : ecBlockArray) {
    totalBlocks+=ecBlock.getCount();
  }
  DataBlock[] result=new DataBlock[totalBlocks];
  int numResultBlocks=0;
  for (  Version.ECB ecBlock : ecBlockArray) {
    for (int i=0; i < ecBlock.getCount(); i++) {
      int numDataCodewords=ecBlock.getDataCodewords();
      int numBlockCodewords=ecBlocks.getECCodewordsPerBlock() + numDataCodewords;
      result[numResultBlocks++]=new DataBlock(numDataCodewords,new byte[numBlockCodewords]);
    }
  }
  int shorterBlocksTotalCodewords=result[0].codewords.length;
  int longerBlocksStartAt=result.length - 1;
  while (longerBlocksStartAt >= 0) {
    int numCodewords=result[longerBlocksStartAt].codewords.length;
    if (numCodewords == shorterBlocksTotalCodewords) {
      break;
    }
    longerBlocksStartAt--;
  }
  longerBlocksStartAt++;
  int shorterBlocksNumDataCodewords=shorterBlocksTotalCodewords - ecBlocks.getECCodewordsPerBlock();
  int rawCodewordsOffset=0;
  for (int i=0; i < shorterBlocksNumDataCodewords; i++) {
    for (int j=0; j < numResultBlocks; j++) {
      result[j].codewords[i]=rawCodewords[rawCodewordsOffset++];
    }
  }
  for (int j=longerBlocksStartAt; j < numResultBlocks; j++) {
    result[j].codewords[shorterBlocksNumDataCodewords]=rawCodewords[rawCodewordsOffset++];
  }
  int max=result[0].codewords.length;
  for (int i=shorterBlocksNumDataCodewords; i < max; i++) {
    for (int j=0; j < numResultBlocks; j++) {
      int iOffset=j < longerBlocksStartAt ? i : i + 1;
      result[j].codewords[iOffset]=rawCodewords[rawCodewordsOffset++];
    }
  }
  return result;
}
