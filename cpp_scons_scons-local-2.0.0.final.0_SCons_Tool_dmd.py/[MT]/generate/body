def generate(env):
    global smart_link
    global smart_lib
    (static_obj, shared_obj) = SCons.Tool.createObjBuilders(env)
    DAction = SCons.Action.Action('$DCOM', '$DCOMSTR')
    static_obj.add_action('.d', DAction)
    shared_obj.add_action('.d', DAction)
    static_obj.add_emitter('.d', SCons.Defaults.StaticObjectEmitter)
    shared_obj.add_emitter('.d', SCons.Defaults.SharedObjectEmitter)
    dc = env.Detect(['dmd', 'gdmd'])
    env['DC'] = dc
    env['DCOM'] = '$DC $_DINCFLAGS $_DVERFLAGS $_DDEBUGFLAGS $_DFLAGS -c -of$TARGET $SOURCES'
    env['_DINCFLAGS'] = '$( ${_concat(DINCPREFIX, DPATH, DINCSUFFIX, __env__, RDirs, TARGET, SOURCE)}  $)'
    env['_DVERFLAGS'] = '$( ${_concat(DVERPREFIX, DVERSIONS, DVERSUFFIX, __env__)}  $)'
    env['_DDEBUGFLAGS'] = '$( ${_concat(DDEBUGPREFIX, DDEBUG, DDEBUGSUFFIX, __env__)} $)'
    env['_DFLAGS'] = '$( ${_concat(DFLAGPREFIX, DFLAGS, DFLAGSUFFIX, __env__)} $)'
    env['DPATH'] = ['#/']
    env['DFLAGS'] = []
    env['DVERSIONS'] = []
    env['DDEBUG'] = []
    if dc:
        dmd_path = env.WhereIs(dc)
        if dmd_path:
            x = dmd_path.rindex(dc)
            phobosDir = (dmd_path[:x] + '/../src/phobos')
            if os.path.isdir(phobosDir):
                env.Append(DPATH=[phobosDir])
    env['DINCPREFIX'] = '-I'
    env['DINCSUFFIX'] = ''
    env['DVERPREFIX'] = '-version='
    env['DVERSUFFIX'] = ''
    env['DDEBUGPREFIX'] = '-debug='
    env['DDEBUGSUFFIX'] = ''
    env['DFLAGPREFIX'] = '-'
    env['DFLAGSUFFIX'] = ''
    env['DFILESUFFIX'] = '.d'
    if (env['PLATFORM'] == 'win32'):
        env['DLINK'] = '$DC'
        env['DLINKCOM'] = '$DLINK -of$TARGET $SOURCES $DFLAGS $DLINKFLAGS $_DLINKLIBFLAGS'
        env['DLIB'] = 'lib'
        env['DLIBCOM'] = '$DLIB $_DLIBFLAGS -c $TARGET $SOURCES $_DLINKLIBFLAGS'
        env['_DLINKLIBFLAGS'] = '$( ${_concat(DLIBLINKPREFIX, LIBS, DLIBLINKSUFFIX, __env__, RDirs, TARGET, SOURCE)} $)'
        env['_DLIBFLAGS'] = '$( ${_concat(DLIBFLAGPREFIX, DLIBFLAGS, DLIBFLAGSUFFIX, __env__)} $)'
        env['DLINKFLAGS'] = []
        env['DLIBLINKPREFIX'] = ''
        env['DLIBLINKSUFFIX'] = '.lib'
        env['DLIBFLAGPREFIX'] = '-'
        env['DLIBFLAGSUFFIX'] = ''
        env['DLINKFLAGPREFIX'] = '-'
        env['DLINKFLAGSUFFIX'] = ''
        SCons.Tool.createStaticLibBuilder(env)
        linkcom = env.get('LINKCOM')
        try:
            env['SMART_LINKCOM'] = smart_link[linkcom]
        except KeyError:

            def _smartLink(source, target, env, for_signature, defaultLinker=linkcom):
                if isD(source):
                    return '$DLINKCOM'
                else:
                    return defaultLinker
            env['SMART_LINKCOM'] = smart_link[linkcom] = _smartLink
        arcom = env.get('ARCOM')
        try:
            env['SMART_ARCOM'] = smart_lib[arcom]
        except KeyError:

            def _smartLib(source, target, env, for_signature, defaultLib=arcom):
                if isD(source):
                    return '$DLIBCOM'
                else:
                    return defaultLib
            env['SMART_ARCOM'] = smart_lib[arcom] = _smartLib
        env['ARCOM'] = '$SMART_ARCOM '
        env['LINKCOM'] = '$SMART_LINKCOM '
    else:
        linkcom = env.get('LINKCOM')
        try:
            env['SMART_LINKCOM'] = smart_link[linkcom]
        except KeyError:

            def _smartLink(source, target, env, for_signature, defaultLinker=linkcom, dc=dc):
                if isD(source):
                    try:
                        libs = env['LIBS']
                    except KeyError:
                        libs = []
                    if (('phobos' not in libs) and ('gphobos' not in libs)):
                        if (dc is 'dmd'):
                            env.Append(LIBS=['phobos'])
                        elif (dc is 'gdmd'):
                            env.Append(LIBS=['gphobos'])
                    if ('pthread' not in libs):
                        env.Append(LIBS=['pthread'])
                    if ('m' not in libs):
                        env.Append(LIBS=['m'])
                return defaultLinker
            env['SMART_LINKCOM'] = smart_link[linkcom] = _smartLink
        env['LINKCOM'] = '$SMART_LINKCOM '
