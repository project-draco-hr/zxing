{
  int startSize=possibleCenters.size();
  if (startSize < 3) {
    throw NotFoundException.getNotFoundInstance();
  }
  if (startSize > 3) {
    float totalModuleSize=0.0f;
    float square=0.0f;
    for (    FinderPattern center : possibleCenters) {
      float size=center.getEstimatedModuleSize();
      totalModuleSize+=size;
      square+=size * size;
    }
    float average=totalModuleSize / startSize;
    float stdDev=(float)Math.sqrt(square / startSize - average * average);
    Collections.sort(possibleCenters,new FurthestFromAverageComparator(average));
    float limit=Math.max(0.2f * average,stdDev);
    for (int i=0; i < possibleCenters.size() && possibleCenters.size() > 3; i++) {
      FinderPattern pattern=possibleCenters.get(i);
      if (Math.abs(pattern.getEstimatedModuleSize() - average) > limit) {
        possibleCenters.remove(i);
        i--;
      }
    }
  }
  if (possibleCenters.size() > 3) {
    float totalModuleSize=0.0f;
    for (    FinderPattern possibleCenter : possibleCenters) {
      totalModuleSize+=possibleCenter.getEstimatedModuleSize();
    }
    float average=totalModuleSize / possibleCenters.size();
    Collections.sort(possibleCenters,new CenterComparator(average));
    possibleCenters.subList(3,possibleCenters.size()).clear();
  }
  return new FinderPattern[]{possibleCenters.get(0),possibleCenters.get(1),possibleCenters.get(2)};
}
