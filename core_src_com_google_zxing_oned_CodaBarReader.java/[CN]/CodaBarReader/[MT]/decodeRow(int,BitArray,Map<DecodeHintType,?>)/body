{
  int[] start=findAsteriskPattern(row);
  start[1]=0;
  int nextStart=row.getNextSet(start[1]);
  int end=row.getSize();
  StringBuilder result=new StringBuilder();
  int[] counters=new int[7];
  int lastStart;
  do {
    for (int i=0; i < counters.length; i++) {
      counters[i]=0;
    }
    recordPattern(row,nextStart,counters);
    char decodedChar=toNarrowWidePattern(counters);
    if (decodedChar == '!') {
      throw NotFoundException.getNotFoundInstance();
    }
    result.append(decodedChar);
    lastStart=nextStart;
    for (    int counter : counters) {
      nextStart+=counter;
    }
    nextStart=row.getNextSet(nextStart);
  }
 while (nextStart < end);
  int lastPatternSize=0;
  for (  int counter : counters) {
    lastPatternSize+=counter;
  }
  int whiteSpaceAfterEnd=nextStart - lastStart - lastPatternSize;
  if (nextStart != end && (whiteSpaceAfterEnd / 2 < lastPatternSize)) {
    throw NotFoundException.getNotFoundInstance();
  }
  if (result.length() < 2) {
    throw NotFoundException.getNotFoundInstance();
  }
  char startchar=result.charAt(0);
  if (!arrayContains(STARTEND_ENCODING,startchar)) {
    throw NotFoundException.getNotFoundInstance();
  }
  for (int k=1; k < result.length(); k++) {
    if (result.charAt(k) == startchar) {
      if (k + 1 != result.length()) {
        result.delete(k + 1,result.length() - 1);
        break;
      }
    }
  }
  if (result.length() <= minCharacterLength) {
    throw NotFoundException.getNotFoundInstance();
  }
  result.deleteCharAt(result.length() - 1);
  result.deleteCharAt(0);
  float left=(float)(start[1] + start[0]) / 2.0f;
  float right=(float)(nextStart + lastStart) / 2.0f;
  return new Result(result.toString(),null,new ResultPoint[]{new ResultPoint(left,(float)rowNumber),new ResultPoint(right,(float)rowNumber)},BarcodeFormat.CODABAR);
}
