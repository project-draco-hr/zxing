{
  int numBuckets=luminanceBuckets.length;
  int firstPeak=0;
  int firstPeakSize=0;
  for (int i=0; i < numBuckets; i++) {
    if (luminanceBuckets[i] > firstPeakSize) {
      firstPeak=i;
      firstPeakSize=luminanceBuckets[i];
    }
  }
  int secondPeak=0;
  int secondPeakScore=0;
  for (int i=0; i < numBuckets; i++) {
    int distanceToBiggest=i - firstPeak;
    int score=luminanceBuckets[i] * distanceToBiggest * distanceToBiggest;
    if (score > secondPeakScore) {
      secondPeak=i;
      secondPeakScore=score;
    }
  }
  if (firstPeak > secondPeak) {
    int temp=firstPeak;
    firstPeak=secondPeak;
    secondPeak=temp;
  }
  int bestValley=firstPeak;
  int bestValleyScore=0;
  for (int i=firstPeak + 1; i < secondPeak; i++) {
    int score=(firstPeakSize - luminanceBuckets[i]) * (i - firstPeak) * (secondPeak - i);
    if (score > bestValleyScore) {
      bestValley=i;
      bestValleyScore=score;
    }
  }
  return bestValley;
}
