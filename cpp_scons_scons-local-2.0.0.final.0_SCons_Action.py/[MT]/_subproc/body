def _subproc(scons_env, cmd, error='ignore', **kw):
    'Do common setup for a subprocess.Popen() call'
    io = kw.get('stdin')
    if (is_String(io) and (io == 'devnull')):
        kw['stdin'] = open(os.devnull)
    io = kw.get('stdout')
    if (is_String(io) and (io == 'devnull')):
        kw['stdout'] = open(os.devnull, 'w')
    io = kw.get('stderr')
    if (is_String(io) and (io == 'devnull')):
        kw['stderr'] = open(os.devnull, 'w')
    ENV = kw.get('env', None)
    if (ENV is None):
        ENV = get_default_ENV(scons_env)
    new_env = {}
    for (key, value) in ENV.items():
        if is_List(value):
            value = SCons.Util.flatten_sequence(value)
            new_env[key] = os.pathsep.join(map(str, value))
        else:
            new_env[key] = str(value)
    kw['env'] = new_env
    try:
        return subprocess.Popen(cmd, **kw)
    except EnvironmentError as e:
        if (error == 'raise'):
            raise


        class dummyPopen(object):

            def __init__(self, e):
                self.exception = e

            def communicate(self):
                return ('', '')

            def wait(self):
                return (- self.exception.errno)
            stdin = None


            class f(object):

                def read(self):
                    return ''

                def readline(self):
                    return ''
            stdout = stderr = f()
        return dummyPopen(e)
