def __call__(self, target, source, env, exitstatfunc=_null, presub=_null, show=_null, execute=_null, chdir=_null, executor=None):
    if (not is_List(target)):
        target = [target]
    if (not is_List(source)):
        source = [source]
    if (presub is _null):
        presub = self.presub
        if (presub is _null):
            presub = print_actions_presub
    if (exitstatfunc is _null):
        exitstatfunc = self.exitstatfunc
    if (show is _null):
        show = print_actions
    if (execute is _null):
        execute = execute_actions
    if (chdir is _null):
        chdir = self.chdir
    save_cwd = None
    if chdir:
        save_cwd = os.getcwd()
        try:
            chdir = str(chdir.abspath)
        except AttributeError:
            if (not is_String(chdir)):
                if executor:
                    chdir = str(executor.batches[0].targets[0].dir)
                else:
                    chdir = str(target[0].dir)
    if presub:
        if executor:
            target = executor.get_all_targets()
            source = executor.get_all_sources()
        t = ' and '.join(map(str, target))
        l = '\n  '.join(self.presub_lines(env))
        out = (u'Building %s with action:\n  %s\n' % (t, l))
        sys.stdout.write(out)
    cmd = None
    if (show and self.strfunction):
        if executor:
            target = executor.get_all_targets()
            source = executor.get_all_sources()
        try:
            cmd = self.strfunction(target, source, env, executor)
        except TypeError:
            cmd = self.strfunction(target, source, env)
        if cmd:
            if chdir:
                cmd = (('os.chdir(%s)\n' % repr(chdir)) + cmd)
            try:
                get = env.get
            except AttributeError:
                print_func = self.print_cmd_line
            else:
                print_func = get('PRINT_CMD_LINE_FUNC')
                if (not print_func):
                    print_func = self.print_cmd_line
            print_func(cmd, target, source, env)
    stat = 0
    if execute:
        if chdir:
            os.chdir(chdir)
        try:
            stat = self.execute(target, source, env, executor=executor)
            if isinstance(stat, SCons.Errors.BuildError):
                s = exitstatfunc(stat.status)
                if s:
                    stat.status = s
                else:
                    stat = s
            else:
                stat = exitstatfunc(stat)
        finally:
            if save_cwd:
                os.chdir(save_cwd)
    if (cmd and save_cwd):
        print_func(('os.chdir(%s)' % repr(save_cwd)), target, source, env)
    return stat
