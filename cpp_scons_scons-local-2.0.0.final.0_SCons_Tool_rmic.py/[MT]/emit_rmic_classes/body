def emit_rmic_classes(target, source, env):
    'Create and return lists of Java RMI stub and skeleton\n    class files to be created from a set of class files.\n    '
    class_suffix = env.get('JAVACLASSSUFFIX', '.class')
    classdir = env.get('JAVACLASSDIR')
    if (not classdir):
        try:
            s = source[0]
        except IndexError:
            classdir = '.'
        else:
            try:
                classdir = s.attributes.java_classdir
            except AttributeError:
                classdir = '.'
    classdir = env.Dir(classdir).rdir()
    if (str(classdir) == '.'):
        c_ = None
    else:
        c_ = (str(classdir) + os.sep)
    slist = []
    for src in source:
        try:
            classname = src.attributes.java_classname
        except AttributeError:
            classname = str(src)
            if (c_ and (classname[:len(c_)] == c_)):
                classname = classname[len(c_):]
            if (class_suffix and (classname[:(- len(class_suffix))] == class_suffix)):
                classname = classname[(- len(class_suffix)):]
        s = src.rfile()
        s.attributes.java_classdir = classdir
        s.attributes.java_classname = classname
        slist.append(s)
    stub_suffixes = ['_Stub']
    if (env.get('JAVAVERSION') == '1.4'):
        stub_suffixes.append('_Skel')
    tlist = []
    for s in source:
        for suff in stub_suffixes:
            fname = ((s.attributes.java_classname.replace('.', os.sep) + suff) + class_suffix)
            t = target[0].File(fname)
            t.attributes.java_lookupdir = target[0]
            tlist.append(t)
    return (tlist, source)
