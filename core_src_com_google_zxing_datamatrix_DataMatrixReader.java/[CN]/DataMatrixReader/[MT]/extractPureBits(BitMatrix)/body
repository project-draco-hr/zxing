{
  int height=image.getHeight();
  int width=image.getWidth();
  int minDimension=Math.min(height,width);
  int[] leftTopBlack=image.getTopLeftOnBit();
  if (leftTopBlack == null) {
    throw NotFoundException.getNotFoundInstance();
  }
  int x=leftTopBlack[0];
  int y=leftTopBlack[1];
  while (x < minDimension && y < minDimension && image.get(x,y)) {
    x++;
  }
  if (x == minDimension) {
    throw NotFoundException.getNotFoundInstance();
  }
  int moduleSize=x - leftTopBlack[0];
  int rowEndOfSymbol=width - 1;
  while (rowEndOfSymbol >= 0 && !image.get(rowEndOfSymbol,y)) {
    rowEndOfSymbol--;
  }
  if (rowEndOfSymbol < 0) {
    throw NotFoundException.getNotFoundInstance();
  }
  rowEndOfSymbol++;
  if ((rowEndOfSymbol - x) % moduleSize != 0) {
    throw NotFoundException.getNotFoundInstance();
  }
  int dimension=2 + ((rowEndOfSymbol - x) / moduleSize);
  y+=moduleSize;
  x-=moduleSize >> 1;
  y-=moduleSize >> 1;
  if ((x + (dimension - 1) * moduleSize) >= width || (y + (dimension - 1) * moduleSize) >= height) {
    throw NotFoundException.getNotFoundInstance();
  }
  BitMatrix bits=new BitMatrix(dimension);
  for (int i=0; i < dimension; i++) {
    int iOffset=y + i * moduleSize;
    for (int j=0; j < dimension; j++) {
      if (image.get(x + j * moduleSize,iOffset)) {
        bits.set(j,i);
      }
    }
  }
  return bits;
}
