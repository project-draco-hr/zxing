{
  List<Camera.Size> supportedPreviewSizes=new ArrayList<Camera.Size>(parameters.getSupportedPreviewSizes());
  Collections.sort(supportedPreviewSizes,new Comparator<Camera.Size>(){
    @Override public int compare(    Camera.Size a,    Camera.Size b){
      int aPixels=a.height * a.width;
      int bPixels=b.height * b.width;
      if (bPixels < aPixels) {
        return -1;
      }
      if (bPixels > aPixels) {
        return 1;
      }
      return 0;
    }
  }
);
  if (Log.isLoggable(TAG,Log.INFO)) {
    StringBuilder previewSizesString=new StringBuilder();
    for (    Camera.Size supportedPreviewSize : supportedPreviewSizes) {
      previewSizesString.append(supportedPreviewSize.width).append('x').append(supportedPreviewSize.height).append(' ');
    }
    Log.i(TAG,"Supported preview sizes: " + previewSizesString);
  }
  Point bestSize=null;
  float screenAspectRatio=(float)screenResolution.x / (float)screenResolution.y;
  float diff=Float.POSITIVE_INFINITY;
  for (  Camera.Size supportedPreviewSize : supportedPreviewSizes) {
    int realWidth=supportedPreviewSize.width;
    int realHeight=supportedPreviewSize.height;
    int pixels=realWidth * realHeight;
    if (pixels < MIN_PREVIEW_PIXELS || pixels > MAX_PREVIEW_PIXELS) {
      continue;
    }
    boolean isCandidatePortrait=realWidth < realHeight;
    int maybeFlippedWidth=isCandidatePortrait ? realHeight : realWidth;
    int maybeFlippedHeight=isCandidatePortrait ? realWidth : realHeight;
    if (maybeFlippedWidth == screenResolution.x && maybeFlippedHeight == screenResolution.y) {
      Point exactPoint=new Point(realWidth,realHeight);
      Log.i(TAG,"Found preview size exactly matching screen size: " + exactPoint);
      return exactPoint;
    }
    float aspectRatio=(float)maybeFlippedWidth / (float)maybeFlippedHeight;
    float newDiff=Math.abs(aspectRatio - screenAspectRatio);
    if (newDiff < diff) {
      bestSize=new Point(realWidth,realHeight);
      diff=newDiff;
    }
  }
  if (bestSize == null) {
    Camera.Size defaultSize=parameters.getPreviewSize();
    bestSize=new Point(defaultSize.width,defaultSize.height);
    Log.i(TAG,"No suitable preview sizes, using default: " + bestSize);
  }
  Log.i(TAG,"Found best approximate preview size: " + bestSize);
  return bestSize;
}
