{
  Camera.Parameters parameters=camera.getParameters();
  if (parameters == null) {
    Log.w(TAG,"Device error: no camera parameters are available. Proceeding without configuration.");
    return;
  }
  Log.i(TAG,"Initial camera parameters: " + parameters.flatten());
  if (safeMode) {
    Log.w(TAG,"In camera config safe mode -- most settings will not be honored");
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  initializeTorch(parameters,prefs,safeMode);
  String focusMode=null;
  if (prefs.getBoolean(PreferencesActivity.KEY_AUTO_FOCUS,true)) {
    if (safeMode || prefs.getBoolean(PreferencesActivity.KEY_DISABLE_CONTINUOUS_FOCUS,false)) {
      focusMode=findSettableValue(parameters.getSupportedFocusModes(),Camera.Parameters.FOCUS_MODE_AUTO);
    }
 else {
      focusMode=findSettableValue(parameters.getSupportedFocusModes(),"continuous-picture","continuous-video",Camera.Parameters.FOCUS_MODE_AUTO);
    }
  }
  if (!safeMode && focusMode == null) {
    focusMode=findSettableValue(parameters.getSupportedFocusModes(),Camera.Parameters.FOCUS_MODE_MACRO,Camera.Parameters.FOCUS_MODE_EDOF);
  }
  if (focusMode != null) {
    parameters.setFocusMode(focusMode);
  }
  if (prefs.getBoolean(PreferencesActivity.KEY_INVERT_SCAN,false)) {
    String colorMode=findSettableValue(parameters.getSupportedColorEffects(),Camera.Parameters.EFFECT_NEGATIVE);
    if (colorMode != null) {
      parameters.setColorEffect(colorMode);
    }
  }
  parameters.setPreviewSize(cameraResolution.x,cameraResolution.y);
  camera.setParameters(parameters);
  Camera.Parameters afterParameters=camera.getParameters();
  Camera.Size afterSize=afterParameters.getPreviewSize();
  if (afterSize != null && (cameraResolution.x != afterSize.width || cameraResolution.y != afterSize.height)) {
    Log.w(TAG,"Camera said it supported preview size " + cameraResolution.x + 'x'+ cameraResolution.y+ ", but after setting it, preview size is "+ afterSize.width+ 'x'+ afterSize.height);
    cameraResolution.x=afterSize.width;
    cameraResolution.y=afterSize.height;
  }
}
