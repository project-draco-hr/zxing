{
  int symbolSizeRows=version.getSymbolSizeRows();
  int symbolSizeColumns=version.getSymbolSizeColumns();
  if (bitMatrix.getDimension() != symbolSizeRows) {
    throw new IllegalArgumentException("Dimension of bitMarix must match the version size");
  }
  int dataRegionSizeRows=version.getDataRegionSizeRows();
  int dataRegionSizeColumns=version.getDataRegionSizeColumns();
  int numDataRegionsRow=symbolSizeRows / dataRegionSizeRows;
  int numDataRegionsColumn=symbolSizeColumns / dataRegionSizeColumns;
  int sizeDataRegionRow=numDataRegionsRow * dataRegionSizeRows;
  int sizeDataRegionColumn=numDataRegionsColumn * dataRegionSizeColumns;
  BitMatrix mappingBitMatrix=new BitMatrix(sizeDataRegionRow);
  int readRowOffset=0;
  int readColumnOffset=0;
  int writeRowOffset=0;
  int writeColumnOffset=0;
  for (int dataRegionRow=0; dataRegionRow < numDataRegionsRow; ++dataRegionRow) {
    for (int dataRegionColumn=0; dataRegionColumn < numDataRegionsColumn; ++dataRegionColumn) {
      for (int i=0; i < dataRegionSizeRows; ++i) {
        for (int j=0; j < dataRegionSizeColumns; ++j) {
          readRowOffset=dataRegionRow * (dataRegionSizeRows + 2) + 1 + i;
          readColumnOffset=dataRegionColumn * (dataRegionSizeColumns + 2) + 1 + j;
          writeRowOffset=dataRegionRow * dataRegionSizeRows + i;
          writeColumnOffset=dataRegionColumn * dataRegionSizeColumns + j;
          if (bitMatrix.get(readRowOffset,readColumnOffset)) {
            mappingBitMatrix.set(writeRowOffset,writeColumnOffset);
          }
        }
      }
    }
  }
  return mappingBitMatrix;
}
