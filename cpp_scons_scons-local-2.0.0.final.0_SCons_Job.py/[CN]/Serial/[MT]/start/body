def start(self):
    'Start the job. This will begin pulling tasks from the taskmaster\n        and executing them, and return when there are no more tasks. If a task\n        fails to execute (i.e. execute() raises an exception), then the job will\n        stop.'
    while True:
        task = self.taskmaster.next_task()
        if (task is None):
            break
        try:
            task.prepare()
            if task.needs_execute():
                task.execute()
        except:
            if self.interrupted():
                try:
                    raise SCons.Errors.BuildError(task.targets[0], errstr=interrupt_msg)
                except:
                    task.exception_set()
            else:
                task.exception_set()
            task.failed()
        else:
            task.executed()
        task.postprocess()
    self.taskmaster.cleanup()
