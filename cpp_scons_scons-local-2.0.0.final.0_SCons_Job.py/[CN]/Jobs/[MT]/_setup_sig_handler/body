def _setup_sig_handler(self):
    "Setup an interrupt handler so that SCons can shutdown cleanly in\n        various conditions:\n\n          a) SIGINT: Keyboard interrupt\n          b) SIGTERM: kill or system shutdown\n          c) SIGHUP: Controlling shell exiting\n\n        We handle all of these cases by stopping the taskmaster. It\n        turns out that it very difficult to stop the build process\n        by throwing asynchronously an exception such as\n        KeyboardInterrupt. For example, the python Condition\n        variables (threading.Condition) and queue's do not seem to\n        asynchronous-exception-safe. It would require adding a whole\n        bunch of try/finally block and except KeyboardInterrupt all\n        over the place.\n\n        Note also that we have to be careful to handle the case when\n        SCons forks before executing another process. In that case, we\n        want the child to exit immediately.\n        "

    def handler(signum, stack, self=self, parentpid=os.getpid()):
        if (os.getpid() == parentpid):
            self.job.taskmaster.stop()
            self.job.interrupted.set()
        else:
            os._exit(2)
    self.old_sigint = signal.signal(signal.SIGINT, handler)
    self.old_sigterm = signal.signal(signal.SIGTERM, handler)
    try:
        self.old_sighup = signal.signal(signal.SIGHUP, handler)
    except AttributeError:
        pass
