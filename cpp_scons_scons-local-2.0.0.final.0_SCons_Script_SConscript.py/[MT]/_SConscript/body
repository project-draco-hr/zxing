def _SConscript(fs, *files, **kw):
    top = fs.Top
    sd = fs.SConstruct_dir.rdir()
    exports = kw.get('exports', [])
    results = []
    for fn in files:
        call_stack.append(Frame(fs, exports, fn))
        old_sys_path = sys.path
        try:
            SCons.Script.sconscript_reading = (SCons.Script.sconscript_reading + 1)
            if (fn == '-'):
                exec sys.stdin in call_stack[(-1)].globals
            else:
                if isinstance(fn, SCons.Node.Node):
                    f = fn
                else:
                    f = fs.File(str(fn))
                _file_ = None
                fs.chdir(top, change_os_dir=1)
                if f.rexists():
                    actual = f.rfile()
                    _file_ = open(actual.get_abspath(), 'r')
                elif f.srcnode().rexists():
                    actual = f.srcnode().rfile()
                    _file_ = open(actual.get_abspath(), 'r')
                elif f.has_src_builder():
                    f.build()
                    f.built()
                    f.builder_set(None)
                    if f.exists():
                        _file_ = open(f.get_abspath(), 'r')
                if _file_:
                    try:
                        src_dir = kw['src_dir']
                    except KeyError:
                        ldir = fs.Dir(f.dir.get_path(sd))
                    else:
                        ldir = fs.Dir(src_dir)
                        if (not ldir.is_under(f.dir)):
                            ldir = fs.Dir(f.dir.get_path(sd))
                    try:
                        fs.chdir(ldir, change_os_dir=sconscript_chdir)
                    except OSError:
                        fs.chdir(ldir, change_os_dir=0)
                        os.chdir(actual.dir.get_abspath())
                    sys.path = ([f.dir.get_abspath()] + sys.path)
                    call_stack[(-1)].globals.update({stack_bottom: 1, })
                    old_file = call_stack[(-1)].globals.get('__file__')
                    try:
                        del call_stack[(-1)].globals['__file__']
                    except KeyError:
                        pass
                    try:
                        try:
                            exec _file_ in call_stack[(-1)].globals
                        except SConscriptReturn:
                            pass
                    finally:
                        if (old_file is not None):
                            call_stack[(-1)].globals.update({__file__: old_file, })
                else:
                    SCons.Warnings.warn(SCons.Warnings.MissingSConscriptWarning, ("Ignoring missing SConscript '%s'" % f.path))
        finally:
            SCons.Script.sconscript_reading = (SCons.Script.sconscript_reading - 1)
            sys.path = old_sys_path
            frame = call_stack.pop()
            try:
                fs.chdir(frame.prev_dir, change_os_dir=sconscript_chdir)
            except OSError:
                fs.chdir(frame.prev_dir, change_os_dir=0)
                rdir = frame.prev_dir.rdir()
                rdir._create()
                try:
                    os.chdir(rdir.get_abspath())
                except OSError as e:
                    if SCons.Action.execute_actions:
                        raise e
            results.append(frame.retval)
    if (len(results) == 1):
        return results[0]
    else:
        return tuple(results)
