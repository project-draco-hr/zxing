{
  int width=row.getSize();
  int rowOffset=0;
  while (rowOffset < width) {
    if (row.get(rowOffset)) {
      break;
    }
    rowOffset++;
  }
  int counterPosition=0;
  int[] counters=new int[6];
  int patternStart=rowOffset;
  boolean isWhite=false;
  int patternLength=counters.length;
  for (int i=rowOffset; i < width; i++) {
    boolean pixel=row.get(i);
    if ((!pixel && isWhite) || (pixel && !isWhite)) {
      counters[counterPosition]++;
    }
 else {
      if (counterPosition == patternLength - 1) {
        int bestVariance=MAX_VARIANCE;
        int bestMatch=-1;
        for (int startCode=CODE_START_A; startCode <= CODE_START_C; startCode++) {
          int variance=patternMatchVariance(counters,CODE_PATTERNS[startCode]);
          if (variance < bestVariance) {
            bestVariance=variance;
            bestMatch=startCode;
          }
        }
        if (bestMatch >= 0) {
          return new int[]{patternStart,i,bestMatch};
        }
        patternStart+=counters[0] + counters[1];
        for (int y=2; y < patternLength; y++) {
          counters[y - 2]=counters[y];
        }
        counters[patternLength - 2]=0;
        counters[patternLength - 1]=0;
        counterPosition--;
      }
 else {
        counterPosition++;
      }
      counters[counterPosition]=1;
      isWhite=!isWhite;
    }
  }
  throw new ReaderException("Can't find pattern");
}
