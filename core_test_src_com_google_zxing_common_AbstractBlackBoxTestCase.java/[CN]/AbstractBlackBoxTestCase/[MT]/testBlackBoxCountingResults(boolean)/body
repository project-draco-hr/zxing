{
  assertFalse(testResults.isEmpty());
  File[] imageFiles=getImageFiles();
  int testCount=testResults.size();
  int[] passedCounts=new int[testCount];
  int[] misreadCounts=new int[testCount];
  int[] tryHarderCounts=new int[testCount];
  int[] tryHaderMisreadCounts=new int[testCount];
  for (  File testImage : imageFiles) {
    System.out.printf("Starting %s\n",testImage.getAbsolutePath());
    BufferedImage image=ImageIO.read(testImage);
    String testImageFileName=testImage.getName();
    String fileBaseName=testImageFileName.substring(0,testImageFileName.indexOf('.'));
    File expectedTextFile=new File(testBase,fileBaseName + ".txt");
    String expectedText;
    if (expectedTextFile.exists()) {
      expectedText=readFileAsString(expectedTextFile,UTF8);
    }
 else {
      expectedTextFile=new File(testBase,fileBaseName + ".bin");
      assertTrue(expectedTextFile.exists());
      expectedText=readFileAsString(expectedTextFile,ISO88591);
    }
    File expectedMetadataFile=new File(testBase,fileBaseName + ".metadata.txt");
    Properties expectedMetadata=new Properties();
    if (expectedMetadataFile.exists()) {
      InputStream expectedStream=new FileInputStream(expectedMetadataFile);
      try {
        expectedMetadata.load(expectedStream);
      }
  finally {
        expectedStream.close();
      }
    }
    for (int x=0; x < testCount; x++) {
      float rotation=testResults.get(x).getRotation();
      BufferedImage rotatedImage=rotateImage(image,rotation);
      LuminanceSource source=new BufferedImageLuminanceSource(rotatedImage);
      BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));
      try {
        if (decode(bitmap,rotation,expectedText,expectedMetadata,false)) {
          passedCounts[x]++;
        }
 else {
          misreadCounts[x]++;
        }
      }
 catch (      ReaderException re) {
      }
      try {
        if (decode(bitmap,rotation,expectedText,expectedMetadata,true)) {
          tryHarderCounts[x]++;
        }
 else {
          tryHaderMisreadCounts[x]++;
        }
      }
 catch (      ReaderException re) {
      }
    }
  }
  int totalFound=0;
  int totalMustPass=0;
  int totalMisread=0;
  int totalMaxMisread=0;
  for (int x=0; x < testResults.size(); x++) {
    TestResult testResult=testResults.get(x);
    System.out.printf("Rotation %d degrees:\n",(int)testResult.getRotation());
    System.out.printf("  %d of %d images passed (%d required)\n",passedCounts[x],imageFiles.length,testResult.getMustPassCount());
    int failed=imageFiles.length - passedCounts[x];
    System.out.printf("    %d failed due to misreads, %d not detected\n",misreadCounts[x],failed - misreadCounts[x]);
    System.out.printf("  %d of %d images passed with try harder (%d required)\n",tryHarderCounts[x],imageFiles.length,testResult.getTryHarderCount());
    failed=imageFiles.length - tryHarderCounts[x];
    System.out.printf("    %d failed due to misreads, %d not detected\n",tryHaderMisreadCounts[x],failed - tryHaderMisreadCounts[x]);
    totalFound+=passedCounts[x] + tryHarderCounts[x];
    totalMustPass+=testResult.getMustPassCount() + testResult.getTryHarderCount();
    totalMisread+=misreadCounts[x] + tryHaderMisreadCounts[x];
    totalMaxMisread+=testResult.getMaxMisreads() + testResult.getMaxTryHarderMisreads();
  }
  int totalTests=imageFiles.length * testCount * 2;
  System.out.printf("TOTALS:\nDecoded %d images out of %d (%d%%, %d required)\n",totalFound,totalTests,totalFound * 100 / totalTests,totalMustPass);
  if (totalFound > totalMustPass) {
    System.out.printf("  +++ Test too lax by %d images\n",totalFound - totalMustPass);
  }
 else   if (totalFound < totalMustPass) {
    System.out.printf("  --- Test failed by %d images\n",totalMustPass - totalFound);
  }
  if (totalMisread < totalMaxMisread) {
    System.out.printf("  +++ Test expects too many misreads by %d images\n",totalMaxMisread - totalMisread);
  }
 else   if (totalMisread > totalMaxMisread) {
    System.out.printf("  --- Test had too many misreads by %d images\n",totalMisread - totalMaxMisread);
  }
  System.out.flush();
  if (assertOnFailure) {
    for (int x=0; x < testCount; x++) {
      TestResult testResult=testResults.get(x);
      String label="Rotation " + testResult.getRotation() + " degrees: Too many images failed";
      assertTrue(label,passedCounts[x] >= testResult.getMustPassCount());
      assertTrue("Try harder, " + label,tryHarderCounts[x] >= testResult.getTryHarderCount());
      label="Rotation " + testResult.getRotation() + " degrees: Too many images misread";
      assertTrue(label,misreadCounts[x] <= testResult.getMaxMisreads());
      assertTrue("Try harder, " + label,tryHaderMisreadCounts[x] <= testResult.getMaxTryHarderMisreads());
    }
  }
  return new SummaryResults(totalFound,totalMustPass,totalTests);
}
