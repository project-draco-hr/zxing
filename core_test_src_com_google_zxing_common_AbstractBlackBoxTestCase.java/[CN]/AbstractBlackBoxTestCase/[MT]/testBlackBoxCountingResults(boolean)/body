{
  assertFalse(testResults.isEmpty());
  File[] imageFiles=getImageFiles();
  int testCount=testResults.size();
  int[] passedCounts=new int[testCount];
  int[] tryHarderCounts=new int[testCount];
  for (  File testImage : imageFiles) {
    System.out.println("Starting " + testImage.getAbsolutePath());
    BufferedImage image=ImageIO.read(testImage);
    String testImageFileName=testImage.getName();
    String fileBaseName=testImageFileName.substring(0,testImageFileName.indexOf('.'));
    File expectedTextFile=new File(testBase,fileBaseName + ".txt");
    String expectedText=readFileAsString(expectedTextFile);
    File expectedMetadataFile=new File(testBase,fileBaseName + ".metadata.txt");
    Properties expectedMetadata=new Properties();
    if (expectedMetadataFile.exists()) {
      expectedMetadata.load(new FileInputStream(expectedMetadataFile));
    }
    for (int x=0; x < testCount; x++) {
      float rotation=testResults.get(x).getRotation();
      BufferedImage rotatedImage=rotateImage(image,rotation);
      LuminanceSource source=new BufferedImageLuminanceSource(rotatedImage);
      BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));
      if (decode(bitmap,rotation,expectedText,expectedMetadata,false)) {
        passedCounts[x]++;
      }
      if (decode(bitmap,rotation,expectedText,expectedMetadata,true)) {
        tryHarderCounts[x]++;
      }
    }
  }
  int totalFound=0;
  int totalMustPass=0;
  for (int x=0; x < testCount; x++) {
    System.out.println("Rotation " + testResults.get(x).getRotation() + " degrees:");
    System.out.println("  " + passedCounts[x] + " of "+ imageFiles.length+ " images passed ("+ testResults.get(x).getMustPassCount()+ " required)");
    System.out.println("  " + tryHarderCounts[x] + " of "+ imageFiles.length+ " images passed with try harder ("+ testResults.get(x).getTryHarderCount()+ " required)");
    totalFound+=passedCounts[x];
    totalFound+=tryHarderCounts[x];
    totalMustPass+=testResults.get(x).getMustPassCount();
    totalMustPass+=testResults.get(x).getTryHarderCount();
  }
  int totalTests=imageFiles.length * testCount * 2;
  System.out.println("TOTALS:\n  Decoded " + totalFound + " images out of "+ totalTests+ " ("+ (totalFound * 100 / totalTests)+ "%, "+ totalMustPass+ " required)");
  if (totalFound > totalMustPass) {
    System.out.println("  *** Test too lax by " + (totalFound - totalMustPass) + " images");
  }
 else   if (totalFound < totalMustPass) {
    System.out.println("  *** Test failed by " + (totalMustPass - totalFound) + " images");
  }
  if (assertOnFailure) {
    for (int x=0; x < testCount; x++) {
      assertTrue("Rotation " + testResults.get(x).getRotation() + " degrees: Too many images failed",passedCounts[x] >= testResults.get(x).getMustPassCount());
      assertTrue("Try harder, Rotation " + testResults.get(x).getRotation() + " degrees: Too many images failed",tryHarderCounts[x] >= testResults.get(x).getTryHarderCount());
    }
  }
  return new SummaryResults(totalFound,totalMustPass,totalTests);
}
