{
  String suffix=String.format(" (%srotation: %d)",tryHarder ? "try harder, " : "",(int)rotation);
  Map<DecodeHintType,Object> hints=new EnumMap<DecodeHintType,Object>(DecodeHintType.class);
  if (tryHarder) {
    hints.put(DecodeHintType.TRY_HARDER,Boolean.TRUE);
  }
  Result result=barcodeReader.decode(source,hints);
  if (expectedFormat != result.getBarcodeFormat()) {
    System.out.printf("Format mismatch: expected '%s' but got '%s'%s\n",expectedFormat,result.getBarcodeFormat(),suffix);
    return false;
  }
  String resultText=result.getText();
  if (!expectedText.equals(resultText)) {
    System.out.printf("Content mismatch: expected '%s' but got '%s'%s\n",expectedText,resultText,suffix);
    return false;
  }
  Map<ResultMetadataType,?> resultMetadata=result.getResultMetadata();
  for (  Map.Entry<?,?> metadatum : expectedMetadata.entrySet()) {
    ResultMetadataType key=ResultMetadataType.valueOf(metadatum.getKey().toString());
    Object expectedValue=metadatum.getValue();
    Object actualValue=resultMetadata == null ? null : resultMetadata.get(key);
    if (!expectedValue.equals(actualValue)) {
      System.out.printf("Metadata mismatch for key '%s': expected '%s' but got '%s'\n",key,expectedValue,actualValue);
      return false;
    }
  }
  return true;
}
