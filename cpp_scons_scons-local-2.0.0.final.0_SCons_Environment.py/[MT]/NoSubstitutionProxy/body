def NoSubstitutionProxy(subject):


    class _NoSubstitutionProxy(Environment):

        def __init__(self, subject):
            self.__dict__['__subject'] = subject

        def __getattr__(self, name):
            return getattr(self.__dict__['__subject'], name)

        def __setattr__(self, name, value):
            return setattr(self.__dict__['__subject'], name, value)

        def raw_to_mode(self, dict):
            try:
                raw = dict['raw']
            except KeyError:
                pass
            else:
                del dict['raw']
                dict['mode'] = raw

        def subst(self, string, *args, **kwargs):
            return string

        def subst_kw(self, kw, *args, **kwargs):
            return kw

        def subst_list(self, string, *args, **kwargs):
            nargs = ((string, self) + args)
            nkw = kwargs.copy()
            nkw['gvars'] = {}
            self.raw_to_mode(nkw)
            return SCons.Subst.scons_subst_list(*nargs, **nkw)

        def subst_target_source(self, string, *args, **kwargs):
            nargs = ((string, self) + args)
            nkw = kwargs.copy()
            nkw['gvars'] = {}
            self.raw_to_mode(nkw)
            return SCons.Subst.scons_subst(*nargs, **nkw)
    return _NoSubstitutionProxy(subject)
