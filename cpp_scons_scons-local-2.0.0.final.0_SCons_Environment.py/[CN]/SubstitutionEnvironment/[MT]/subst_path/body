def subst_path(self, path, target=None, source=None):
    'Substitute a path list, turning EntryProxies into Nodes\n        and leaving Nodes (and other objects) as-is.'
    if (not SCons.Util.is_List(path)):
        path = [path]

    def s(obj):
        'This is the "string conversion" routine that we have our\n            substitutions use to return Nodes, not strings.  This relies\n            on the fact that an EntryProxy object has a get() method that\n            returns the underlying Node that it wraps, which is a bit of\n            architectural dependence that we might need to break or modify\n            in the future in response to additional requirements.'
        try:
            get = obj.get
        except AttributeError:
            obj = SCons.Util.to_String_for_subst(obj)
        else:
            obj = get()
        return obj
    r = []
    for p in path:
        if SCons.Util.is_String(p):
            p = self.subst(p, target=target, source=source, conv=s)
            if SCons.Util.is_List(p):
                if (len(p) == 1):
                    p = p[0]
                else:
                    p = ''.join(map(SCons.Util.to_String_for_subst, p))
        else:
            p = s(p)
        r.append(p)
    return r
