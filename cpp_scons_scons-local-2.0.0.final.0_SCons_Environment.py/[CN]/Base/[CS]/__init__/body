def __init__(self, platform=None, tools=None, toolpath=None, variables=None, parse_flags=None, **kw):
    "\n        Initialization of a basic SCons construction environment,\n        including setting up special construction variables like BUILDER,\n        PLATFORM, etc., and searching for and applying available Tools.\n\n        Note that we do *not* call the underlying base class\n        (SubsitutionEnvironment) initialization, because we need to\n        initialize things in a very specific order that doesn't work\n        with the much simpler base class initialization.\n        "
    if __debug__:
        logInstanceCreation(self, 'Environment.Base')
    self._memo = {}
    self.fs = SCons.Node.FS.get_default_fs()
    self.ans = SCons.Node.Alias.default_ans
    self.lookup_list = SCons.Node.arg2nodes_lookups
    self._dict = semi_deepcopy(SCons.Defaults.ConstructionEnvironment)
    self._init_special()
    self.added_methods = []
    self.decide_target = default_decide_target
    self.decide_source = default_decide_source
    self.copy_from_cache = default_copy_from_cache
    self._dict['BUILDERS'] = BuilderDict(self._dict['BUILDERS'], self)
    if (platform is None):
        platform = self._dict.get('PLATFORM', None)
        if (platform is None):
            platform = SCons.Platform.Platform()
    if SCons.Util.is_String(platform):
        platform = SCons.Platform.Platform(platform)
    self._dict['PLATFORM'] = str(platform)
    platform(self)
    self._dict['HOST_OS'] = self._dict.get('HOST_OS', None)
    self._dict['HOST_ARCH'] = self._dict.get('HOST_ARCH', None)
    self._dict['TARGET_OS'] = self._dict.get('HOST_OS', None)
    self._dict['TARGET_ARCH'] = self._dict.get('HOST_ARCH', None)
    if ('options' in kw):
        variables = kw['options']
        del kw['options']
    self.Replace(**kw)
    keys = list(kw.keys())
    if variables:
        keys = (keys + list(variables.keys()))
        variables.Update(self)
    save = {}
    for k in keys:
        try:
            save[k] = self._dict[k]
        except KeyError:
            pass
    SCons.Tool.Initializers(self)
    if (tools is None):
        tools = self._dict.get('TOOLS', None)
        if (tools is None):
            tools = ['default']
    apply_tools(self, tools, toolpath)
    for (key, val) in save.items():
        self._dict[key] = val
    if parse_flags:
        self.MergeFlags(parse_flags)
