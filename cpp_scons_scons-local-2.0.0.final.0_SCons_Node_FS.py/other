'scons.Node.FS\n\nFile system nodes.\n\nThese Nodes represent the canonical external objects that people think\nof when they think of building software: files and directories.\n\nThis holds a "default_fs" variable that should be initialized with an FS\nthat can be used by scripts or modules looking for the canonical default.\n\n'
__revision__ = 'src/engine/SCons/Node/FS.py 5023 2010/06/14 22:05:46 scons'
import fnmatch
import os
import re
import shutil
import stat
import sys
import time
import codecs
import SCons.Action
from SCons.Debug import logInstanceCreation
import SCons.Errors
import SCons.Memoize
import SCons.Node
import SCons.Node.Alias
import SCons.Subst
import SCons.Util
import SCons.Warnings
from SCons.Debug import Trace
do_store_info = True
default_max_drift = (((2 * 24) * 60) * 60)
Save_Strings = None
do_splitdrive = None
initialize_do_splitdrive()
needs_normpath_check = None
initialize_normpath_check()
if hasattr(os, 'link'):

    def _hardlink_func(fs, src, dst):
        while fs.islink(src):
            link = fs.readlink(src)
            if (not os.path.isabs(link)):
                src = link
            else:
                src = os.path.join(os.path.dirname(src), link)
        fs.link(src, dst)
else:
    _hardlink_func = None
if hasattr(os, 'symlink'):

    def _softlink_func(fs, src, dst):
        fs.symlink(src, dst)
else:
    _softlink_func = None
Valid_Duplicates = ['hard-soft-copy', 'soft-hard-copy', 'hard-copy', 'soft-copy', 'copy']
Link_Funcs = []
Link = SCons.Action.Action(LinkFunc, None)
LocalCopy = SCons.Action.Action(LinkFunc, LocalString)
Unlink = SCons.Action.Action(UnlinkFunc, None)
Mkdir = SCons.Action.Action(MkdirFunc, None, presub=None)
MkdirBuilder = None
_null = _Null()
DefaultSCCSBuilder = None
DefaultRCSBuilder = None
_is_cygwin = (sys.platform == 'cygwin')
if ((os.path.normcase('TeSt') == os.path.normpath('TeSt')) and (not _is_cygwin)):

    def _my_normcase(x):
        return x
else:

    def _my_normcase(x):
        return x.upper()
diskcheck_match = DiskChecker('match', do_diskcheck_match, ignore_diskcheck_match)
diskcheck_rcs = DiskChecker('rcs', do_diskcheck_rcs, ignore_diskcheck_rcs)
diskcheck_sccs = DiskChecker('sccs', do_diskcheck_sccs, ignore_diskcheck_sccs)
diskcheckers = [diskcheck_match, diskcheck_rcs, diskcheck_sccs]
_classEntry = Entry
glob_magic_check = re.compile('[*?[]')
default_fs = None
find_file = FileFinder().find_file
