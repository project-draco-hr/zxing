def _lookup(self, p, directory, fsclass, create=1):
    "\n        The generic entry point for Node lookup with user-supplied data.\n\n        This translates arbitrary input into a canonical Node.FS object\n        of the specified fsclass.  The general approach for strings is\n        to turn it into a fully normalized absolute path and then call\n        the root directory's lookup_abs() method for the heavy lifting.\n\n        If the path name begins with '#', it is unconditionally\n        interpreted relative to the top-level directory of this FS.  '#'\n        is treated as a synonym for the top-level SConstruct directory,\n        much like '~' is treated as a synonym for the user's home\n        directory in a UNIX shell.  So both '#foo' and '#/foo' refer\n        to the 'foo' subdirectory underneath the top-level SConstruct\n        directory.\n\n        If the path name is relative, then the path is looked up relative\n        to the specified directory, or the current directory (self._cwd,\n        typically the SConscript directory) if the specified directory\n        is None.\n        "
    if isinstance(p, Base):
        p.must_be_same(fsclass)
        return p
    p = str(p)
    initial_hash = (p[0:1] == '#')
    if initial_hash:
        p = p[1:]
        directory = self.Top
    if (directory and (not isinstance(directory, Dir))):
        directory = self.Dir(directory)
    if do_splitdrive:
        (drive, p) = os.path.splitdrive(p)
    else:
        drive = ''
    if (drive and (not p)):
        p = os.sep
    absolute = os.path.isabs(p)
    needs_normpath = needs_normpath_check.match(p)
    if (initial_hash or (not absolute)):
        if (not directory):
            directory = self._cwd
        if p:
            p = ((directory.labspath + '/') + p)
        else:
            p = directory.labspath
    if needs_normpath:
        p = os.path.normpath(p)
    if (drive or absolute):
        root = self.get_root(drive)
    else:
        if (not directory):
            directory = self._cwd
        root = directory.root
    if (os.sep != '/'):
        p = p.replace(os.sep, '/')
    return root._lookup_abs(p, fsclass, create)
