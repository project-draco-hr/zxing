def _lookup_abs(self, p, klass, create=1):
    '\n        Fast (?) lookup of a *normalized* absolute path.\n\n        This method is intended for use by internal lookups with\n        already-normalized path data.  For general-purpose lookups,\n        use the FS.Entry(), FS.Dir() or FS.File() methods.\n\n        The caller is responsible for making sure we\'re passed a\n        normalized absolute path; we merely let Python\'s dictionary look\n        up and return the One True Node.FS object for the path.\n\n        If no Node for the specified "p" doesn\'t already exist, and\n        "create" is specified, the Node may be created after recursive\n        invocation to find or create the parent directory or directories.\n        '
    k = _my_normcase(p)
    try:
        result = self._lookupDict[k]
    except KeyError:
        if (not create):
            msg = ("No such file or directory: '%s' in '%s' (and create is False)" % (p, str(self)))
            raise SCons.Errors.UserError(msg)
        (dir_name, file_name) = os.path.split(p)
        dir_node = self._lookup_abs(dir_name, Dir)
        result = klass(file_name, dir_node, self.fs)
        result.diskcheck_match()
        self._lookupDict[k] = result
        dir_node.entries[_my_normcase(file_name)] = result
        dir_node.implicit = None
    else:
        result.must_be_same(klass)
    return result
