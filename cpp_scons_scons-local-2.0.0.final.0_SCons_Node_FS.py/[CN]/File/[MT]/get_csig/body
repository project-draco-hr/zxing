def get_csig(self):
    "\n        Generate a node's content signature, the digested signature\n        of its content.\n\n        node - the node\n        cache - alternate node to use for the signature cache\n        returns - the content signature\n        "
    ninfo = self.get_ninfo()
    try:
        return ninfo.csig
    except AttributeError:
        pass
    csig = self.get_max_drift_csig()
    if (csig is None):
        try:
            if (self.get_size() < SCons.Node.FS.File.md5_chunksize):
                contents = self.get_contents()
            else:
                csig = self.get_content_hash()
        except IOError:
            csig = ''
        else:
            if (not csig):
                csig = SCons.Util.MD5signature(contents)
    ninfo.csig = csig
    return csig
