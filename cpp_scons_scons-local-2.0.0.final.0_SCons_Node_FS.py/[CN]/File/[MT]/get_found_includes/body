def get_found_includes(self, env, scanner, path):
    'Return the included implicit dependencies in this file.\n        Cache results so we only scan the file once per path\n        regardless of how many times this information is requested.\n        '
    memo_key = (id(env), id(scanner), path)
    try:
        memo_dict = self._memo['get_found_includes']
    except KeyError:
        memo_dict = {}
        self._memo['get_found_includes'] = memo_dict
    else:
        try:
            return memo_dict[memo_key]
        except KeyError:
            pass
    if scanner:
        result = scanner(self, env, path)
        result = [N.disambiguate() for N in result]
    else:
        result = []
    memo_dict[memo_key] = result
    return result
