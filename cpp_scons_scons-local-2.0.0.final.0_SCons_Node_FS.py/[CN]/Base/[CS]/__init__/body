def __init__(self, name, directory, fs):
    'Initialize a generic Node.FS.Base object.\n\n        Call the superclass initialization, take care of setting up\n        our relative and absolute paths, identify our parent\n        directory, and indicate that this node should use\n        signatures.'
    if __debug__:
        logInstanceCreation(self, 'Node.FS.Base')
    SCons.Node.Node.__init__(self)
    self.name = SCons.Util.silent_intern(name)
    self.suffix = SCons.Util.silent_intern(SCons.Util.splitext(name)[1])
    self.fs = fs
    assert directory, 'A directory must be provided'
    self.abspath = SCons.Util.silent_intern(directory.entry_abspath(name))
    self.labspath = SCons.Util.silent_intern(directory.entry_labspath(name))
    if (directory.path == '.'):
        self.path = SCons.Util.silent_intern(name)
    else:
        self.path = SCons.Util.silent_intern(directory.entry_path(name))
    if (directory.tpath == '.'):
        self.tpath = SCons.Util.silent_intern(name)
    else:
        self.tpath = SCons.Util.silent_intern(directory.entry_tpath(name))
    self.path_elements = (directory.path_elements + [self])
    self.dir = directory
    self.cwd = None
    self.duplicate = directory.duplicate
