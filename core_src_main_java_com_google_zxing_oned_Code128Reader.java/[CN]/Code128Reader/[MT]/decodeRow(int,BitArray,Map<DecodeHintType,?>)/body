{
  boolean convertFNC1=hints != null && hints.containsKey(DecodeHintType.ASSUME_GS1);
  int[] startPatternInfo=findStartPattern(row);
  int startCode=startPatternInfo[2];
  List<Byte> rawCodes=new ArrayList<>(20);
  rawCodes.add((byte)startCode);
  int codeSet;
switch (startCode) {
case CODE_START_A:
    codeSet=CODE_CODE_A;
  break;
case CODE_START_B:
codeSet=CODE_CODE_B;
break;
case CODE_START_C:
codeSet=CODE_CODE_C;
break;
default :
throw FormatException.getFormatInstance();
}
boolean done=false;
boolean isNextShifted=false;
StringBuilder result=new StringBuilder(20);
int lastStart=startPatternInfo[0];
int nextStart=startPatternInfo[1];
int[] counters=new int[6];
int lastCode=0;
int code=0;
int checksumTotal=startCode;
int multiplier=0;
boolean lastCharacterWasPrintable=true;
boolean upperMode=false;
boolean shiftUpperMode=false;
while (!done) {
boolean unshift=isNextShifted;
isNextShifted=false;
lastCode=code;
code=decodeCode(row,counters,nextStart);
rawCodes.add((byte)code);
if (code != CODE_STOP) {
lastCharacterWasPrintable=true;
}
if (code != CODE_STOP) {
multiplier++;
checksumTotal+=multiplier * code;
}
lastStart=nextStart;
for (int counter : counters) {
nextStart+=counter;
}
switch (code) {
case CODE_START_A:
case CODE_START_B:
case CODE_START_C:
throw FormatException.getFormatInstance();
}
switch (codeSet) {
case CODE_CODE_A:
if (code < 64) {
if (shiftUpperMode == upperMode) {
result.append((char)(' ' + code));
}
 else {
result.append((char)(' ' + code + 128));
}
shiftUpperMode=false;
}
 else if (code < 96) {
if (shiftUpperMode == upperMode) {
result.append((char)(code - 64));
}
 else {
result.append((char)(code + 64));
}
shiftUpperMode=false;
}
 else {
if (code != CODE_STOP) {
lastCharacterWasPrintable=false;
}
switch (code) {
case CODE_FNC_1:
if (convertFNC1) {
if (result.length() == 0) {
result.append("]C1");
}
 else {
result.append((char)29);
}
}
break;
case CODE_FNC_2:
case CODE_FNC_3:
break;
case CODE_FNC_4_A:
if (!upperMode && shiftUpperMode) {
upperMode=true;
shiftUpperMode=false;
}
 else if (upperMode && shiftUpperMode) {
upperMode=false;
shiftUpperMode=false;
}
 else {
shiftUpperMode=true;
}
break;
case CODE_SHIFT:
isNextShifted=true;
codeSet=CODE_CODE_B;
break;
case CODE_CODE_B:
codeSet=CODE_CODE_B;
break;
case CODE_CODE_C:
codeSet=CODE_CODE_C;
break;
case CODE_STOP:
done=true;
break;
}
}
break;
case CODE_CODE_B:
if (code < 96) {
if (shiftUpperMode == upperMode) {
result.append((char)(' ' + code));
}
 else {
result.append((char)(' ' + code + 128));
}
shiftUpperMode=false;
}
 else {
if (code != CODE_STOP) {
lastCharacterWasPrintable=false;
}
switch (code) {
case CODE_FNC_1:
if (convertFNC1) {
if (result.length() == 0) {
result.append("]C1");
}
 else {
result.append((char)29);
}
}
break;
case CODE_FNC_2:
case CODE_FNC_3:
break;
case CODE_FNC_4_B:
if (!upperMode && shiftUpperMode) {
upperMode=true;
shiftUpperMode=false;
}
 else if (upperMode && shiftUpperMode) {
upperMode=false;
shiftUpperMode=false;
}
 else {
shiftUpperMode=true;
}
break;
case CODE_SHIFT:
isNextShifted=true;
codeSet=CODE_CODE_A;
break;
case CODE_CODE_A:
codeSet=CODE_CODE_A;
break;
case CODE_CODE_C:
codeSet=CODE_CODE_C;
break;
case CODE_STOP:
done=true;
break;
}
}
break;
case CODE_CODE_C:
if (code < 100) {
if (code < 10) {
result.append('0');
}
result.append(code);
}
 else {
if (code != CODE_STOP) {
lastCharacterWasPrintable=false;
}
switch (code) {
case CODE_FNC_1:
if (convertFNC1) {
if (result.length() == 0) {
result.append("]C1");
}
 else {
result.append((char)29);
}
}
break;
case CODE_CODE_A:
codeSet=CODE_CODE_A;
break;
case CODE_CODE_B:
codeSet=CODE_CODE_B;
break;
case CODE_STOP:
done=true;
break;
}
}
break;
}
if (unshift) {
codeSet=codeSet == CODE_CODE_A ? CODE_CODE_B : CODE_CODE_A;
}
}
int lastPatternSize=nextStart - lastStart;
nextStart=row.getNextUnset(nextStart);
if (!row.isRange(nextStart,Math.min(row.getSize(),nextStart + (nextStart - lastStart) / 2),false)) {
throw NotFoundException.getNotFoundInstance();
}
checksumTotal-=multiplier * lastCode;
if (checksumTotal % 103 != lastCode) {
throw ChecksumException.getChecksumInstance();
}
int resultLength=result.length();
if (resultLength == 0) {
throw NotFoundException.getNotFoundInstance();
}
if (resultLength > 0 && lastCharacterWasPrintable) {
if (codeSet == CODE_CODE_C) {
result.delete(resultLength - 2,resultLength);
}
 else {
result.delete(resultLength - 1,resultLength);
}
}
float left=(float)(startPatternInfo[1] + startPatternInfo[0]) / 2.0f;
float right=lastStart + lastPatternSize / 2.0f;
int rawCodesSize=rawCodes.size();
byte[] rawBytes=new byte[rawCodesSize];
for (int i=0; i < rawCodesSize; i++) {
rawBytes[i]=rawCodes.get(i);
}
return new Result(result.toString(),rawBytes,new ResultPoint[]{new ResultPoint(left,(float)rowNumber),new ResultPoint(right,(float)rowNumber)},BarcodeFormat.CODE_128);
}
