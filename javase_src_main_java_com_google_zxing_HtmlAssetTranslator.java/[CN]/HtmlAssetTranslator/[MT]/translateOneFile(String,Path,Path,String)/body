{
  Path destFile=targetHtmlDir.resolve(sourceFile.getFileName());
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  Document document;
  try {
    DocumentBuilder builder=factory.newDocumentBuilder();
    document=builder.parse(sourceFile.toFile());
  }
 catch (  ParserConfigurationException pce) {
    throw new IllegalStateException(pce);
  }
catch (  SAXException sae) {
    throw new IOException(sae);
  }
  Element rootElement=document.getDocumentElement();
  rootElement.normalize();
  Queue<Node> nodes=new LinkedList<>();
  nodes.add(rootElement);
  while (!nodes.isEmpty()) {
    Node node=nodes.poll();
    if (shouldTranslate(node)) {
      NodeList children=node.getChildNodes();
      for (int i=0; i < children.getLength(); i++) {
        nodes.add(children.item(i));
      }
    }
    if (node.getNodeType() == Node.TEXT_NODE) {
      String text=node.getTextContent();
      if (!text.trim().isEmpty()) {
        text=StringsResourceTranslator.translateString(text,language);
        node.setTextContent(' ' + text + ' ');
      }
    }
  }
  Node translateText=document.createTextNode(translationTextTranslated);
  Node paragraph=document.createElement("p");
  paragraph.appendChild(translateText);
  Node body=rootElement.getElementsByTagName("body").item(0);
  body.appendChild(paragraph);
  DOMImplementationRegistry registry;
  try {
    registry=DOMImplementationRegistry.newInstance();
  }
 catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {
    throw new IllegalStateException(e);
  }
  DOMImplementationLS impl=(DOMImplementationLS)registry.getDOMImplementation("LS");
  LSSerializer writer=impl.createLSSerializer();
  String fileAsString=writer.writeToString(document);
  fileAsString=fileAsString.replaceAll("<\\?xml[^>]+>","<!DOCTYPE HTML>");
  Files.write(destFile,Collections.singleton(fileAsString),StandardCharsets.UTF_8);
}
