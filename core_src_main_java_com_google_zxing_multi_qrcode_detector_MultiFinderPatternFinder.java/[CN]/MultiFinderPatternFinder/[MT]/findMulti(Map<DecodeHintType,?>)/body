{
  boolean tryHarder=hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);
  BitMatrix image=getImage();
  int maxI=image.getHeight();
  int maxJ=image.getWidth();
  int iSkip=(int)(maxI / (MAX_MODULES * 4.0f) * 3);
  if (iSkip < MIN_SKIP || tryHarder) {
    iSkip=MIN_SKIP;
  }
  int[] stateCount=new int[5];
  for (int i=iSkip - 1; i < maxI; i+=iSkip) {
    stateCount[0]=0;
    stateCount[1]=0;
    stateCount[2]=0;
    stateCount[3]=0;
    stateCount[4]=0;
    int currentState=0;
    for (int j=0; j < maxJ; j++) {
      if (image.get(j,i)) {
        if ((currentState & 1) == 1) {
          currentState++;
        }
        stateCount[currentState]++;
      }
 else {
        if ((currentState & 1) == 0) {
          if (currentState == 4) {
            if (foundPatternCross(stateCount) && handlePossibleCenter(stateCount,i,j)) {
              currentState=0;
              stateCount[0]=0;
              stateCount[1]=0;
              stateCount[2]=0;
              stateCount[3]=0;
              stateCount[4]=0;
            }
 else {
              stateCount[0]=stateCount[2];
              stateCount[1]=stateCount[3];
              stateCount[2]=stateCount[4];
              stateCount[3]=1;
              stateCount[4]=0;
              currentState=3;
            }
          }
 else {
            stateCount[++currentState]++;
          }
        }
 else {
          stateCount[currentState]++;
        }
      }
    }
    if (foundPatternCross(stateCount)) {
      handlePossibleCenter(stateCount,i,maxJ);
    }
  }
  FinderPattern[][] patternInfo=selectMutipleBestPatterns();
  List<FinderPatternInfo> result=new ArrayList<>();
  for (  FinderPattern[] pattern : patternInfo) {
    ResultPoint.orderBestPatterns(pattern);
    result.add(new FinderPatternInfo(pattern));
  }
  if (result.isEmpty()) {
    return EMPTY_RESULT_ARRAY;
  }
 else {
    return result.toArray(new FinderPatternInfo[result.size()]);
  }
}
