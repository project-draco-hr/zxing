def get_binfo(self):
    "\n        Fetch a node's build information.\n\n        node - the node whose sources will be collected\n        cache - alternate node to use for the signature cache\n        returns - the build signature\n\n        This no longer handles the recursive descent of the\n        node's children's signatures.  We expect that they're\n        already built and updated by someone else, if that's\n        what's wanted.\n        "
    try:
        return self.binfo
    except AttributeError:
        pass
    binfo = self.new_binfo()
    self.binfo = binfo
    executor = self.get_executor()
    ignore_set = self.ignore_set
    if self.has_builder():
        binfo.bact = str(executor)
        binfo.bactsig = SCons.Util.MD5signature(executor.get_contents())
    if self._specific_sources:
        sources = []
        for s in self.sources:
            if (s not in ignore_set):
                sources.append(s)
    else:
        sources = executor.get_unignored_sources(self, self.ignore)
    seen = set()
    bsources = []
    bsourcesigs = []
    for s in sources:
        if (not (s in seen)):
            seen.add(s)
            bsources.append(s)
            bsourcesigs.append(s.get_ninfo())
    binfo.bsources = bsources
    binfo.bsourcesigs = bsourcesigs
    depends = self.depends
    dependsigs = []
    for d in depends:
        if (d not in ignore_set):
            dependsigs.append(d.get_ninfo())
    binfo.bdepends = depends
    binfo.bdependsigs = dependsigs
    implicit = (self.implicit or [])
    implicitsigs = []
    for i in implicit:
        if (i not in ignore_set):
            implicitsigs.append(i.get_ninfo())
    binfo.bimplicit = implicit
    binfo.bimplicitsigs = implicitsigs
    return binfo
