def changed(self, node=None):
    '\n        Returns if the node is up-to-date with respect to the BuildInfo\n        stored last time it was built.  The default behavior is to compare\n        it against our own previously stored BuildInfo, but the stored\n        BuildInfo from another Node (typically one in a Repository)\n        can be used instead.\n\n        Note that we now *always* check every dependency.  We used to\n        short-circuit the check by returning as soon as we detected\n        any difference, but we now rely on checking every dependency\n        to make sure that any necessary Node information (for example,\n        the content signature of an #included .h file) is updated.\n        '
    t = 0
    if t:
        Trace(('changed(%s [%s], %s)' % (self, classname(self), node)))
    if (node is None):
        node = self
    result = False
    bi = node.get_stored_info().binfo
    then = ((bi.bsourcesigs + bi.bdependsigs) + bi.bimplicitsigs)
    children = self.children()
    diff = (len(children) - len(then))
    if diff:
        then.extend(([None] * diff))
        if t:
            Trace((': old %s new %s' % (len(then), len(children))))
        result = True
    for (child, prev_ni) in zip(children, then):
        if child.changed_since_last_build(self, prev_ni):
            if t:
                Trace((': %s changed' % child))
            result = True
    contents = self.get_executor().get_contents()
    if self.has_builder():
        import SCons.Util
        newsig = SCons.Util.MD5signature(contents)
        if (bi.bactsig != newsig):
            if t:
                Trace((': bactsig %s != newsig %s' % (bi.bactsig, newsig)))
            result = True
    if (not result):
        if t:
            Trace(': up to date')
    if t:
        Trace('\n')
    return result
