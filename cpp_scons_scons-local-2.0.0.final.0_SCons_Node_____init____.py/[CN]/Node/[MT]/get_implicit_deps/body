def get_implicit_deps(self, env, scanner, path):
    "Return a list of implicit dependencies for this node.\n\n        This method exists to handle recursive invocation of the scanner\n        on the implicit dependencies returned by the scanner, if the\n        scanner's recursive flag says that we should.\n        "
    if (not scanner):
        return []
    nodes = [self]
    seen = {}
    seen[self] = 1
    deps = []
    while nodes:
        n = nodes.pop(0)
        d = [x for x in n.get_found_includes(env, scanner, path) if (x not in seen)]
        if d:
            deps.extend(d)
            for n in d:
                seen[n] = 1
            nodes.extend(scanner.recurse_nodes(d))
    return deps
