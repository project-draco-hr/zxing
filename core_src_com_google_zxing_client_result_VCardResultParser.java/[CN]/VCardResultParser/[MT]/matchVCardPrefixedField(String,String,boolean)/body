{
  Vector matches=null;
  int i=0;
  int max=rawText.length();
  while (i < max) {
    i=rawText.indexOf(prefix,i);
    if (i < 0) {
      break;
    }
    if (i > 0 && rawText.charAt(i - 1) != '\n') {
      i++;
      continue;
    }
    i+=prefix.length();
    if (rawText.charAt(i) != ':' && rawText.charAt(i) != ';') {
      continue;
    }
    int metadataStart=i;
    while (rawText.charAt(i) != ':') {
      i++;
    }
    boolean quotedPrintable=false;
    if (i > metadataStart) {
      int j=metadataStart + 1;
      while (j <= i) {
        if (rawText.charAt(j) == ';' || rawText.charAt(j) == ':') {
          String metadata=rawText.substring(metadataStart + 1,j);
          int equals=metadata.indexOf('=');
          if (equals >= 0) {
            String key=metadata.substring(0,equals);
            String value=metadata.substring(equals + 1);
            if (key.equalsIgnoreCase("ENCODING")) {
              if (value.equalsIgnoreCase("QUOTED-PRINTABLE")) {
                quotedPrintable=true;
              }
            }
          }
          metadataStart=j;
        }
        j++;
      }
    }
    i++;
    int matchStart=i;
    while ((i=rawText.indexOf((int)'\n',i)) >= 0) {
      if (i < rawText.length() - 1 && (rawText.charAt(i + 1) == ' ' || rawText.charAt(i + 1) == '\t')) {
        i+=2;
      }
 else       if (quotedPrintable && (rawText.charAt(i - 1) == '=' || rawText.charAt(i - 2) == '=')) {
        i++;
      }
 else {
        break;
      }
    }
    if (i < 0) {
      i=max;
    }
 else     if (i > matchStart) {
      if (matches == null) {
        matches=new Vector(1);
      }
      if (rawText.charAt(i - 1) == '\r') {
        i--;
      }
      String element=rawText.substring(matchStart,i);
      if (trim) {
        element=element.trim();
      }
      if (quotedPrintable) {
        element=decodeQuotedPrintable(element);
      }
 else {
        element=stripContinuationCRLF(element);
      }
      matches.addElement(element);
      i++;
    }
 else {
      i++;
    }
  }
  if (matches == null || matches.isEmpty()) {
    return null;
  }
  return toStringArray(matches);
}
