def scan_recurse(self, node, path=()):
    ' do a recursive scan of the top level target file\n        This lets us search for included files based on the\n        directory of the main file just as latex does'
    path_dict = dict(list(path))
    queue = []
    queue.extend(self.scan(node))
    seen = {}
    nodes = []
    source_dir = node.get_dir()
    while queue:
        include = queue.pop()
        try:
            if (seen[include[1]] == 1):
                continue
        except KeyError:
            seen[include[1]] = 1
        (n, i) = self.find_include(include, source_dir, path_dict)
        if (n is None):
            if (include[0] != 'usepackage'):
                SCons.Warnings.warn(SCons.Warnings.DependencyWarning, ('No dependency generated for file: %s (included from: %s) -- file not found' % (i, node)))
        else:
            sortkey = self.sort_key(n)
            nodes.append((sortkey, n))
            queue.extend(self.scan(n))
    return [pair[1] for pair in sorted(nodes)]
