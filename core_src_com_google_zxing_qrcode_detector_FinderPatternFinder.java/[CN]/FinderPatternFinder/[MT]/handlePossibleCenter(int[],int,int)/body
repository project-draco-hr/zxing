{
  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];
  float centerJ=centerFromEnd(stateCount,j);
  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);
  if (!Float.isNaN(centerI)) {
    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);
    if (!Float.isNaN(centerJ)) {
      float estimatedModuleSize=(float)stateCountTotal / 7.0f;
      boolean found=false;
      int max=possibleCenters.size();
      for (int index=0; index < max; index++) {
        FinderPattern center=(FinderPattern)possibleCenters.elementAt(index);
        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {
          center.incrementCount();
          found=true;
          break;
        }
      }
      if (!found) {
        possibleCenters.addElement(new FinderPattern(centerJ,centerI,estimatedModuleSize));
      }
      return true;
    }
  }
  return false;
}
