{
  boolean tryHarder=hints != null && hints.containsKey(DecodeHintType.TRY_HARDER);
  int maxI=image.getHeight();
  int maxJ=image.getWidth();
  int iSkip=(3 * maxI) / (4 * MAX_MODULES);
  if (iSkip < MIN_SKIP || tryHarder) {
    iSkip=MIN_SKIP;
  }
  boolean done=false;
  int[] stateCount=new int[5];
  for (int i=iSkip - 1; i < maxI && !done; i+=iSkip) {
    stateCount[0]=0;
    stateCount[1]=0;
    stateCount[2]=0;
    stateCount[3]=0;
    stateCount[4]=0;
    int currentState=0;
    for (int j=0; j < maxJ; j++) {
      if (image.get(j,i)) {
        if ((currentState & 1) == 1) {
          currentState++;
        }
        stateCount[currentState]++;
      }
 else {
        if ((currentState & 1) == 0) {
          if (currentState == 4) {
            if (foundPatternCross(stateCount)) {
              boolean confirmed=handlePossibleCenter(stateCount,i,j);
              if (confirmed) {
                iSkip=2;
                if (hasSkipped) {
                  done=haveMultiplyConfirmedCenters();
                }
 else {
                  int rowSkip=findRowSkip();
                  if (rowSkip > stateCount[2]) {
                    i+=rowSkip - stateCount[2] - iSkip;
                    j=maxJ - 1;
                  }
                }
              }
 else {
                stateCount[0]=stateCount[2];
                stateCount[1]=stateCount[3];
                stateCount[2]=stateCount[4];
                stateCount[3]=1;
                stateCount[4]=0;
                currentState=3;
                continue;
              }
              currentState=0;
              stateCount[0]=0;
              stateCount[1]=0;
              stateCount[2]=0;
              stateCount[3]=0;
              stateCount[4]=0;
            }
 else {
              stateCount[0]=stateCount[2];
              stateCount[1]=stateCount[3];
              stateCount[2]=stateCount[4];
              stateCount[3]=1;
              stateCount[4]=0;
              currentState=3;
            }
          }
 else {
            stateCount[++currentState]++;
          }
        }
 else {
          stateCount[currentState]++;
        }
      }
    }
    if (foundPatternCross(stateCount)) {
      boolean confirmed=handlePossibleCenter(stateCount,i,maxJ);
      if (confirmed) {
        iSkip=stateCount[0];
        if (hasSkipped) {
          done=haveMultiplyConfirmedCenters();
        }
      }
    }
  }
  FinderPattern[] patternInfo=selectBestPatterns();
  ResultPoint.orderBestPatterns(patternInfo);
  return new FinderPatternInfo(patternInfo);
}
